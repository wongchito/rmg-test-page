{"version":3,"sources":["panels/colour-diag/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/stations/edit-diag/name-list-items.tsx","panels/colour-diag/data.ts","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/stations/edit-diag/interchange-tab.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","useStyles","makeStyles","createStyles","listItemIcon","width","fontSize","textAlign","NameListItems","props","useTranslation","classes","React","className","style","variant","label","onChange","onUpdate","value","name","helperText","toString","cityList","country","en","zh","ga","pt","ko","ja","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","minWidth","marginRight","border","inputColour","position","left","top","buttonContainer","flexShrink","memo","i18n","useState","theme","hexTemp","setHexTemp","lineList","list","setList","listPromise","default","useEffect","data","l","i","colour","fg","useLineList","length","filter","newTheme","event","val","idx","target","select","line","disabled","key","backgroundColor","color","getTransText2","languages","type","rgb","htmlFor","title","aria-label","borderColor","component","error","match","hex","toUpperCase","prevProps","nextProps","CitySelect","items","useMemo","c","CountryFlag","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","includes","language","navigator","platform","indexOf","src","process","join","alt","String","fromCodePoint","cp","parseInt","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","paddingTop","inputBaseInputEN","paddingBottom","ColourDialog","nameChange","index","newName","lineName","handleClose","onClose","open","dividers","root","input","autoFocus","onClick","StationEditInterchangeTab","rmgStyle","useContext","CanvasContext","osiNameDialogOpened","setOsiNameDialogOpened","addClick","changeType","ns","stnTrans","info","inf","console","log","transInfo","osi_names","Array","deleteClick","slice","margin","InterchangeChipSet","stnId","setIndex","onDelete","lineHeight","whiteSpace","OSINameDialog","osiName","InterchangeMore","intChipSetStyles","intChip","intChipText","intChipTextZH","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","ParamContext","param","dispatch","intInfos","stn_list","transfer","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","deleteIcon","undefined","setIdx","intIdx","newOSIName","tickDirecChange","_event","direction","paidAreaChange","checked","isPaid","primary","secondary","row","tick_direc","control","labelPlacement","secondaryTypographyProps","edge","paid_area"],"mappings":"mHAAA,IAAIA,EAAM,CACT,cAAe,CACd,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,GAED,eAAgB,CACf,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,IAED,eAAgB,CACf,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,WAAY,CACX,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,YAAa,CACZ,GACA,EACA,GAED,eAAgB,CACf,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,GAED,gBAAiB,CAChB,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,WAAY,CACX,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,UAAW,CACV,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,oBAAqB,CACpB,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,WAAY,CACX,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,IAED,eAAgB,CACf,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAID,EAAI,OAGvCV,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,GACzBI,EAAOC,QAAUhB,G,gCC/PjB,yBAIMiB,EAAYC,sBAAW,kBACzBC,uBAAa,CACTC,aAAc,CACVC,MAAO,MACPC,SAAU,SACVC,UAAW,eAiDRC,IAvCO,SAACC,GAAkB,IAC7Bb,EAAMc,2BAANd,EACFe,EAAUV,IAEhB,OAAOW,WACH,kBACI,gCACI,gBAAC,WAAD,KACI,gBAAC,eAAD,KACI,wBAAMC,UAAWF,EAAQP,cAAzB,WAEJ,gBAAC,YAAD,CACIU,MAAO,CAAET,MAAO,QAChBU,QAAQ,WACRC,MAAOpB,EAAE,6BACTqB,SAAUR,EAAMS,SAAS,GACzBC,MAAOV,EAAMW,KAAK,MAG1B,gBAAC,WAAD,KACI,gBAAC,eAAD,KACI,wBAAMP,UAAWF,EAAQP,cAAzB,MAEJ,gBAAC,YAAD,CACIU,MAAO,CAAET,MAAO,QAChBU,QAAQ,WACRC,MAAOpB,EAAE,6BACTqB,SAAUR,EAAMS,SAAS,GACzBC,MAAOV,EAAMW,KAAK,GAClBC,WAAYzB,EAAE,yCAM9B,CAACa,EAAMW,KAAKE,e,+FCtDPC,EAAwB,CACjC,CACI5B,GAAI,UACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,UACJC,GAAI,iBAGZ,CACI/B,GAAI,WACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,WACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,UACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,UACJC,GAAI,iBAGZ,CACI/B,GAAI,YACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,YACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,WACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,WACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,YACJ6B,QAAS,QACTJ,KAAM,CACFK,GAAI,YACJE,GAAI,oBACJ,UAAW,qBACX,UAAW,uBAGnB,CACIhC,GAAI,SACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,SACJC,GAAI,iBAGZ,CACI/B,GAAI,UACJ6B,QAAS,QACTJ,KAAM,CACFK,GAAI,UACJE,GAAI,UACJD,GAAI,6BAGZ,CACI/B,GAAI,YACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,YACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,WACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,YACJC,GAAI,iBAGZ,CACI/B,GAAI,YACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,YACJC,GAAI,iBAGZ,CACI/B,GAAI,SACJ6B,QAAS,QACTJ,KAAM,CACFK,GAAI,SACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,QACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,QACJG,GAAI,QACJ,UAAW,eACX,UAAW,iBAGnB,CACIjC,GAAI,YACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,aACJC,GAAI,iBAGZ,CACI/B,GAAI,eACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,gBACJ,UAAW,qBACX,QAAS,qBACT,QAAS,uBAGjB,CACI9B,GAAI,QACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,4BACJI,GAAI,mCACJ,UAAW,6CACX,UAAW,+CAGnB,CACIlC,GAAI,WACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,WACJC,GAAI,iBAGZ,CACI/B,GAAI,WACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,WACJC,GAAI,iBAGZ,CACI/B,GAAI,SACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,SACJ,UAAW,eACX,UAAW,iBAGnB,CACI9B,GAAI,QACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,6BACJK,GAAI,6CACJ,UAAW,6CACX,UAAW,+CAGnB,CACInC,GAAI,UACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,UACJ,UAAW,qBACX,UAAW,uBAGnB,CACI9B,GAAI,OACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,QACJC,GAAI,iBAGZ,CACI/B,GAAI,QACJ6B,QAAS,KACTJ,KAAM,CACFK,GAAI,mBACJ,UAAW,4BACX,UAAW,yBCzLjBxB,EAAYC,sBAAW,kBACzBC,uBAAa,CACT4B,SAAU,CACNC,QAAS,OACTC,cAAe,MACfC,WAAY,UAEhBC,aAAc,CACVC,QAAS,WAEbC,OAAQ,CACJC,aAAc,MACdC,OAAQ,GACRlC,MAAO,GACPmC,SAAU,EACVC,YAAa,EACbC,OAAQ,QACRN,QAAS,GAEbO,YAAa,CACTC,SAAU,WACVvC,MAAO,EACPkC,OAAQ,EACRM,KAAM,GACNC,IAAK,IAETC,gBAAiB,CACbf,QAAS,OACTgB,WAAY,QAyCTpC,MAAMqC,MACjB,SAAoBxC,GAEhB,IAAME,EAAUV,IAF0B,EAGtBS,2BAAZd,EAHkC,EAGlCA,EAAGsD,EAH+B,EAG/BA,KAH+B,EAKZtC,IAAMuC,SAAS1C,EAAM2C,MAAM,IALf,mBAKnCC,EALmC,KAK1BC,EAL0B,KAapCC,EAlDM,SAACH,GAAkB,IAAD,EACVxC,IAAMuC,SAAS,IADL,mBAC3BK,EAD2B,KACrBC,EADqB,KAG5BC,EAAcN,EAAM,GACpB,kBAAsDA,EAAM,KAAM9D,MAC9D,SAAAS,GAAM,OAAIA,EAAO4D,WAErBvE,QAAQC,QAAQ,IAqBtB,OAnBAuE,qBACI,WAC4B,qBAAbR,EAAM,KAEO,UAAbA,EAAM,GAEbM,EAAYpE,MAAK,SAAAuE,GACbJ,EACII,EAAK9E,KAAI,SAAC+E,EAAGC,GAAJ,OAAiB,IAANA,EAAA,eAAeD,EAAf,CAAkBE,OAAQZ,EAAM,GAAIa,GAAIb,EAAM,IAAM,SAApD,eAAoEU,UAIhGJ,EAAYpE,MAAK,SAAAuE,GAAI,OAAIJ,EAAQI,SAIzC,CAACT,EAAM9B,aAGJkC,EAsBcU,CAAYzD,EAAM2C,OAGnCQ,qBACI,WACI,GAAwB,IAApBL,EAASY,SACTZ,EAASa,QAAO,SAAAN,GAAC,OAAIA,EAAEnE,KAAOc,EAAM2C,MAAM,MAAIe,OAAlD,CACA,IAAIE,EAAW,CAAC5D,EAAM2C,MAAM,GAAIG,EAAS,GAAG5D,GAAI4D,EAAS,GAAGS,OAAQT,EAAS,GAAGU,IAAM,QACtFxD,EAAMS,SAAS,QAASmD,MAG5B,CAACd,IAgBLK,qBACI,WACIN,EAAW7C,EAAM2C,MAAM,MAG3B,CAAC3C,EAAM2C,MAAM,KAyDjB,OACI,oCACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,uBAEJ,kBAAC,EAAD,CAAYjC,MAAOV,EAAM2C,MAAM,GAAInC,SArG5B,SAACqD,GAChB,IAAID,EAAW5D,EAAM2C,MAAMrE,KAAI,SAACwF,EAAKC,GAAN,OAAuB,IAARA,EAAYF,EAAMG,OAAOtD,MAAQoD,KAC/E9D,EAAMS,SAAS,QAASmD,OAqGpB,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,gBAEJ,kBAAC,YAAD,CACIK,QAAM,EACN5D,MAAO,CAAET,MAAO,QAChBU,QAAQ,WACRC,MAAOpB,EAAE,eACTqB,SA5FG,SAACqD,GAChB,IAAIK,EAAOL,EAAMG,OAAOtD,MACpBkD,EAAW,CACX5D,EAAM2C,MAAM,GACZuB,EACApB,EAASa,QAAO,SAAAN,GAAC,OAAIA,EAAEnE,KAAOgF,KAAM,GAAGX,OACvCT,EAASa,QAAO,SAAAN,GAAC,OAAIA,EAAEnE,KAAOgF,KAAM,GAAGV,IAAM,QAEjDxD,EAAMS,SAAS,QAASmD,IAqFZlD,MAAOV,EAAM2C,MAAM,GACnBwB,SAA6B,UAAnBnE,EAAM2C,MAAM,IAErBG,EAASxE,KAAI,SAAA+E,GAAC,OACX,kBAAC,WAAD,CAAUe,IAAKf,EAAEnE,GAAIwB,MAAO2C,EAAEnE,IAC1B,0BACIkB,UAAWF,EAAQwB,aACnBrB,MAAO,CACHgE,gBAAiBhB,EAAEE,OACnBe,MAAOjB,EAAEG,IAAM,SAGlBe,YAAclB,EAAE1C,KAAM8B,EAAK+B,kBAMhD,kBAAC,WAAD,KACI,yBAAKpE,UAAWF,EAAQoC,iBACpB,2BACImC,KAAK,QACLvF,GAAG,cACHwB,MAAOV,EAAM2C,MAAM,GACnBnC,SAhGC,SAACqD,GAClB,IAAIa,EAAMb,EAAMG,OAAOtD,MAGvB,GAFAmC,EAAW6B,GAEY,UAAnB1E,EAAM2C,MAAM,GAAgB,CAE5B,IAAIiB,EAAW,CAAC,QAAS5D,EAAM2C,MAAM,GAAI+B,EAAK1E,EAAM2C,MAAM,IAC1D3C,EAAMS,SAAS,QAASmD,OAGrB,CAEH,IAAIA,EAAW5D,EAAM2C,MAAMrE,KAAI,SAACwF,EAAKC,GAAN,OAAuB,IAARA,EAAYW,EAAMZ,KAChE9D,EAAMS,SAAS,QAASmD,KAoFZxD,UAAWF,EAAQgC,cAEvB,2BAAOyC,QAAQ,eACX,kBAAC,UAAD,CAASC,MAAOzF,EAAE,kBAAmB0F,aAAW,iBAC5C,kBAAC,SAAD,CACIzE,UAAWF,EAAQ0B,OACnBvB,MAAO,CACHgE,gBAAiBrE,EAAM2C,MAAM,GAC7BmC,YAAa9E,EAAM2C,MAAM,IAAM,QAEnCrC,QAAQ,YACRyE,UAAU,QAET,QAKjB,kBAAC,YAAD,CACIC,QAAO,OAACpC,QAAD,IAACA,OAAD,EAACA,EAASqC,MAAM,uBACvB5E,MAAO,CAAET,MAAO,OAAQoC,YAAa,GACrC1B,QAAQ,WACRC,MAAOpB,EAAE,iBACTqB,SAtGE,SAACqD,GACf,IAAIqB,EAAMrB,EAAMG,OAAOtD,MACvB,GAAyC,OAArCwE,EAAID,MAAM,uBAGd,GAFApC,EAAWqC,GAEY,UAAnBlF,EAAM2C,MAAM,GACZ,GAAuC,OAAnCuC,EAAID,MAAM,qBAA+B,CAEzC,IAAIrB,EAAW,CAAC,QAAS5D,EAAM2C,MAAM,GAAIuC,EAAKlF,EAAM2C,MAAM,IAC1D3C,EAAMS,SAAS,QAASmD,OAGrB,CAEH,IAAIA,EAAW,CAAC,QAAS5D,EAAM2C,MAAM,GAAI3C,EAAM2C,MAAM,GAAI3C,EAAM2C,MAAM,IACrE3C,EAAMS,SAAS,QAASmD,QAK5B,GAAuC,OAAnCsB,EAAID,MAAM,qBAA+B,CAEzC,IAAIrB,EAAW5D,EAAM2C,MAAMrE,KAAI,SAACwF,EAAKC,GAAN,OAAuB,IAARA,EAAYmB,EAAMpB,KAChE9D,EAAMS,SAAS,QAASmD,KAgFpBlD,MAAK,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAASuC,gBAEpB,kBAAC,YAAD,CACIlB,QAAM,EACN5D,MAAO,CAAET,MAAO,QAChBU,QAAQ,WACRC,MAAOpB,EAAE,aACTqB,SA/EC,SAACqD,GACd,IAAID,EAAW,CAAC,QAAS,QAAS5D,EAAM2C,MAAM,GAAIkB,EAAMG,OAAOtD,OAC/DV,EAAMS,SAAS,QAASmD,IA8EZlD,MAAOV,EAAM2C,MAAM,IAAM,QAEzB,kBAAC,WAAD,CAAUyB,IAAI,OAAO1D,MAAM,QACtBvB,EAAE,mBAEP,kBAAC,WAAD,CAAUiF,IAAI,OAAO1D,MAAM,QACtBvB,EAAE,yBAO3B,SAACiG,EAAWC,GAAZ,OAA0BD,EAAUzC,MAAM9B,aAAewE,EAAU1C,MAAM9B,cAGvEyE,EAAa,SAACtF,GAA8F,IAAD,EACzFC,2BAAZd,EADqG,EACrGA,EAAGsD,EADkG,EAClGA,KACLvC,EAAUV,IAEV+F,EAAQC,mBACV,kBACI1E,EAASxC,KAAI,SAAAmH,GAAC,OACV,kBAAC,WAAD,CAAUrB,IAAKqB,EAAEvG,GAAIwB,MAAO+E,EAAEvG,IAC1B,0BAAMkB,UAAWF,EAAQoB,UACrB,kBAACoE,EAAD,CAAa1G,KAAMyG,EAAE1E,UACrB,8BAAOwD,YAAckB,EAAE9E,KAAM8B,EAAK+B,mBAKlD,IAEJ,OACI,kBAAC,YAAD,CACIP,QAAM,EACN5D,MAAO,CAAET,MAAO,QAChBU,QAAQ,WACRC,MAAOpB,EAAE,eACTuB,MAAOV,EAAMU,MACbF,SAAUR,EAAMQ,UAEf+E,IAKPI,EAAiBlG,sBAAW,kBAC9BC,uBAAa,CACTkG,IAAK,CACD9D,OAAQ,GACRE,YAAa,eAQzB,SAAS0D,EAAY1F,GAA0B,IACnCyC,EAASxC,2BAATwC,KACFvC,EAAUyF,IAEZE,EAAa,GAoBjB,OAjBIA,EADsB,IAAtB7F,EAAMhB,KAAK0E,OACE1D,EAAMhB,KACdmG,cACAW,MAAM,IACNxH,KAAI,SAAAyH,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQnF,SAAS,IAAIsE,iBAEvD,CAAC,SAASc,OACnBjG,EAAMhB,KACDmG,cACAW,MAAM,IACNxH,KAAI,SAAAyH,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQnF,SAAS,IAAIsE,iBACpE,SAKJ,CAAC,QAAS,WAAWe,SAASzD,EAAK0D,WAA4B,OAAfnG,EAAMhB,OAAe6G,EAAa,CAAC,WAEvC,IAAzCO,UAAUC,SAASC,QAAQ,WAA4D,IAAzCF,UAAUC,SAASC,QAAQ,SAC5E,yBACIC,IAAKC,iBAAA,wBAA0CX,EAAWY,KAAK,KAA1D,QACLrG,UAAWF,EAAQ0F,IACnBc,IAAG,kBAAa1G,EAAMhB,QAI1B,8BAAO2H,OAAOC,cAAP,MAAAD,OAAM,YAAkBd,EAAWvH,KAAI,SAAAuI,GAAE,OAAIC,SAASD,EAAI,UC9UzE,IAAMrH,EAAYC,sBAAW,SAAAkD,GAAK,OAC9BjD,uBAAa,CACTqH,UAAW,CACPnH,MAAO,KAEXoH,cAAe,CACXC,eAAgB,UAEpBC,SAAU,CACN/E,SAAU,WACVmC,MAAO3B,EAAMwE,QAAQC,OAAOC,QAEhCC,cAAe,CACX/F,QAAS,SAEbgG,iBAAkB,CACdzH,UAAW,SACXD,SAAU,GACV8B,QAAS,EACT6F,WAAY,EACZ1F,OAAQ,IAEZ2F,iBAAkB,CACd3H,UAAW,SACXD,SAAU,GACV8B,QAAS,EACT+F,cAAe,EACf5F,OAAQ,aA0EL6F,EA7DMxH,IAAMqC,MACvB,SAACxC,GACG,IAAME,EAAUV,IACRL,EAAMc,2BAANd,EAEFyI,EAAa,SAAClH,EAAemH,GAC/B,IAAIC,EAAU9H,EAAM+H,SAASzJ,KAAI,SAACwF,EAAKC,GAAN,OAAeA,IAAQ8D,EAAQnH,EAAQoD,KACxE9D,EAAMS,SAAS,OAAQqH,IAIrBE,EAAc,WAChBhI,EAAMiI,WAGV,OACI,kBAAC,SAAD,CAAQA,QAASD,EAAaE,KAAMlI,EAAMkI,MACtC,kBAAC,cAAD,KAAc/I,EAAE,iBAChB,kBAAC,gBAAD,CAAegJ,UAAQ,GACnB,kBAAC,OAAD,KACI,kBAAC,WAAD,CAAU/H,UAAWF,EAAQ8G,eACzB,kBAAC,QAAD,CAAO5G,UAAWF,EAAQ6G,UAAW1G,MAAO,CAAEgE,gBAAiBrE,EAAM2C,MAAM,KACvE,kBAAC,OAAD,CAAMvC,UAAWF,EAAQgH,UAAzB,QACA,kBAAC,YAAD,CACIxG,MAAOV,EAAM+H,SAAS,GACtB7H,QAAS,CACLkI,KAAMlI,EAAQoH,cACde,MAAOnI,EAAQqH,kBAEnBlH,MAAO,CAAEiE,MAAOtE,EAAM2C,MAAM,IAAM,QAClCnC,SAAU,SAAA1B,GAAC,OAAI8I,EAAW9I,EAAEkF,OAAOtD,MAAO,IAC1C4H,WAAS,IAEb,kBAAC,YAAD,CACI5H,MAAOV,EAAM+H,SAAS,GACtB7H,QAAS,CACLkI,KAAMlI,EAAQoH,cACde,MAAOnI,EAAQuH,kBAEnBpH,MAAO,CAAEiE,MAAOtE,EAAM2C,MAAM,IAAM,QAClCnC,SAAU,SAAA1B,GAAC,OAAI8I,EAAW9I,EAAEkF,OAAOtD,MAAO,QAItD,kBAAC,EAAD,CAAgBiC,MAAO3C,EAAM2C,MAAOlC,SAAUT,EAAMS,aAG5D,kBAAC,gBAAD,KACI,kBAAC,SAAD,CAAQ8H,QAASP,EAAa1D,MAAM,WAC/BnF,EAAE,qBAMvB,SAACiG,EAAWC,GAAZ,OACID,EAAU8C,OAAS7C,EAAU6C,MAC7B9C,EAAU2C,SAASlH,aAAewE,EAAU0C,SAASlH,YACrDuE,EAAUzC,MAAM9B,aAAewE,EAAU1C,MAAM9B,cCpHxC8G,O,qHC6MAa,UA5KmB,SAACxI,GAA2C,IAClEb,EAAMc,2BAANd,EAEAsJ,EAAaC,qBAAWC,KAAxBF,SAHiE,EAOnBtI,IAAMuC,UAAS,GAPI,mBAOlEkG,EAPkE,KAO7CC,EAP6C,KASnEC,EAAW,SAACjB,GACd,IAKIkB,EALAC,EAAKhJ,EAAMiJ,SAASC,KAAK5K,KAAI,SAAA6K,GAAG,OAAIA,EAAIzF,UA+B5C,GA9BkB,IAAdsF,EAAGtF,SACHsF,EAAG,GAAK,GAEZA,EAAGnB,IAAU,EAGTkB,EADU,IAAVC,EAAG,IAAsB,IAAVA,EAAG,GACL,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OAGA,OAEjBI,QAAQC,IAAIN,GACuB,IAA/B/I,EAAMiJ,SAASC,KAAKxF,QAA0B,IAAVmE,EAAa,CACjD,IAAIyB,EAAS,eACNtJ,EAAMiJ,SADA,CAETxE,KAAMsE,EACNQ,UAAWR,EAAW7C,SAAS,OAAS,CAAClG,EAAMiJ,SAASM,UAAU,IAAM,CAAC,qBAAO,aAAe,GAC/FL,KAAMlJ,EAAMiJ,SAASC,KAAKjD,OAAO,CAAC,CAACuD,MAAM,QAG7CJ,QAAQC,IAAIC,GACZtJ,EAAMS,SAAS6I,OACZ,CACH,IAAIA,EAAS,eACNtJ,EAAMiJ,SADA,CAETxE,KAAMsE,EACNQ,UAAWR,EAAW7C,SAAS,OAAS,CAAClG,EAAMiJ,SAASM,UAAU,IAAM,CAAC,qBAAO,aAAe,GAC/FL,KAAMlJ,EAAMiJ,SAASC,KAAK5K,KAAI,SAAC6K,EAAKpF,GAAN,OAC1BA,IAAQ8D,EAAQsB,EAAIlD,OAAO,CAACuD,MAAM,KAA0BL,OAIpEC,QAAQC,IAAIC,GACZtJ,EAAMS,SAAS6I,KAIjBG,EAAc,SAAC5B,EAAevE,GAChC,IAKIyF,EALAC,EAAKhJ,EAAMiJ,SAASC,KAAK5K,KAAI,SAAA6K,GAAG,OAAIA,EAAIzF,UAC1B,IAAdsF,EAAGtF,SACHsF,EAAG,GAAK,GAEZA,EAAGnB,IAAU,EAGTkB,EADU,IAAVC,EAAG,IAAsB,IAAVA,EAAG,GACL,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,QACI,IAAVA,EAAG,IAAsB,IAAVA,EAAG,GACZ,OAGA,OAEjBI,QAAQC,IAAIN,GAEZ,IAAIO,EAAS,eACNtJ,EAAMiJ,SADA,CAETxE,KAAMsE,EACNQ,UAAWR,EAAW7C,SAAS,OAAS,CAAClG,EAAMiJ,SAASM,UAAU,IAAM,CAAC,qBAAO,aAAe,GAC/FL,KAAMlJ,EAAMiJ,SAASC,KAAK5K,KAAI,SAAC6K,EAAKpF,GAAN,OAC1BA,IAAQ8D,EAAQsB,EAAIO,MAAM,EAAGpG,GAAG2C,OAAOkD,EAAIO,MAAMpG,EAAI,IAAM6F,OAGnEC,QAAQC,IAAIC,GACZtJ,EAAMS,SAAS6I,IAGnB,OACI,kBAAC,OAAD,KACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,wBAAIjJ,MAAO,CAAEsJ,OAAQ,IAAMxK,EAAE,sCAEjC,kBAAC,0BAAD,KACI,kBAAC,UAAD,CAASyF,MAAOzF,EAAE,iCAAkC0F,aAAW,OAC3D,kBAAC,aAAD,CAAY0D,QAAS,kBAAMO,EAAS,KAChC,kBAAC,OAAD,uBAKhB,kBAAC,WAAD,KACI,kBAACc,EAAD,CAAoBC,MAAO7J,EAAM6J,MAAOC,SAAU,EAAGC,SAAU,SAAAzG,GAAC,OAAImG,EAAY,EAAGnG,OAEtF,CAAC,MAAO,WAAW4C,SAASuC,GAAY,KACrC,oCACI,kBAAC,UAAD,MACA,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,wBAAIpI,MAAO,CAAEsJ,OAAQ,IAAMxK,EAAE,mCAEjC,kBAAC,0BAAD,KACI,kBAAC,SAAD,CACImB,QAAQ,WACRgE,MAAM,UACNjE,MAAO,CAAE2J,WAAY,OAAQC,WAAY,MAAOjI,YAAa,GAC7DuG,QAAS,kBAAMM,GAAuB,KAErC7I,EAAMiJ,SAASM,UAAU,GACpBvJ,EAAMiJ,SAASM,UAAU,GAAG9C,KAAK,QACjC,kCAEV,kBAACyD,EAAD,CACIhC,KAAMU,EACNuB,QAASnK,EAAMiJ,SAASM,UAAU,IAAM,CAAC,GAAI,IAC7CM,MAAO7J,EAAM6J,MACb5B,QAAS,kBAAMY,GAAuB,MAE1C,kBAAC,UAAD,CAASjE,MAAOzF,EAAE,iCAAkC0F,aAAW,OAC3D,kBAAC,aAAD,CAAY0D,QAAS,kBAAMO,EAAS,KAChC,kBAAC,OAAD,uBAKhB,kBAAC,WAAD,KACI,kBAACc,EAAD,CAAoBC,MAAO7J,EAAM6J,MAAOC,SAAU,EAAGC,SAAU,SAAAzG,GAAC,OAAImG,EAAY,EAAGnG,OAEvF,kBAAC,WAAD,KACI,8BAAOnE,EAAE,qCAIP,QAAbsJ,GAAsB,kBAAC2B,EAAD,CAAiBP,MAAO7J,EAAM6J,UAOjE,IAAMQ,EAAmB5K,sBAAW,kBAChCC,uBAAa,CACT4K,QAAS,CACLzI,aAAc,IACdC,OAAQ,GACRkI,WAAY,OACZL,OAAQ,GAEZY,YAAa,CACThJ,QAAS,QACTzB,UAAW,UAEf0K,cAAe,CACX3K,SAAU,GACVmK,WAAY,UAEhBS,cAAe,CACX5K,SAAU,SACVmK,WAAY,QACZC,WAAY,YAEhBS,aAAc,CACVC,YAAa,EACbC,aAAc,GAElBC,kBAAmB,CACfC,YAAa,QAWnBlB,EAAqB,SAAC5J,GACxB,IAAME,EAAUmK,IAD2C,EAG/BlK,IAAMuI,WAAWqC,KAArCC,EAHmD,EAGnDA,MAAOC,EAH4C,EAG5CA,SACTC,EAAWF,EAAMG,SAASnL,EAAM6J,OAAOuB,SAASlC,KAAKlJ,EAAM8J,UAJN,EAMnB3J,IAAMuC,UAAU,GANG,mBAMpD2I,EANoD,KAMtCC,EANsC,OAOXnL,IAAMuC,UAAS,GAPJ,mBAOpD6I,EAPoD,KAOlCC,EAPkC,KAmCrDC,EAAQ,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAU5M,KAAI,SAACoN,EAASpI,GACrC,IAAI/C,EACA,0BAAMF,MAAO,CAAEiE,MAAOoH,EAAQ,KAC1B,0BAAMtL,UAAS,UAAKF,EAAQqK,YAAb,YAA4BrK,EAAQsK,gBAAkBkB,EAAQ,IAC7E,0BAAMtL,UAAS,UAAKF,EAAQqK,YAAb,YAA4BrK,EAAQuK,gBAAkBiB,EAAQ,KAGrF,OACI,kBAAC,OAAD,CACItH,IAAKd,EACL/C,MAAOA,EACPH,UAAWF,EAAQoK,QACnBpK,QAAS,CACLK,MAAOL,EAAQwK,aACfiB,WAAYzL,EAAQ2K,mBAExBxK,MAAO,CAAEgE,gBAAiBqH,EAAQ,IAClC3B,SAAU,kBAAM/J,EAAM+J,SAASzG,IAC/BiF,QAAS,kBA3CjB+C,EA2CmChI,QA1CnCkI,GAAoB,SA+CxB,OACI,6BACKC,EAED,kBAAC,IAAD,CACIvD,KAAMqD,EACN5I,WACiCiJ,KAArB,OAARV,QAAQ,IAARA,OAAA,EAAAA,EAAWG,IACH,GACF,CACIH,EAASG,GAAc,GACvBH,EAASG,GAAc,GACvBH,EAASG,GAAc,GACvBH,EAASG,GAAc,IAGrCtD,cACiC6D,KAArB,OAARV,QAAQ,IAARA,OAAA,EAAAA,EAAWG,IACL,CAAC,GAAI,IACL,CAACH,EAASG,GAAc,GAAIH,EAASG,GAAc,IAE7D5K,SAjEa,SAAC2D,EAAa1D,GACvB,UAAR0D,GACA6G,EAAS,CACLxG,KAAM,kCACNoF,MAAO7J,EAAM6J,MACbgC,OAAQ7L,EAAM8J,SACdgC,OAAQT,EACRnC,KAAOxI,EAAmBuF,OAAOuD,MAAM,MAGnC,SAARpF,GACA6G,EAAS,CACLxG,KAAM,kCACNoF,MAAO7J,EAAM6J,MACbgC,OAAQ7L,EAAM8J,SACdgC,OAAQT,EACRnC,KAAMM,MAAM,GAAGvD,OAAOvF,MAkDtBuH,QAAS,kBAAMuD,GAAoB,QAa7CtB,EAAgB/J,IAAMqC,MACxB,SAACxC,GAA+B,IACpBb,EAAMc,2BAANd,EAEA8L,EAAa9K,IAAMuI,WAAWqC,KAA9BE,SAOR,OACI,kBAAC,SAAD,CAAQ/C,KAAMlI,EAAMkI,KAAMD,QAASjI,EAAMiI,SACrC,kBAAC,cAAD,KAAc9I,EAAE,sCAChB,kBAAC,gBAAD,CAAegJ,UAAQ,GACnB,kBAAC,OAAD,KACI,kBAAC,IAAD,CAAe1H,SAVV,SAACoH,GAAD,OAAmB,SAAChE,GACrC,IAAIkI,EAAa/L,EAAMmK,QAAQ7L,KAAI,SAACwF,EAAKR,GAAN,OAAaA,IAAMuE,EAAQhE,EAAMG,OAAOtD,MAAQoD,KACnFmH,EAAS,CAAExG,KAAM,0BAA2BoF,MAAO7J,EAAM6J,MAAOlJ,KAAMoL,MAQnBpL,KAAMX,EAAMmK,YAG3D,kBAAC,gBAAD,KACI,kBAAC,SAAD,CAAQ5B,QAASvI,EAAMiI,QAAS3D,MAAM,UAAUgE,WAAS,GACpDnJ,EAAE,qBAMvB,SAACiG,EAAWC,GACR,OAAID,EAAU8C,OAAS7C,EAAU6C,MAGtB9C,EAAU+E,QAAQtJ,aAAewE,EAAU8E,QAAQtJ,cAKhEuJ,EAAkB,SAACpK,GAA8B,IAC3Cb,EAAMc,2BAANd,EAD0C,EAGtBgB,IAAMuI,WAAWqC,KAArCC,EAH0C,EAG1CA,MAAOC,EAHmC,EAGnCA,SACThC,EAAW+B,EAAMG,SAASnL,EAAM6J,OAAOuB,SAEvCY,EAAkB,SAACC,EAA6CvL,GACpD,MAAVA,GAA2B,MAAVA,GACjBuK,EAAS,CACLxG,KAAM,4BACNoF,MAAO7J,EAAM6J,MACbqC,UAAWxL,KAIjByL,EAAiB,SAACF,EAA+BG,GAAhC,OACnBnB,EAAS,CACLxG,KAAM,2BACNoF,MAAO7J,EAAM6J,MACbwC,OAAQD,KAGhB,OAAOjM,IAAMqF,SACT,kBACI,oCACI,kBAAC,UAAD,MACA,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,wBAAInF,MAAO,CAAEsJ,OAAQ,IAAMxK,EAAE,yCAGrC,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,qCAEJ,kBAAC,eAAD,CACImN,QAASnN,EAAE,6CACXoN,UACI,kBAAC,aAAD,CAAY5L,KAAK,aAAa6L,KAAG,EAAC9L,MAAOuI,EAASwD,WAAYjM,SAAUwL,GACpE,kBAAC,mBAAD,CACItL,MAAM,IACNgM,QAAS,kBAAC,QAAD,CAAOpI,MAAM,cACtB/D,MAAOpB,EAAE,yCACTwN,eAAe,QAEnB,kBAAC,mBAAD,CACIjM,MAAM,IACNgM,QAAS,kBAAC,QAAD,CAAOpI,MAAM,cACtB/D,MAAOpB,EAAE,yCACTwN,eAAe,SAI3BC,yBAAwB,eAAK,YAAqB,UAG1D,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,sBAEJ,kBAAC,eAAD,CAAcN,QAASnN,EAAE,wCACzB,kBAAC,0BAAD,KACI,kBAAC,SAAD,CAAQ0N,KAAK,MAAMrM,SAAU2L,EAAgBC,QAASnD,EAAS6D,iBAM/E,CAAC9M,EAAM6J,MAAOZ,EAASwD,WAAYxD,EAAS6D","file":"static/js/panelStationsInterchange.9114e50a.chunk.js","sourcesContent":["var map = {\n\t\"./README.md\": [\n\t\t57,\n\t\t7,\n\t\t48\n\t],\n\t\"./beijing\": [\n\t\t25,\n\t\t9,\n\t\t1\n\t],\n\t\"./beijing.ts\": [\n\t\t25,\n\t\t9,\n\t\t1\n\t],\n\t\"./changsha\": [\n\t\t26,\n\t\t9,\n\t\t12\n\t],\n\t\"./changsha.ts\": [\n\t\t26,\n\t\t9,\n\t\t12\n\t],\n\t\"./chengdu\": [\n\t\t27,\n\t\t9,\n\t\t21\n\t],\n\t\"./chengdu.ts\": [\n\t\t27,\n\t\t9,\n\t\t21\n\t],\n\t\"./chongqing\": [\n\t\t28,\n\t\t9,\n\t\t22\n\t],\n\t\"./chongqing.ts\": [\n\t\t28,\n\t\t9,\n\t\t22\n\t],\n\t\"./dongguan\": [\n\t\t29,\n\t\t9,\n\t\t23\n\t],\n\t\"./dongguan.ts\": [\n\t\t29,\n\t\t9,\n\t\t23\n\t],\n\t\"./edinburgh\": [\n\t\t30,\n\t\t9,\n\t\t2\n\t],\n\t\"./edinburgh.ts\": [\n\t\t30,\n\t\t9,\n\t\t2\n\t],\n\t\"./foshan\": [\n\t\t31,\n\t\t9,\n\t\t3\n\t],\n\t\"./foshan.ts\": [\n\t\t31,\n\t\t9,\n\t\t3\n\t],\n\t\"./glasgow\": [\n\t\t32,\n\t\t9,\n\t\t4\n\t],\n\t\"./glasgow.ts\": [\n\t\t32,\n\t\t9,\n\t\t4\n\t],\n\t\"./guangzhou\": [\n\t\t33,\n\t\t9,\n\t\t5\n\t],\n\t\"./guangzhou.ts\": [\n\t\t33,\n\t\t9,\n\t\t5\n\t],\n\t\"./hongkong\": [\n\t\t34,\n\t\t9,\n\t\t6\n\t],\n\t\"./hongkong.ts\": [\n\t\t34,\n\t\t9,\n\t\t6\n\t],\n\t\"./kaohsiung\": [\n\t\t35,\n\t\t9,\n\t\t7\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t35,\n\t\t9,\n\t\t7\n\t],\n\t\"./london\": [\n\t\t36,\n\t\t9,\n\t\t8\n\t],\n\t\"./london.ts\": [\n\t\t36,\n\t\t9,\n\t\t8\n\t],\n\t\"./macao\": [\n\t\t37,\n\t\t9,\n\t\t9\n\t],\n\t\"./macao.ts\": [\n\t\t37,\n\t\t9,\n\t\t9\n\t],\n\t\"./newtaipei\": [\n\t\t38,\n\t\t9,\n\t\t10\n\t],\n\t\"./newtaipei.ts\": [\n\t\t38,\n\t\t9,\n\t\t10\n\t],\n\t\"./other\": [\n\t\t39,\n\t\t9,\n\t\t11\n\t],\n\t\"./other.ts\": [\n\t\t39,\n\t\t9,\n\t\t11\n\t],\n\t\"./sanfrancisco\": [\n\t\t40,\n\t\t9,\n\t\t13\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t40,\n\t\t9,\n\t\t13\n\t],\n\t\"./seoul\": [\n\t\t41,\n\t\t9,\n\t\t14\n\t],\n\t\"./seoul.ts\": [\n\t\t41,\n\t\t9,\n\t\t14\n\t],\n\t\"./shanghai\": [\n\t\t42,\n\t\t9,\n\t\t15\n\t],\n\t\"./shanghai.ts\": [\n\t\t42,\n\t\t9,\n\t\t15\n\t],\n\t\"./shenzhen\": [\n\t\t43,\n\t\t9,\n\t\t16\n\t],\n\t\"./shenzhen.ts\": [\n\t\t43,\n\t\t9,\n\t\t16\n\t],\n\t\"./taipei\": [\n\t\t44,\n\t\t9,\n\t\t17\n\t],\n\t\"./taipei.ts\": [\n\t\t44,\n\t\t9,\n\t\t17\n\t],\n\t\"./tokyo\": [\n\t\t45,\n\t\t9,\n\t\t18\n\t],\n\t\"./tokyo.ts\": [\n\t\t45,\n\t\t9,\n\t\t18\n\t],\n\t\"./toronto\": [\n\t\t46,\n\t\t9,\n\t\t19\n\t],\n\t\"./toronto.ts\": [\n\t\t46,\n\t\t9,\n\t\t19\n\t],\n\t\"./xi'an\": [\n\t\t47,\n\t\t9,\n\t\t20\n\t],\n\t\"./xi'an.ts\": [\n\t\t47,\n\t\t9,\n\t\t20\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 51;\nmodule.exports = webpackAsyncContext;","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>漢</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n};\n\nexport default NameListItems;\n","export const cityList: CityEntry[] = [\n    {\n        id: 'beijing',\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: 'changsha',\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: 'chengdu',\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: 'chongqing',\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: 'dongguan',\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: 'edinburgh',\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: 'foshan',\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: 'glasgow',\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: 'guangzhou',\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: 'hongkong',\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: 'kaohsiung',\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: 'london',\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: 'macao',\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: 'newtaipei',\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: 'sanfrancisco',\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: 'seoul',\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: 'shanghai',\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: 'shenzhen',\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: 'taipei',\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            'zh-Hans': '台北',\n            'zh-Hant': '臺北',\n        },\n    },\n    {\n        id: 'tokyo',\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: 'toronto',\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: 'xian',\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: 'other',\n        country: 'UN',\n        name: {\n            en: 'Customise (Beta)',\n            'zh-Hans': '自定义 (Beta)',\n            'zh-Hant': '自訂 (Beta)',\n        },\n    },\n];\n","import React, { useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    Button,\n    makeStyles,\n    createStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { cityList } from './data';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 28,\n            width: 28,\n            minWidth: 0,\n            marginRight: 8,\n            border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as LineEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `./colours/${theme[0]}`).then(\n              module => module.default as LineEntry[]\n          )\n        : Promise.resolve([] as LineEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            } else if (theme[0] === 'other') {\n                // mutate original list\n                listPromise.then(data => {\n                    setList(\n                        data.map((l, i) => (i === 0 ? { ...l, colour: theme[2], fg: theme[3] || '#fff' } : { ...l }))\n                    );\n                });\n            } else {\n                listPromise.then(data => setList(data));\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: [string, string, string, '#000' | '#fff'];\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport default React.memo(\n    function ThemeItems(props: ColourDialogProps) {\n        // console.log('rerender');\n        const classes = useStyles();\n        const { t, i18n } = useTranslation();\n\n        const [hexTemp, setHexTemp] = React.useState(props.theme[2]);\n\n        const cityChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = props.theme.map((val, idx) => (idx === 0 ? event.target.value : val));\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for fetching line list of current city\n        const lineList = useLineList(props.theme);\n\n        // Hook for updating props.theme when lineList changed\n        useEffect(\n            () => {\n                if (lineList.length === 0) return; // initialising, ignore\n                if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n                let newTheme = [props.theme[0], lineList[0].id, lineList[0].colour, lineList[0].fg || '#fff'];\n                props.onUpdate('theme', newTheme);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [lineList]\n        );\n\n        const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let line = event.target.value;\n            let newTheme = [\n                props.theme[0],\n                line,\n                lineList.filter(l => l.id === line)[0].colour,\n                lineList.filter(l => l.id === line)[0].fg || '#fff',\n            ];\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for updating hexTemp when props.hex changed\n        // which means valid hex has been updated to props\n        useEffect(\n            () => {\n                setHexTemp(props.theme[2]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.theme[2]]\n        );\n\n        const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let rgb = event.target.value;\n            setHexTemp(rgb);\n\n            if (props.theme[0] !== 'other') {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = ['other', props.theme[1], rgb, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? rgb : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            }\n        };\n\n        const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let hex = event.target.value;\n            if (hex.match(/^#[0-9a-fA-f]{0,6}$/) === null) return;\n            setHexTemp(hex);\n\n            if (props.theme[0] !== 'other') {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify theme city and props.hex\n                    let newTheme = ['other', props.theme[1], hex, props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                } else {\n                    // if hex not valid, modify theme city only\n                    let newTheme = ['other', props.theme[1], props.theme[2], props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                }\n            } else {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify props.hex\n                    let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (actually only hex is changed)\n                } else {\n                    // if hex not valid, do nothing\n                }\n            }\n        };\n\n        const fgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = ['other', 'other', props.theme[2], event.target.value];\n            props.onUpdate('theme', newTheme);\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>location_city</Icon>\n                    </ListItemIcon>\n                    <CitySelect value={props.theme[0]} onChange={cityChange} />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>subway</Icon>\n                    </ListItemIcon>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.line')}\n                        onChange={lineChange}\n                        value={props.theme[1]}\n                        disabled={props.theme[0] === 'other'}\n                    >\n                        {lineList.map(l => (\n                            <MenuItem key={l.id} value={l.id}>\n                                <span\n                                    className={classes.menuItemSpan}\n                                    style={{\n                                        backgroundColor: l.colour,\n                                        color: l.fg || '#fff',\n                                    }}\n                                >\n                                    {getTransText2(l.name, i18n.languages)}\n                                </span>\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </ListItem>\n                <ListItem>\n                    <div className={classes.buttonContainer}>\n                        <input\n                            type=\"color\"\n                            id=\"input-color\"\n                            value={props.theme[2]}\n                            onChange={colourChange}\n                            className={classes.inputColour}\n                        />\n                        <label htmlFor=\"input-color\">\n                            <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                                <Button\n                                    className={classes.button}\n                                    style={{\n                                        backgroundColor: props.theme[2],\n                                        borderColor: props.theme[3] || '#fff',\n                                    }}\n                                    variant=\"contained\"\n                                    component=\"span\"\n                                >\n                                    {' '}\n                                </Button>\n                            </Tooltip>\n                        </label>\n                    </div>\n                    <TextField\n                        error={!hexTemp?.match(/^#[0-9a-fA-f]{6}$/g)}\n                        style={{ width: '100%', marginRight: 5 }}\n                        variant=\"outlined\"\n                        label={t('colour.colour')}\n                        onChange={hexChange}\n                        value={hexTemp?.toUpperCase()}\n                    ></TextField>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.fg')}\n                        onChange={fgChange}\n                        value={props.theme[3] || '#fff'}\n                    >\n                        <MenuItem key=\"#fff\" value=\"#fff\">\n                            {t('colour.fgWhite')}\n                        </MenuItem>\n                        <MenuItem key=\"#000\" value=\"#000\">\n                            {t('colour.fgBlack')}\n                        </MenuItem>\n                    </TextField>\n                </ListItem>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nconst CitySelect = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages)}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <TextField\n            select\n            style={{ width: '100%' }}\n            variant=\"outlined\"\n            label={t('colour.city')}\n            value={props.value}\n            onChange={props.onChange}\n        >\n            {items}\n        </TextField>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (['zh-CN', 'zh-Hans'].includes(i18n.language) && props.code === 'TW') codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    Paper,\n    Icon,\n    InputBase,\n    makeStyles,\n    DialogActions,\n    Button,\n    createStyles,\n} from '@material-ui/core';\n\nimport ThemeListItems from './theme-items';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        paperRoot: {\n            width: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n    })\n);\n\ninterface ColourDialogProps {\n    open: boolean;\n    theme: [string, string, string, '#000' | '#fff'];\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst ColourDialog = React.memo(\n    (props: ColourDialogProps) => {\n        const classes = useStyles();\n        const { t } = useTranslation();\n\n        const nameChange = (value: string, index: number) => {\n            let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n            props.onUpdate('name', newName);\n            // props.onUpdate('all', [...props.theme, ...newName]);\n        };\n\n        const handleClose = () => {\n            props.onClose();\n        };\n\n        return (\n            <Dialog onClose={handleClose} open={props.open}>\n                <DialogTitle>{t('colour.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem className={classes.listItemPaper}>\n                            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                                <Icon className={classes.iconRoot}>edit</Icon>\n                                <InputBase\n                                    value={props.lineName[0]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputZH,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 0)}\n                                    autoFocus\n                                />\n                                <InputBase\n                                    value={props.lineName[1]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputEN,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 1)}\n                                />\n                            </Paper>\n                        </ListItem>\n                        <ThemeListItems theme={props.theme} onUpdate={props.onUpdate} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.open === nextProps.open &&\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nexport default ColourDialog;\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    Divider,\n    Button,\n    ListItemIcon,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    Switch,\n    Chip,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tooltip,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\n\ninterface StationEditInterchangeTabProps {\n    stnTrans: StationTransfer;\n    stnId: string;\n    onUpdate: (trans: StationTransfer) => void;\n}\n\nconst StationEditInterchangeTab = (props: StationEditInterchangeTabProps) => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n\n    // const { param, dispatch } = React.useContext(ParamContext);\n\n    const [osiNameDialogOpened, setOsiNameDialogOpened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] += 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n        if (props.stnTrans.info.length === 1 && index === 1) {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.concat([[Array(6) as InterchangeInfo]]),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        } else {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.map((inf, idx) =>\n                    idx === index ? inf.concat([Array(6) as InterchangeInfo]) : inf\n                ),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        }\n    };\n\n    const deleteClick = (index: number, i: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] -= 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n\n        let transInfo = {\n            ...props.stnTrans,\n            type: changeType as any,\n            osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n            info: props.stnTrans.info.map((inf, idx) =>\n                idx === index ? inf.slice(0, i).concat(inf.slice(i + 1)) : inf\n            ),\n        };\n        console.log(transInfo);\n        props.onUpdate(transInfo);\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={props.stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n            {['mtr', 'shmetro'].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                onClick={() => setOsiNameDialogOpened(true)}\n                            >\n                                {props.stnTrans.osi_names[0]\n                                    ? props.stnTrans.osi_names[0].join('\\r\\n')\n                                    : '車站名\\r\\nStn Name'}\n                            </Button>\n                            <OSINameDialog\n                                open={osiNameDialogOpened}\n                                osiName={props.stnTrans.osi_names[0] || ['', '']}\n                                stnId={props.stnId}\n                                onClose={() => setOsiNameDialogOpened(false)}\n                            />\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={props.stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                    <ListItem>\n                        <span>{t('stations.edit.interchange.note')}</span>\n                    </ListItem>\n                </>\n            )}\n            {rmgStyle === 'mtr' && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const classes = intChipSetStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const intInfos = param.stn_list[props.stnId].transfer.info[props.setIndex];\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: (value as string[]).concat(Array(2)) as InterchangeInfo,\n            });\n        }\n        if (key === 'name') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: Array(4).concat(value) as InterchangeInfo,\n            });\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => props.onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? (([] as any) as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as '#fff' | '#000',\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    osiName: Name;\n    onClose: () => void;\n}\n\nconst OSINameDialog = React.memo(\n    (props: OSINameDialogProps) => {\n        const { t } = useTranslation();\n\n        const { dispatch } = React.useContext(ParamContext);\n\n        const handleUpdate = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = props.osiName.map((val, i) => (i === index ? event.target.value : val)) as Name;\n            dispatch({ type: 'UPDATE_STATION_OSI_NAME', stnId: props.stnId, name: newOSIName });\n        };\n\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <NameListItems onUpdate={handleUpdate} name={props.osiName} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.open !== nextProps.open) {\n            return false;\n        } else {\n            return prevProps.osiName.toString() === nextProps.osiName.toString();\n        }\n    }\n);\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnTrans = param.stn_list[props.stnId].transfer;\n\n    const tickDirecChange = (_event: React.ChangeEvent<HTMLInputElement>, value: string) => {\n        if (value === 'l' || value === 'r')\n            dispatch({\n                type: 'UPDATE_STATION_TICK_DIREC',\n                stnId: props.stnId,\n                direction: value,\n            });\n    };\n\n    const paidAreaChange = (_event: React.ChangeEvent<{}>, checked: boolean) =>\n        dispatch({\n            type: 'UPDATE_STATION_PAID_AREA',\n            stnId: props.stnId,\n            isPaid: checked,\n        });\n\n    return React.useMemo(\n        () => (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={t('stations.edit.interchange.tickDirec.label')}\n                        secondary={\n                            <RadioGroup name=\"tick_direc\" row value={stnTrans.tick_direc} onChange={tickDirecChange}>\n                                <FormControlLabel\n                                    value=\"l\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.l')}\n                                    labelPlacement=\"end\"\n                                />\n                                <FormControlLabel\n                                    value=\"r\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.r')}\n                                    labelPlacement=\"end\"\n                                />\n                            </RadioGroup>\n                        }\n                        secondaryTypographyProps={{ ['component' as any]: 'div' }}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch edge=\"end\" onChange={paidAreaChange} checked={stnTrans.paid_area} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, stnTrans.tick_direc, stnTrans.paid_area]\n    );\n};\n"],"sourceRoot":""}