{"version":3,"sources":["panels/stations/edit-diag/branch-tab.tsx"],"names":["StationEditBranchTab","props","t","useTranslation","style","margin","BranchSelectSet","stnId","direction","rmgStyle","useContext","CanvasContext","branchEntry","ParamContext","param","stn_list","branch","React","useMemo","BranchTypeItem","BranchFirstItem","BranchPosItem","dispatch","handleChange","event","branchType","target","value","type","select","width","variant","label","onChange","key","disabled","length","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","stnList","indexOf","branches","first","transform","map","formatStnName","toString","branchPos","right","left"],"mappings":"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","file":"static/js/panelStationsBranch.dd182f54.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { List, ListItem, ListItemText, Divider, Icon, TextField, MenuItem, ListItemIcon } from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { ParamContext, CanvasContext } from '../../../context';\n\ninterface StationEditBranchTabProps {\n    stnId: string;\n}\n\nfunction StationEditBranchTab(props: StationEditBranchTabProps) {\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction=\"left\" />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction=\"right\" />\n        </List>\n    );\n}\n\nexport default StationEditBranchTab;\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: 'left' | 'right';\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== 'shmetro' && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, props.direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: 'left' | 'right';\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let branchType = event.target.value as 'na' | 'through' | 'nonthrough';\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_TYPE',\n                stnId: props.stnId,\n                direction: props.direction,\n                branchType,\n            });\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <TextField\n                    select\n                    style={{ width: '100%' }}\n                    variant=\"outlined\"\n                    label={t('stations.edit.branch.type.title')}\n                    onChange={handleChange}\n                    value={branchEntry[0] || 'na'}\n                >\n                    <MenuItem key=\"na\" value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </MenuItem>\n                    <MenuItem key=\"through\" value=\"through\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </MenuItem>\n                    <MenuItem key=\"nonthrough\" value=\"nonthrough\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </MenuItem>\n                </TextField>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let branchFirst = event.target.value;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            let stnList = param.stn_list;\n            if (props.direction === 'right') {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_FIRST',\n                branches: [\n                    {\n                        stnId: props.stnId,\n                        direction: props.direction,\n                        first: branchFirst,\n                    },\n                    {\n                        stnId: branchEndId,\n                        direction: props.direction === 'left' ? 'right' : 'left',\n                        first: branchEndFirst,\n                    },\n                ],\n            });\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: props.direction === 'left' ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <TextField\n                    select\n                    style={{ width: '100%' }}\n                    variant=\"outlined\"\n                    label={t('stations.edit.branch.first')}\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                >\n                    {neighbours.map(stnId => (\n                        <MenuItem key={stnId} value={stnId}>\n                            {formatStnName(param.stn_list[stnId], rmgStyle)}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    // mount only if branchEntry[0] is not undefined\n\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction] as ['through' | 'nonthrough', string];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let branchPos: 0 | 1 = event.target.value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            let stnList = param.stn_list;\n            if (props.direction === 'right') {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    right: props.stnId,\n                    left: branchEndId,\n                });\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    left: props.stnId,\n                    right: branchEndId,\n                });\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <TextField\n                    select\n                    style={{ width: '100%' }}\n                    variant=\"outlined\"\n                    label={t('stations.edit.branch.pos.title')}\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                >\n                    <MenuItem key=\"upper\" value=\"upper\">\n                        {t('stations.edit.branch.pos.upper')}\n                    </MenuItem>\n                    <MenuItem key=\"lower\" value=\"lower\">\n                        {t('stations.edit.branch.pos.lower')}\n                    </MenuItem>\n                </TextField>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"sourceRoot":""}