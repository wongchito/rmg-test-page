{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","param","useContext","ParamContext","stnInfo","stn_list","stnId","branchNameDX","branch","left","right","length","name","split","direction","xlinkHref","transfer","info","reduce","acc","cur","stroke","stnState","transform","infos","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","x","sum","x1","x2","strokeWidth","intInfos","concat","textAnchor","StationName","ref","stnName","fill","osiInfos","forwardRef","others","useMemo","className","fontSize","map","txt","i","key","dy","IntBoxGroup","dx","isLineNumber","Boolean","match","el","IntBoxNumber","IntBoxLetter","memo","dominantBaseline","prevProps","nextProps","toString","textCount","height","y","OSIText","lineNames","join","MainSHMetro","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","includes","ys","branch_spacing","stnStates","getStnState","current_stn_idx","linePaths","drawLine","paths","stns","_linePath","id","svg_height","Line","pass","path","d","main","stnIds","type","prevY","prevX","e","forEach","hasOwnProperty","xm","ym","h","StationGroup","filter","RailMapSHMetro","DefsSHMetro","r","_objectWithoutProperties","source","excluded","target","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","stnList","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.f2164000.chunk.js","sourcesContent":["import React, { useContext, useRef, memo } from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'l' ? 1 : -1);\n\n    return (\n        <>\n            <use\n                xlinkHref={\n                    '#' + (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0) ? 'int2_sh' : 'stn_sh')\n                }\n                stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...props.name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g transform={`translate(${props.direction === 'l' ? 6 : -6},-6)rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (\n                <line\n                    x1={0}\n                    x2={props.direction === 'l' ? x : -x}\n                    stroke={props.stnState === -1 ? '#aaa' : 'black'}\n                    strokeWidth={0.5}\n                />\n            )}\n\n            <IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                transform={`translate(${x * (props.direction === 'l' ? 1 : -1)},-10.75)`}\n                direction={props.direction}\n            />\n\n            <g\n                textAnchor={props.direction === 'l' ? 'start' : 'end'}\n                transform={`translate(0,${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={props.name}\n                    fill={props.stnState === -1 ? '#aaa' : props.stnState === 0 ? 'red' : 'black'}\n                />\n\n                {props.infos[1]?.length && (\n                    <g\n                        transform={`translate(${\n                            (x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            (props.direction === 'l' ? 1 : -1)\n                        },-22)`}\n                    >\n                        <OSIText osiInfos={props.infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\">{stnName[0]}</text>\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n\n                if (props.direction === 'r' && i === 0) {\n                    dx -= isLineNumber ? 20 : info[4].length * 14 + 12 + 0;\n                }\n\n                const el = (\n                    <g transform={`translate(${dx},0)`} key={i}>\n                        {isLineNumber ? <IntBoxNumber info={info} /> : <IntBoxLetter info={info} />}\n                    </g>\n                );\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                if (props.direction === 'l') {\n                    dx += isLineNumber ? 25 : info[4].length * 14 + 12 + 5;\n                } else {\n                    dx -= isLineNumber ? 25 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\">{'换乘' + lineNames.join('，')}</text>\n                <text className=\"rmg-name__zh\" dy={10}>\n                    仅限公共交通卡\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...lineNames]\n    );\n};\n","import React, { useContext } from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: { main: string[]; pass: string[] } }) => {\n    return (\n        <>\n            <g>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} stroke=\"gray\" strokeWidth={12} fill=\"none\" d={path} />\n                ))}\n            </g>\n            <g>\n                {props.paths.main.map((path, i) => (\n                    <path key={i} fill=\"var(--rmg-theme-colour)\" d={path} />\n                ))}\n            </g>\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x},${y - 6} L ${x - e},${y - 6} l -12,12 L ${x},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} L ${x + e},${y - 6} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e},${y}`;\n            } else {\n                return `M ${x - e},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e},${y - 6} H ${h} l 0,12 L ${x - 42},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} H ${h + e} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e}`;\n            } else {\n                return `M ${x - e},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let h = path['end'][0];\n        // let [xb, yb] = path['bifurcate']\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x - e - 12} Z`;\n                } else {\n                    // main line, left direction, upper to center\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm} Z`;\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x} Z`;\n                } else {\n                    // main line, right direction, center to upper\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm + e},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm + e + 12} Z`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}