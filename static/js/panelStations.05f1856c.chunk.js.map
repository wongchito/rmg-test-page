{"version":3,"sources":["panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/chip-set.tsx","panels/stations/delete-diags.tsx","panels/stations/auto-num-diag.tsx","panels/stations/fabs.tsx","panels/stations/panel.tsx","panels/stations/index.ts"],"names":["getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","stnId","numsZH","split","numsEN","map","char","parseInt","join","StationAddDialog","React","memo","props","t","useTranslation","allLocs","centre","upper","lower","newupper","newlower","useState","prep","setPrep","tpo","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","stnList","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","console","log","p","Boolean","indexOf","handleClick","action","onClose","newId","includes","newInfo","name","num","services","branch","left","right","transfer","info","type","tick_direc","paid_area","osi_names","facility","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","lineend","addStation","paramUpdate","Dialog","open","DialogTitle","DialogContent","dividers","List","ListItem","ListItemIcon","Icon","TextField","select","style","width","variant","label","onChange","e","target","value","MenuItem","key","formatStnName","idx","disabled","display","DialogActions","Button","onClick","color","autoFocus","prevProps","nextProps","getDeps","reduce","acc","cur","k","o","a","c","NameTab","lazy","InterchangeTab","BranchTab","MoreTab","useStyles","makeStyles","theme","createStyles","tab","padding","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","useContext","ParamContext","param","dispatch","stnInfo","stn_list","tabIndex","setTabIndex","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","tabNav","Tabs","indicatorColor","textColor","_","val","scrollButtons","i","Tab","icon","className","interchangeUpdate","transInfo","updatedValue","inf","values","concat","Typography","component","role","Suspense","fallback","CircularProgress","stnTrans","onUpdate","Set","field","root","backgroundColor","palette","background","paper","borderRadius","boxShadow","shadows","rootSize","margin","rootSizeTablet","rootSizeMobile","stnChipText","textAlign","stnChipTextZH","fontSize","fontWeight","lineHeight","stnChipTextEN","whiteSpace","overflow","addChipLabel","stnChipLabel","StationChipSet","isTablet","isMobile","replace","Chip","window","urlParams","get","Avatar","onSelection","StationDeleteDialog","DialogContentText","i18nKey","StationDeleteErrorDialog","AutoNumDialog","branches","branch0","fab","position","spacing","bottom","StationFabs","fabEl","setFabEl","handleAction","onAction","Tooltip","title","aria-label","Fab","Menu","anchorEl","ListItemText","primary","PanelStations","stationSelected","setStationSelected","isSnackBarOpen","setIsSnackBarOpen","isAddDialogOpen","setIsAddDialogOpen","isEditDialogOpen","setIsEditDialogOpen","isDeleteDialogOpen","setIsDeleteDialogOpen","isDeleteErrDialogOpen","setIsDeleteErrDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","snackBarClose","addStationClick","Snackbar","r","autoHideDuration","message","Fragment","size","IconButton","reverse","tmpArr","id","reverseStations","index","servicesSet","selected","delete","chipId","add","isLastMainBranchStn","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","currentId","newCurrentId","filter","Panel"],"mappings":"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","file":"static/js/panelStations.05f1856c.chunk.js","sourcesContent":["import { getYShareMTR } from '../../methods';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: { [stnId: string]: StationInfo }\n) => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        num: '00',\n        services: ['local'],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: [],\n        },\n        transfer: {\n            info: [[]],\n            type: 'none',\n            tick_direc: 'r',\n            paid_area: true,\n            osi_names: [],\n        },\n        facility: '',\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList));\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = ['through', newId];\n            newStnList[end].branch.right = ['through', newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) != 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) != 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = ['through', newId];\n            newStnList[end].branch.left = ['through', newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [\n        newId,\n        {\n            ...newStnList,\n            [newId]: newInfo,\n        },\n    ];\n};\n\nfunction getRandomId() {\n    return Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n}\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = '癸甲乙丙丁戊己庚辛壬日月金木水火土竹戈十大中一弓人心手口尸廿山女田難卜重'.split('');\n    let numsEN = [\n        'Zero',\n        'One',\n        'Two',\n        'Three',\n        'Four',\n        'Five',\n        'Six',\n        'Seven',\n        'Eight',\n        'Nine',\n        'Alfa',\n        'Bravo',\n        'Charlie',\n        'Delta',\n        'Echo',\n        'Foxtrot',\n        'Golf',\n        'Hotel',\n        'India',\n        'Juliett',\n        'Kilo',\n        'Lima',\n        'Mike',\n        'November',\n        'Oscar',\n        'Papa',\n        'Quebec',\n        'Romeo',\n        'Sierra',\n        'Tango',\n        'Uniform',\n        'Victor',\n        'Whiskey',\n        'X-ray',\n        'Yankee',\n        'Zulu',\n    ];\n    return [\n        stnId\n            .split('')\n            .map(char => numsZH[parseInt(char, 36)])\n            .join(''),\n        stnId\n            .split('')\n            .map(char => numsEN[parseInt(char, 36)])\n            .join(' '),\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time.\n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: StationDict) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length === 2 && children.length === 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length === 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length === 2 || children.length === 2) {\n        console.log('this case');\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length === 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length === 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length === 2 && newStnList[children[0]].parents.length === 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        });\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n\nexport const reverseStations = (stnList: { [stnId: string]: StationInfo }) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList));\n    Object.keys(stnList).forEach(stnId => {\n        let stnInfo = { ...stnList[stnId] };\n        if (stnId === 'linestart') {\n            newStnList.lineend.parents = stnInfo.children.reverse();\n            newStnList.lineend.branch = {\n                left: stnInfo.branch.right,\n                right: [],\n            };\n        } else if (stnId === 'lineend') {\n            newStnList.linestart.children = stnInfo.parents.reverse();\n            newStnList.linestart.branch = {\n                left: [],\n                right: stnInfo.branch.left,\n            };\n        } else {\n            var tmpArr = stnInfo.children.reverse().map(id => {\n                switch (id) {\n                    case 'linestart':\n                        return 'lineend';\n                    case 'lineend':\n                        return 'linestart';\n                    default:\n                        return id;\n                }\n            });\n            newStnList[stnId].children = stnInfo.parents.reverse().map(id => {\n                switch (id) {\n                    case 'linestart':\n                        return 'lineend';\n                    case 'lineend':\n                        return 'linestart';\n                    default:\n                        return id;\n                }\n            });\n            newStnList[stnId].parents = tmpArr;\n            newStnList[stnId].branch.left = stnInfo.branch.right;\n            newStnList[stnId].branch.right = stnInfo.branch.left;\n        }\n    });\n    return newStnList;\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\ninterface StationAddDialogProps {\n    open: boolean;\n    stnList: {\n        [stnId: string]: StationInfo;\n    };\n    tpo: string[];\n    onClose: (action: 'close' | string) => void;\n    paramUpdate: (key: string, data: any) => void;\n}\n\nconst StationAddDialog = React.memo(\n    (props: StationAddDialogProps) => {\n        const { t } = useTranslation();\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(props.tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = React.useMemo(() => newStnPossibleLoc(prep, pivot, props.stnList), [\n            prep,\n            pivot,\n            props.stnList,\n        ]);\n        React.useEffect(() => {\n            console.log('new');\n            setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n            setEndList(newLocs[3]);\n        }, [newLocs.toString()]);\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        React.useEffect(() => {\n            setLoc(Object.keys(allLocs)[locOK.indexOf(true)]);\n        }, [locOK]);\n\n        // Hook for updating end selection when end list changed\n        React.useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        React.useEffect(() => {\n            if (!(pivot in props.stnList)) setPivot(props.tpo[0]);\n        }, [Object.keys(props.stnList).toString()]);\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    props.stnList\n                );\n                // let [newId, newInfo] = window.myLine.addStn(action[0] as 'before' | 'after', action[1], action[2], action[3]);\n\n                // this.props.paramUpdate('stn_list', getParams().stn_list);\n                props.paramUpdate('stn_list', res);\n\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.prep')}\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                            >\n                                <MenuItem key=\"before\" value=\"before\">\n                                    {t('stations.add.before')}\n                                </MenuItem>\n                                <MenuItem key=\"after\" value=\"after\">\n                                    {t('stations.add.after')}\n                                </MenuItem>\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.pivot')}\n                                onChange={e => setPivot(e.target.value)}\n                                value={pivot}\n                            >\n                                {props.tpo.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(props.stnList[stnId])}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.loc')}\n                                onChange={e => setLoc(e.target.value)}\n                                value={loc}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <MenuItem key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.end')}\n                                onChange={e => setEnd(e.target.value)}\n                                value={end}\n                            >\n                                {endList.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(props.stnList[stnId])}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.open !== nextProps.open) {\n            return false;\n        } else {\n            const getDeps = (stnList: { [stnId: string]: StationInfo }) =>\n                Object.keys(stnList).reduce(\n                    (acc, cur) =>\n                        acc +\n                        cur +\n                        ((...k: (keyof StationInfo)[]) => (o: StationInfo) =>\n                            k.reduce((a, c) => a + JSON.stringify(o[c]), ''))(\n                            'parents',\n                            'children',\n                            'name',\n                            'num'\n                        )(stnList[cur]),\n                    ''\n                );\n\n            return getDeps(prevProps.stnList) === getDeps(nextProps.stnList);\n        }\n    }\n);\n\nexport default StationAddDialog;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    onUpdate: (value: any, field: string, index?: number) => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnList = param.stn_list;\n    const stnInfo = stnList[props.stnId];\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    const interchangeUpdate = (transInfo: StationTransfer) => {\n        let updatedValue = {\n            ...transInfo,\n            info: transInfo.info.map(inf =>\n                inf.map(i =>\n                    Object.values(i).length === 0\n                        ? ((param.theme.concat(['轉綫', 'Line']) as unknown) as InterchangeInfo)\n                        : i\n                )\n            ),\n        };\n\n        // window.myLine.updateStnTransfer2(props.stnId, updatedValue);\n        dispatch({\n            type: 'UPDATE_STATION_TRANSFER',\n            stnId: props.stnId,\n            transfer: updatedValue,\n        });\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={fullScreen}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {tabNav}\n                <Typography component=\"div\" role=\"tabpanel\">\n                    <React.Suspense fallback={<CircularProgress />}>\n                        {(idx => {\n                            switch (idx) {\n                                case 0:\n                                    return <NameTab stnId={props.stnId} />;\n                                case 1:\n                                    return (\n                                        <InterchangeTab\n                                            stnTrans={stnInfo.transfer}\n                                            onUpdate={interchangeUpdate}\n                                            stnId={props.stnId}\n                                        />\n                                    );\n                                case 2:\n                                    return <BranchTab stnId={props.stnId} />;\n                                case 3:\n                                    return (\n                                        <MoreTab\n                                            facility={stnInfo.facility}\n                                            services={new Set(stnInfo.services)}\n                                            onUpdate={(value, field) => props.onUpdate(value, field)}\n                                            stnId={props.stnId}\n                                        />\n                                    );\n                            }\n                        })(tabIndex)}\n                    </React.Suspense>\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import Dialog from './dialog';\n\nexport default Dialog;","import React from 'react';\nimport { Chip, makeStyles, Avatar, createStyles, useMediaQuery } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => {\n    return createStyles({\n        root: {\n            backgroundColor: theme.palette.background.paper,\n            height: 55,\n            borderRadius: 8,\n            boxShadow: theme.shadows[1],\n        },\n        rootSize: {\n            margin: 8,\n            width: 'calc((100% - 96px) / 6)',\n        },\n        rootSizeTablet: {\n            margin: 6,\n            width: 'calc((100% - 48px) / 4)',\n        },\n        rootSizeMobile: {\n            margin: 6,\n            width: 'calc((100% - 24px) / 2)',\n        },\n        stnChipText: {\n            display: 'block',\n            textAlign: 'center',\n        },\n        stnChipTextZH: {\n            fontSize: 18,\n            fontWeight: 500,\n            lineHeight: '1.2rem',\n        },\n        stnChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre',\n            overflow: 'hidden',\n        },\n        addChipLabel: {\n            fontWeight: 500,\n            fontSize: '1rem',\n            lineHeight: '1.2rem',\n            textAlign: 'center',\n            width: '100%',\n        },\n        stnChipLabel: {\n            width: '100%',\n        },\n    });\n});\n\ninterface StationChipSetProps {\n    stnList: {\n        [stnId: string]: StationInfo;\n    };\n    tpo: string[];\n    onSelection: (stnId: string) => () => void;\n    addStationClick: () => void;\n}\n\nconst StationChipSet = React.memo(\n    (props: StationChipSetProps) => {\n        const isTablet = useMediaQuery('(max-width: 839px) and (min-width: 480px)');\n        const isMobile = useMediaQuery('(max-width: 480px)');\n        const classes = useStyles();\n\n        return (\n            <div>\n                {props.tpo.map((stnId, i) => {\n                    let label = (\n                        <span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextZH}`}>\n                                {props.stnList[stnId]?.name[0] || ''}\n                            </span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextEN}`}>\n                                {props.stnList[stnId]?.name[1].replace('\\\\', '\\r\\n') || ''}\n                            </span>\n                        </span>\n                    );\n                    return (\n                        <Chip\n                            key={stnId}\n                            icon={\n                                window.urlParams.get('style') !== 'gzmtr' ? (\n                                    <></>\n                                ) : (\n                                    <Avatar style={{ backgroundColor: 'unset' }}>\n                                        {props.stnList[stnId]?.num || '00'}\n                                    </Avatar>\n                                )\n                            }\n                            label={label}\n                            onClick={props.onSelection(stnId)}\n                            classes={{ label: classes.stnChipLabel }}\n                            className={`${classes.root} ${\n                                isMobile ? classes.rootSizeMobile : isTablet ? classes.rootSizeTablet : classes.rootSize\n                            }`}\n                        />\n                    );\n                })}\n            </div>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.tpo.toString() !== nextProps.tpo.toString()) {\n            return false;\n        } else {\n            const getDeps = (stnList: { [stnId: string]: StationInfo }) =>\n                Object.keys(stnList).reduce(\n                    (acc, cur) =>\n                        acc +\n                        cur +\n                        ((...k: (keyof StationInfo)[]) => (o: StationInfo) =>\n                            k.reduce((a, c) => a + JSON.stringify(o[c]), ''))(\n                            'name',\n                            'num'\n                        )(stnList[cur]),\n                    ''\n                );\n\n            return getDeps(prevProps.stnList) === getDeps(nextProps.stnList);\n        }\n    }\n);\n\nexport default StationChipSet;\n","import * as React from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { StationInfo } from '../../types';\n\ninterface StationDeleteDialogProps {\n    open: boolean;\n    stnInfo: StationInfo;\n    onClose: (action: string) => void;\n}\n\nexport function StationDeleteDialog(props: StationDeleteDialogProps) {\n    const { t } = useTranslation();\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <Trans i18nKey=\"stations.remove.msg\">\n                        {{ name: props.stnInfo.name.join() }}\n                    </Trans>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => props.onClose('close')} color=\"primary\" autoFocus>\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={() => props.onClose('accept')} color=\"primary\">\n                    {t('stations.remove.button')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\ninterface StationDeleteErrorDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport function StationDeleteErrorDialog(props: StationDeleteErrorDialogProps) {\n    const { t } = useTranslation();\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {t('stations.remove.error.msg')}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                    {t('dialog.ok')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n\n    const { dispatch, branches } = React.useContext(ParamContext);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch({ type: 'UPDATE_STATION_NUM', stnId, num });\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Fab, Tooltip, Icon, Menu, MenuItem, createStyles, makeStyles, ListItemText, ListItemIcon } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => (\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        }\n    })\n))\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo((props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n    const handleAction = (action: string) => () => {\n        setFabEl(null);\n        props.onAction(action);\n    }\n\n    return (\n        <>\n            <Tooltip title={t('stations.fabs.tooltip')} aria-label=\"options\">\n                <Fab color=\"primary\" className={classes.fab}\n                    onClick={(e) => setFabEl(e.target as HTMLElement)}>\n                    <Icon>more_vert</Icon>\n                </Fab>\n            </Tooltip>\n\n\n            <Menu\n                anchorEl={fabEl}\n                open={Boolean(fabEl)}\n                onClose={() => setFabEl(null)}>\n                <MenuItem onClick={handleAction('add')}>\n                    <ListItemIcon>\n                        <Icon>add_box</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.fabs.add')} />\n                </MenuItem>\n                <MenuItem onClick={handleAction('reverse')}>\n                    <ListItemIcon>\n                        <Icon>cached</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.fabs.reverse')} />\n                </MenuItem>\n                {window.urlParams.get('style')==='gzmtr' && <MenuItem onClick={handleAction('autonum')}>\n                    <ListItemIcon>\n                        <Icon>filter_1</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.autoNum.button')} />\n                </MenuItem>}\n            </Menu>\n        </>\n    )\n}, () => true)\n\nexport default StationFabs;","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nimport { Snackbar, Button, IconButton, Icon } from '@material-ui/core';\n\nimport { formatStnName } from '../../utils';\n\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationChipSet from './chip-set';\nimport { StationDeleteDialog, StationDeleteErrorDialog } from './delete-diags';\nimport AutoNumDialog from './auto-num-diag';\nimport StationFabs from './fabs';\nimport { removeStation, reverseStations } from './utils';\n\ninterface PanelStationsProps {\n    theme: [string, string, string, '#000' | '#fff'];\n    stnList: { [stnId: string]: StationInfo };\n    paramUpdate: (key: string, data: any) => void;\n    currentId: string;\n    tpo: string[];\n}\n\nconst PanelStations = (props: PanelStationsProps) => {\n    const { t } = useTranslation();\n\n    const [stationSelected, setStationSelected] = useState('');\n    const [isSnackBarOpen, setIsSnackBarOpen] = useState(false);\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const [isDeleteErrDialogOpen, setIsDeleteErrDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const stnChipSetSelection = (stnId: string) => () => {\n        setStationSelected(stnId);\n        setIsSnackBarOpen(true);\n    };\n\n    const snackBarClose = (action: string) => {\n        if (action === 'clickaway') return;\n        setIsSnackBarOpen(false);\n        if (action === 'current') {\n            props.paramUpdate('current_stn_idx', stationSelected);\n        } else if (action === 'edit') {\n            setIsEditDialogOpen(true);\n        } else if (action === 'delete') {\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        if (action === 'close') {\n            setIsAddDialogOpen(false);\n        } else {\n            setIsAddDialogOpen(false);\n            setStationSelected(action);\n            setIsEditDialogOpen(true);\n        }\n    };\n\n    const stnEditDialogUpdate = (value: any, field: string, index?: number) => {\n        let stnId = stationSelected;\n        if (field === 'facility') {\n            props.paramUpdate('stn_list', {\n                ...props.stnList,\n                [stnId]: {\n                    ...props.stnList[stnId],\n                    facility: value,\n                },\n            });\n        }\n        if (field === 'services') {\n            // window.myLine.updateStnServices(stnId, value);\n            let servicesSet = new Set(props.stnList[stnId].services);\n            if (value.selected === false) {\n                servicesSet.delete(value.chipId);\n            } else {\n                servicesSet.add(value.chipId);\n            }\n            props.paramUpdate('stn_list', {\n                ...props.stnList,\n                [stnId]: {\n                    ...props.stnList[stnId],\n                    services: [...servicesSet],\n                },\n            });\n        }\n    };\n\n    const stnDeleteClose = (action: string) => {\n        let stnId = stationSelected;\n        setIsDeleteDialogOpen(false);\n        if (action === 'accept') {\n            let res = removeStation(stnId, props.stnList);\n            if (res === false) {\n                setIsDeleteErrDialogOpen(true);\n            } else {\n                if (props.currentId === stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    props.paramUpdate('current_stn_idx', newCurrentId);\n                }\n                props.paramUpdate('stn_list', res);\n            }\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            let newStnList = reverseStations(props.stnList);\n            props.paramUpdate('stn_list', newStnList);\n            // console.log(newStnList);\n            // setParams('stn_list', newStnList);\n            // location.reload(true);\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <StationChipSet\n                stnList={props.stnList}\n                tpo={props.tpo}\n                onSelection={stnChipSetSelection}\n                addStationClick={() => setIsAddDialogOpen(true)}\n            />\n            <Snackbar\n                open={isSnackBarOpen}\n                onClose={(e, r) => snackBarClose(r)}\n                autoHideDuration={5000}\n                message={formatStnName(props.stnList[stationSelected])}\n                action={\n                    <React.Fragment>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('current')}>\n                            {t('stations.current')}\n                        </Button>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('edit')}>\n                            {t('stations.edit.button')}\n                        </Button>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('delete')}>\n                            {t('stations.remove.button')}\n                        </Button>\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            onClick={() => snackBarClose('close')}\n                        >\n                            <Icon fontSize=\"small\">close</Icon>\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog\n                open={isAddDialogOpen}\n                stnList={props.stnList}\n                tpo={props.tpo}\n                onClose={stnAddDialogClose}\n                paramUpdate={props.paramUpdate}\n            />\n            <StationEditDialog\n                open={isEditDialogOpen}\n                onClose={() => setIsEditDialogOpen(false)}\n                onUpdate={stnEditDialogUpdate}\n                stnId={stationSelected}\n            />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={stnDeleteClose}\n                stnInfo={props.stnList[stationSelected] || props.stnList['linestart']}\n            />\n            <StationDeleteErrorDialog open={isDeleteErrDialogOpen} onClose={() => setIsDeleteErrDialogOpen(false)} />\n            {window.urlParams.get('style') === 'gzmtr' && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </div>\n    );\n};\n\nexport default PanelStations;\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}