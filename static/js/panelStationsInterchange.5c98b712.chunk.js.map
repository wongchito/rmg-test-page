{"version":3,"sources":["panels/colour-diag/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/stations/edit-diag/name-list-items.tsx","panels/colour-diag/data.ts","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/stations/edit-diag/interchange-tab.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useStyles","makeStyles","createStyles","listItemIcon","width","fontSize","textAlign","NameListItems","props","t","useTranslation","classes","React","className","style","variant","label","onChange","onUpdate","value","name","helperText","toString","cityList","country","en","zh","ga","pt","ko","ja","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","minWidth","marginRight","border","inputColour","position","left","top","buttonContainer","flexShrink","memo","i18n","useState","theme","hexTemp","setHexTemp","lineList","list","setList","listPromise","default","useEffect","data","l","i","colour","fg","useLineList","length","filter","newTheme","ListItem","ListItemIcon","Icon","TextField","select","event","val","idx","target","c","MenuItem","key","CountryFlag","getTransText2","languages","line","backgroundColor","color","type","rgb","htmlFor","Tooltip","title","aria-label","Button","borderColor","component","error","match","hex","toUpperCase","prevProps","nextProps","useEmojiStyles","img","codePoints","split","char","codePointAt","splice","includes","language","navigator","platform","indexOf","src","join","String","fromCodePoint","cp","parseInt","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","paddingTop","inputBaseInputEN","paddingBottom","ColourDialog","nameChange","index","newName","lineName","handleClose","onClose","Dialog","open","DialogTitle","DialogContent","dividers","List","Paper","InputBase","root","input","autoFocus","DialogActions","onClick","StationEditInterchangeTab","useContext","ParamContext","param","dispatch","osiNameDialogOpened","setOsiNameDialogOpened","addClick","changeType","ns","stnTrans","info","inf","console","log","transInfo","osi_names","concat","Array","deleteClick","slice","margin","InterchangeChipSet","stnId","setIndex","onDelete","window","urlParams","get","lineHeight","whiteSpace","OSINameDialog","osiName","InterchangeMore","intChipSetStyles","intChip","intChipText","intChipTextZH","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","intInfos","stn_list","transfer","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","deleteIcon","setIdx","intIdx","newOSIName","tickDirecChange","_event","direction","paidAreaChange","checked","isPaid","useMemo","primary","secondary","row","tick_direc","control","labelPlacement","secondaryTypographyProps","edge","paid_area"],"mappings":"oHAAA,IAAIA,EAAM,CACT,YAAa,CACZ,IACA,GAED,eAAgB,CACf,IACA,GAED,YAAa,CACZ,IACA,GAED,eAAgB,CACf,IACA,GAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,WAAY,CACX,IACA,GAED,cAAe,CACd,IACA,GAED,YAAa,CACZ,IACA,GAED,eAAgB,CACf,IACA,GAED,cAAe,CACd,IACA,GAED,iBAAkB,CACjB,IACA,GAED,aAAc,CACb,IACA,GAED,gBAAiB,CAChB,IACA,GAED,cAAe,CACd,IACA,GAED,iBAAkB,CACjB,IACA,GAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAA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","file":"static/js/panelStationsInterchange.5c98b712.chunk.js","sourcesContent":["var map = {\n\t\"./beijing\": [\n\t\t155,\n\t\t3\n\t],\n\t\"./beijing.ts\": [\n\t\t155,\n\t\t3\n\t],\n\t\"./chengdu\": [\n\t\t156,\n\t\t9\n\t],\n\t\"./chengdu.ts\": [\n\t\t156,\n\t\t9\n\t],\n\t\"./chongqing\": [\n\t\t157,\n\t\t20\n\t],\n\t\"./chongqing.ts\": [\n\t\t157,\n\t\t20\n\t],\n\t\"./dongguan\": [\n\t\t158,\n\t\t23\n\t],\n\t\"./dongguan.ts\": [\n\t\t158,\n\t\t23\n\t],\n\t\"./edinburgh\": [\n\t\t159,\n\t\t24\n\t],\n\t\"./edinburgh.ts\": [\n\t\t159,\n\t\t24\n\t],\n\t\"./foshan\": [\n\t\t160,\n\t\t4\n\t],\n\t\"./foshan.ts\": [\n\t\t160,\n\t\t4\n\t],\n\t\"./glasgow\": [\n\t\t161,\n\t\t5\n\t],\n\t\"./glasgow.ts\": [\n\t\t161,\n\t\t5\n\t],\n\t\"./guangzhou\": [\n\t\t162,\n\t\t6\n\t],\n\t\"./guangzhou.ts\": [\n\t\t162,\n\t\t6\n\t],\n\t\"./hongkong\": [\n\t\t163,\n\t\t7\n\t],\n\t\"./hongkong.ts\": [\n\t\t163,\n\t\t7\n\t],\n\t\"./kaohsiung\": [\n\t\t164,\n\t\t8\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t164,\n\t\t8\n\t],\n\t\"./london\": [\n\t\t165,\n\t\t10\n\t],\n\t\"./london.ts\": [\n\t\t165,\n\t\t10\n\t],\n\t\"./macau\": [\n\t\t166,\n\t\t11\n\t],\n\t\"./macau.ts\": [\n\t\t166,\n\t\t11\n\t],\n\t\"./newtaipei\": [\n\t\t167,\n\t\t12\n\t],\n\t\"./newtaipei.ts\": [\n\t\t167,\n\t\t12\n\t],\n\t\"./other\": [\n\t\t168,\n\t\t13\n\t],\n\t\"./other.ts\": [\n\t\t168,\n\t\t13\n\t],\n\t\"./sanfrancisco\": [\n\t\t169,\n\t\t14\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t169,\n\t\t14\n\t],\n\t\"./seoul\": [\n\t\t170,\n\t\t15\n\t],\n\t\"./seoul.ts\": [\n\t\t170,\n\t\t15\n\t],\n\t\"./shanghai\": [\n\t\t171,\n\t\t16\n\t],\n\t\"./shanghai.ts\": [\n\t\t171,\n\t\t16\n\t],\n\t\"./shenzhen\": [\n\t\t172,\n\t\t17\n\t],\n\t\"./shenzhen.ts\": [\n\t\t172,\n\t\t17\n\t],\n\t\"./taipei\": [\n\t\t173,\n\t\t18\n\t],\n\t\"./taipei.ts\": [\n\t\t173,\n\t\t18\n\t],\n\t\"./tokyo\": [\n\t\t174,\n\t\t19\n\t],\n\t\"./tokyo.ts\": [\n\t\t174,\n\t\t19\n\t],\n\t\"./toronto\": [\n\t\t175,\n\t\t21\n\t],\n\t\"./toronto.ts\": [\n\t\t175,\n\t\t21\n\t],\n\t\"./xi'an\": [\n\t\t176,\n\t\t22\n\t],\n\t\"./xi'an.ts\": [\n\t\t176,\n\t\t22\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 183;\nmodule.exports = webpackAsyncContext;","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../types';\n\nconst useStyles = makeStyles(() => (\n    createStyles({\n        listItemIcon: {\n            width: '1em', \n            fontSize: '1.5rem', \n            textAlign: 'center',\n        }\n    })\n));\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(() => (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <span className={classes.listItemIcon}>漢</span>\n                </ListItemIcon>\n                <TextField \n                    style={{width: '100%'}}\n                    variant=\"outlined\"\n                    label={t('stations.edit.name.nameZH')}\n                    onChange={props.onUpdate(0)}\n                    value={props.name[0]} />\n            </ListItem>\n            <ListItem>\n                <ListItemIcon>\n                    <span className={classes.listItemIcon}>A</span>\n                </ListItemIcon>\n                <TextField \n                    style={{width: '100%'}}\n                    variant=\"outlined\"\n                    label={t('stations.edit.name.nameEN')}\n                    onChange={props.onUpdate(1)}\n                    value={props.name[1]}\n                    helperText={t('stations.edit.name.nameENHelper')} />\n            </ListItem>\n        </>\n    ), [props.name.toString()]);\n};\n\nexport default NameListItems;","export const cityList: CityEntry[] = [\n    {\n        id: 'beijing',\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: 'chengdu',\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: 'chongqing',\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: 'dongguan',\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: 'edinburgh',\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: 'foshan',\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: 'glasgow',\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: 'guangzhou',\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: 'hongkong',\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: 'kaohsiung',\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: 'london',\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: 'macau',\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: 'newtaipei',\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: 'sanfrancisco',\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: 'seoul',\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: 'shanghai',\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: 'shenzhen',\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: 'taipei',\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            'zh-Hans': '台北',\n            'zh-Hant': '臺北',\n        },\n    },\n    {\n        id: 'tokyo',\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: 'toronto',\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: 'xian',\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: 'other',\n        country: 'UN',\n        name: {\n            en: 'Customise (Beta)',\n            'zh-Hans': '自定义 (Beta)',\n            'zh-Hant': '自訂 (Beta)',\n        },\n    },\n];\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    Button,\n    makeStyles,\n    createStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { cityList } from './data';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 28,\n            width: 28,\n            minWidth: 0,\n            marginRight: 8,\n            border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as LineEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `./colours/${theme[0]}`).then(\n              module => module.default as LineEntry[]\n          )\n        : Promise.resolve([] as LineEntry[]);\n\n    // const listPromise = React.useMemo(() => {\n    //     if (!theme[0]) return;\n    //     console.log('fetching line list: ' + theme[0]);\n    //     return fetch(`data/${theme[0]}.json`).then(response => response.json() as Promise<LineEntry[]>);\n    // }, [theme[0]]);\n\n    React.useEffect(() => {\n        if (typeof theme[0] === 'undefined') {\n            return;\n        } else if (theme[0] === 'other') {\n            // mutate original list\n            listPromise.then(data => {\n                setList(data.map((l, i) => (i === 0 ? { ...l, colour: theme[2], fg: theme[3] || '#fff' } : { ...l })));\n            });\n        } else {\n            listPromise.then(data => setList(data));\n        }\n    }, [theme.toString()]);\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: [string, string, string, '#000' | '#fff'];\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport default React.memo(\n    function ThemeItems(props: ColourDialogProps) {\n        // console.log('rerender');\n        const classes = useStyles();\n        const { t, i18n } = useTranslation();\n\n        const [hexTemp, setHexTemp] = React.useState(props.theme[2]);\n\n        const cityChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = props.theme.map((val, idx) => (idx === 0 ? event.target.value : val));\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for fetching line list of current city\n        const lineList = useLineList(props.theme);\n\n        // Hook for updating props.theme when lineList changed\n        React.useEffect(() => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let newTheme = [props.theme[0], lineList[0].id, lineList[0].colour, lineList[0].fg || '#fff'];\n            props.onUpdate('theme', newTheme);\n        }, [lineList]);\n\n        const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let line = event.target.value;\n            let newTheme = [\n                props.theme[0],\n                line,\n                lineList.filter(l => l.id === line)[0].colour,\n                lineList.filter(l => l.id === line)[0].fg || '#fff',\n            ];\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for updating hexTemp when props.hex changed\n        // which means valid hex has been updated to props\n        React.useEffect(() => {\n            setHexTemp(props.theme[2]);\n        }, [props.theme[2]]);\n\n        const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let rgb = event.target.value;\n            setHexTemp(rgb);\n\n            if (props.theme[0] !== 'other') {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = ['other', props.theme[1], rgb, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? rgb : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            }\n        };\n\n        const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let hex = event.target.value;\n            if (hex.match(/^#[0-9a-fA-f]{0,6}$/) === null) return;\n            setHexTemp(hex);\n\n            if (props.theme[0] !== 'other') {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify theme city and props.hex\n                    let newTheme = ['other', props.theme[1], hex, props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                } else {\n                    // if hex not valid, modify theme city only\n                    let newTheme = ['other', props.theme[1], props.theme[2], props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                }\n            } else {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify props.hex\n                    let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (actually only hex is changed)\n                } else {\n                    // if hex not valid, do nothing\n                }\n            }\n        };\n\n        const fgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = ['other', 'other', props.theme[2], event.target.value];\n            props.onUpdate('theme', newTheme);\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>location_city</Icon>\n                    </ListItemIcon>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.city')}\n                        onChange={cityChange}\n                        value={props.theme[0]}\n                    >\n                        {cityList.map(c => (\n                            <MenuItem key={c.id} value={c.id}>\n                                <span className={classes.cityItem}>\n                                    <CountryFlag code={c.country} />\n                                    <span>{getTransText2(c.name, i18n.languages)}</span>\n                                </span>\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>subway</Icon>\n                    </ListItemIcon>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.line')}\n                        onChange={lineChange}\n                        value={props.theme[1]}\n                    >\n                        {lineList.map(l => (\n                            <MenuItem key={l.id} value={l.id}>\n                                <span\n                                    className={classes.menuItemSpan}\n                                    style={{\n                                        backgroundColor: l.colour,\n                                        color: l.fg || '#fff',\n                                    }}\n                                >\n                                    {getTransText2(l.name, i18n.languages)}\n                                </span>\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </ListItem>\n                <ListItem>\n                    <div className={classes.buttonContainer}>\n                        <input\n                            type=\"color\"\n                            id=\"input-color\"\n                            value={props.theme[2]}\n                            onChange={colourChange}\n                            className={classes.inputColour}\n                        />\n                        <label htmlFor=\"input-color\">\n                            <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                                <Button\n                                    className={classes.button}\n                                    style={{\n                                        backgroundColor: props.theme[2],\n                                        borderColor: props.theme[3] || '#fff',\n                                    }}\n                                    variant=\"contained\"\n                                    component=\"span\"\n                                >\n                                    {' '}\n                                </Button>\n                            </Tooltip>\n                        </label>\n                    </div>\n                    <TextField\n                        error={!hexTemp?.match(/^#[0-9a-fA-f]{6}$/g)}\n                        style={{ width: '100%', marginRight: 5 }}\n                        variant=\"outlined\"\n                        label={t('colour.colour')}\n                        onChange={hexChange}\n                        value={hexTemp?.toUpperCase()}\n                    ></TextField>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.fg')}\n                        onChange={fgChange}\n                        value={props.theme[3] || '#fff'}\n                    >\n                        <MenuItem key=\"#fff\" value=\"#fff\">\n                            {t('colour.fgWhite')}\n                        </MenuItem>\n                        <MenuItem key=\"#000\" value=\"#000\">\n                            {t('colour.fgBlack')}\n                        </MenuItem>\n                    </TextField>\n                </ListItem>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\ninterface CountryFlagProps {\n    code: string;\n}\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: CountryFlagProps) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4', 'E007F'];\n        codePoints.splice(\n            1,\n            0,\n            ...props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase())\n        );\n    }\n\n    if (['zh-CN', 'zh-Hans'].includes(i18n.language) && props.code === 'TW') codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img src={`./images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n    ) : (\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    Paper,\n    Icon,\n    InputBase,\n    makeStyles,\n    DialogActions,\n    Button,\n    createStyles,\n} from '@material-ui/core';\n\nimport ThemeListItems from './theme-items';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        paperRoot: {\n            width: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n    })\n);\n\ninterface ColourDialogProps {\n    open: boolean;\n    theme: [string, string, string, '#000' | '#fff'];\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst ColourDialog = React.memo(\n    (props: ColourDialogProps) => {\n        const classes = useStyles();\n        const { t } = useTranslation();\n\n        const nameChange = (value: string, index: number) => {\n            let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n            props.onUpdate('name', newName);\n            // props.onUpdate('all', [...props.theme, ...newName]);\n        };\n\n        const themeChange = (key: string, value: any) => {\n            props.onUpdate('all', [...value, props.lineName[0], props.lineName[1]]);\n        };\n\n        const handleClose = () => {\n            props.onClose();\n        };\n\n        return (\n            <Dialog onClose={handleClose} open={props.open}>\n                <DialogTitle>{t('colour.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem className={classes.listItemPaper}>\n                            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                                <Icon className={classes.iconRoot}>edit</Icon>\n                                <InputBase\n                                    value={props.lineName[0]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputZH,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 0)}\n                                    autoFocus\n                                />\n                                <InputBase\n                                    value={props.lineName[1]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputEN,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 1)}\n                                />\n                            </Paper>\n                        </ListItem>\n                        <ThemeListItems theme={props.theme} onUpdate={props.onUpdate} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.open === nextProps.open &&\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nexport default ColourDialog;\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    Divider,\n    Button,\n    ListItemIcon,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    Switch,\n    Chip,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tooltip,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\n\ninterface StationEditInterchangeTabProps {\n    stnTrans: StationTransfer;\n    stnId: string;\n    onUpdate: (trans: StationTransfer) => void;\n}\n\nconst StationEditInterchangeTab = (props: StationEditInterchangeTabProps) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    const [osiNameDialogOpened, setOsiNameDialogOpened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] += 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n        if (props.stnTrans.info.length === 1 && index === 1) {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.concat([[Array(6) as InterchangeInfo]]),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        } else {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.map((inf, idx) =>\n                    idx === index ? inf.concat([Array(6) as InterchangeInfo]) : inf\n                ),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        }\n    };\n\n    const deleteClick = (index: number, i: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] -= 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n\n        let transInfo = {\n            ...props.stnTrans,\n            type: changeType as any,\n            osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n            info: props.stnTrans.info.map((inf, idx) =>\n                idx === index ? inf.slice(0, i).concat(inf.slice(i + 1)) : inf\n            ),\n        };\n        console.log(transInfo);\n        props.onUpdate(transInfo);\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={props.stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n            {['mtr', 'shmetro'].includes(window.urlParams.get('style') || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                onClick={() => setOsiNameDialogOpened(true)}\n                            >\n                                {props.stnTrans.osi_names[0]\n                                    ? props.stnTrans.osi_names[0].join('\\r\\n')\n                                    : '車站名\\r\\nStn Name'}\n                            </Button>\n                            <OSINameDialog\n                                open={osiNameDialogOpened}\n                                osiName={props.stnTrans.osi_names[0] || ['', '']}\n                                stnId={props.stnId}\n                                onClose={() => setOsiNameDialogOpened(false)}\n                            />\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={props.stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                    <ListItem>\n                        <span>{t('stations.edit.interchange.note')}</span>\n                    </ListItem>\n                </>\n            )}\n            {window.urlParams.get('style') === 'mtr' && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const classes = intChipSetStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const intInfos = param.stn_list[props.stnId].transfer.info[props.setIndex];\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: ([...(value as string[]), , ,] as any) as InterchangeInfo,\n            });\n        }\n        if (key === 'name') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: ([, , , , value[0], value[1]] as any) as InterchangeInfo,\n            });\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => props.onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    chipSelected === -1\n                        ? (([] as any) as [string, string, string, '#000' | '#fff'])\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as '#fff' | '#000',\n                          ]\n                }\n                lineName={\n                    chipSelected === -1 ? (([] as any) as Name) : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    osiName: Name;\n    onClose: () => void;\n}\n\nconst OSINameDialog = React.memo(\n    (props: OSINameDialogProps) => {\n        const { t } = useTranslation();\n\n        const { dispatch } = React.useContext(ParamContext);\n\n        const handleUpdate = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = props.osiName.map((val, i) => (i === index ? event.target.value : val)) as Name;\n            dispatch({ type: 'UPDATE_STATION_OSI_NAME', stnId: props.stnId, name: newOSIName });\n        };\n\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <NameListItems onUpdate={handleUpdate} name={props.osiName} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.open !== nextProps.open) {\n            return false;\n        } else {\n            return prevProps.osiName.toString() === nextProps.osiName.toString();\n        }\n    }\n);\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnTrans = param.stn_list[props.stnId].transfer;\n\n    const tickDirecChange = (_event: React.ChangeEvent<HTMLInputElement>, value: string) => {\n        if (value === 'l' || value === 'r')\n            dispatch({\n                type: 'UPDATE_STATION_TICK_DIREC',\n                stnId: props.stnId,\n                direction: value,\n            });\n    };\n\n    const paidAreaChange = (_event: React.ChangeEvent<{}>, checked: boolean) =>\n        dispatch({\n            type: 'UPDATE_STATION_PAID_AREA',\n            stnId: props.stnId,\n            isPaid: checked,\n        });\n\n    return React.useMemo(\n        () => (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={t('stations.edit.interchange.tickDirec.label')}\n                        secondary={\n                            <RadioGroup name=\"tick_direc\" row value={stnTrans.tick_direc} onChange={tickDirecChange}>\n                                <FormControlLabel\n                                    value=\"l\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.l')}\n                                    labelPlacement=\"end\"\n                                />\n                                <FormControlLabel\n                                    value=\"r\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.r')}\n                                    labelPlacement=\"end\"\n                                />\n                            </RadioGroup>\n                        }\n                        secondaryTypographyProps={{ ['component' as any]: 'div' }}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch edge=\"end\" onChange={paidAreaChange} checked={stnTrans.paid_area} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        ),\n        [props.stnId, stnTrans.tick_direc, stnTrans.paid_area]\n    );\n};\n"],"sourceRoot":""}