{"version":3,"sources":["panels/stations/edit-diag/more-tab.tsx"],"names":["memo","props","rmgStyle","useContext","CanvasContext","FacilityLi","stnId","ServiceLi","t","useTranslation","ParamContext","param","dispatch","primary","native","value","stn_list","facility","onChange","e","type","target","map","f","key","services","Set","secondary","row","s","control","checked","has","service","event","serviceId","isChecked","disabled","label","secondaryTypographyProps"],"mappings":"wLAgBeA,0BAAK,SAAiBC,GAA2B,IACpDC,EAAaC,qBAAWC,KAAxBF,SAER,OACI,6BACI,kBAAC,OAAD,KACkB,QAAbA,GAAsB,kBAACG,EAAD,CAAYC,MAAOL,EAAMK,QAClC,UAAbJ,GAAwB,kBAACK,EAAD,CAAWD,MAAOL,EAAMK,aAMjE,IAAMD,EAAa,SAACJ,GAA8B,IACtCO,EAAMC,2BAAND,EADqC,EAEjBL,qBAAWO,KAA/BC,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,SACf,OACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,eAEJ,kBAAC,eAAD,CAAcC,QAASL,EAAE,wCACzB,kBAAC,0BAAD,KACI,kBAAC,SAAD,CACIM,QAAM,EACNC,MAAOJ,EAAMK,SAASf,EAAMK,OAAOW,SACnCC,SAAU,SAAAC,GAAC,OACPP,EAAS,CACLQ,KAAM,0BACNd,MAAOL,EAAMK,MACbW,SAAUE,EAAEE,OAAON,UAIzB,CAAC,GAAI,UAAW,MAAO,UAA2BO,KAAI,SAAAC,GAAC,OACrD,4BAAQC,IAAKD,EAAGR,MAAOQ,GAClBf,EAAE,gCAAwC,KAANe,EAAW,OAASA,YAS/EhB,EAAY,SAACN,GAA8B,IACrCO,EAAMC,2BAAND,EADoC,EAEhBL,qBAAWO,KAA/BC,EAFoC,EAEpCA,MAAOC,EAF6B,EAE7BA,SACTa,EAAW,IAAIC,IAAIf,EAAMK,SAASf,EAAMK,OAAOmB,UAWrD,OACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,eAEJ,kBAAC,eAAD,CACIZ,QAASL,EAAE,sCACXmB,UACI,kBAAC,YAAD,CAAWC,KAAG,GACR,CAAC,QAAS,WAA0BN,KAAI,SAAAO,GAAC,OACvC,kBAAC,mBAAD,CACIC,QACI,kBAAC,WAAD,CACIC,QAASN,EAASO,IAAIH,GACtBd,MAAOc,EACPX,UAxBde,EAwBqCJ,EAxBf,SAACK,GACzB,UAAZD,GACJrB,EAAS,CACLQ,KAAM,0BACNd,MAAOL,EAAMK,MACb6B,UAAWF,EACXG,UAAWF,EAAMb,OAAOU,YAmBIM,SAAgB,UAANR,IAGlBS,MAAO9B,EAAE,+BAAiCqB,GAC1CL,IAAKK,IA7BZ,IAACI,MAkCVM,yBAAwB,eAAK,YAAqB","file":"static/js/panelStationsMore.8cb7c438.chunk.js","sourcesContent":["import React, { useContext, memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Icon,\n    FormControlLabel,\n    FormGroup,\n    Checkbox,\n    ListItemSecondaryAction,\n    Select,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\n\nexport default memo(function MoreTab(props: { stnId: string }) {\n    const { rmgStyle } = useContext(CanvasContext);\n\n    return (\n        <div>\n            <List>\n                {rmgStyle === 'mtr' && <FacilityLi stnId={props.stnId} />}\n                {rmgStyle === 'gzmtr' && <ServiceLi stnId={props.stnId} />}\n            </List>\n        </div>\n    );\n});\n\nconst FacilityLi = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>place</Icon>\n            </ListItemIcon>\n            <ListItemText primary={t('stations.edit.more.facility.button')} />\n            <ListItemSecondaryAction>\n                <Select\n                    native\n                    value={param.stn_list[props.stnId].facility}\n                    onChange={e =>\n                        dispatch({\n                            type: 'UPDATE_STATION_FACILITY',\n                            stnId: props.stnId,\n                            facility: e.target.value as Facilities,\n                        })\n                    }\n                >\n                    {(['', 'airport', 'hsr', 'disney'] as Facilities[]).map(f => (\n                        <option key={f} value={f}>\n                            {t('stations.edit.more.facility.' + (f === '' ? 'none' : f))}\n                        </option>\n                    ))}\n                </Select>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nconst ServiceLi = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    const services = new Set(param.stn_list[props.stnId].services);\n\n    const handleChange = (service: Services) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (service === 'local') return;\n        dispatch({\n            type: 'UPDATE_STATION_SERVICES',\n            stnId: props.stnId,\n            serviceId: service,\n            isChecked: event.target.checked,\n        });\n    };\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>train</Icon>\n            </ListItemIcon>\n            <ListItemText\n                primary={t('stations.edit.more.services.button')}\n                secondary={\n                    <FormGroup row>\n                        {(['local', 'express'] as Services[]).map(s => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={services.has(s)}\n                                        value={s}\n                                        onChange={handleChange(s)}\n                                        disabled={s === 'local'}\n                                    />\n                                }\n                                label={t('stations.edit.more.services.' + s)}\n                                key={s}\n                            />\n                        ))}\n                    </FormGroup>\n                }\n                secondaryTypographyProps={{ ['component' as any]: 'div' }}\n            />\n        </ListItem>\n    );\n};\n"],"sourceRoot":""}