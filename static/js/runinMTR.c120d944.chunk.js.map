{"version":3,"sources":["svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx"],"names":["InfoGZMTR","param","React","useContext","ParamContext","curStnInfo","stn_list","current_stn_idx","curNameEl","useRef","useState","width","nameBBox","setNameBBox","useEffect","current","getBBox","name","nextStnId","direction","BigName","ref","curName","style","svg_height","split","length","lineNum","line_num","stnNum","num","svgWidth","runin","includes","nextId","nextIds","forwardRef","props","others","id","useMemo","className","fontSize","map","txt","i","key","dy","BigStnNum","d","transform","BigNext","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","textAnchor","fill","BigNext2","routes","nextNames","nextNameEls","prevBBox","forEach","el","toString","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","Math","max","names","Fragment","y","j","join","replace","PlatformNum","RunInGZMTR","variant","info_panel_type","isShowLight","isShowPSD","psd_num","platform_num","cx","cy","r","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StripGZMTR","stripHeight","indicatorLight","rx","ry","x","height","PSD","memo","isInStrip","psdDy","prevProps","nextProps","StationNumberText","lineNumEl","bBox","setBBox","lineNumScale","stnNumScale"],"mappings":"uNAoDeA,EAhDG,WAAO,IAAD,EACZC,EAAUC,IAAMC,WAAWC,KAA3BH,MACFI,EAAaJ,EAAMK,SAASL,EAAMM,iBAElCC,EAAYN,IAAMO,OAA2B,MAJ/B,EAKYC,mBAAS,CAAEC,MAAO,IAL9B,mBAKbC,EALa,KAKHC,EALG,KAMpBC,qBACI,kBAAMD,EAAYL,EAAUO,QAASC,aAErC,CAACX,EAAWY,KAAK,GAAIZ,EAAWY,KAAK,KAGzC,IAAMC,EAAYb,EAA+B,MAApBJ,EAAMkB,UAAoB,UAAY,YAEnE,OACI,2BACI,kBAACC,EAAD,CACIC,IAAKb,EACLc,QAASjB,EAAWY,KACpBM,MAAK,eACA,gBADA,UAC4B,GAAMtB,EAAMuB,WACrC,GAC8C,IAA7CnB,EAAWY,KAAK,GAAGQ,MAAM,MAAMC,OAAS,GAH5C,SAOT,kBAAC,EAAD,CACIC,QAAS1B,EAAM2B,SACfC,OAAQxB,EAAWyB,IACnBP,OAAK,mBACA,gBADA,WAC6BtB,EAAM8B,SAASC,MAAQpB,EAASD,OAAS,EAAI,GAD1E,qBAEA,gBAFA,UAE4B,GAAMV,EAAMuB,WACrC,GAC8C,IAA7CnB,EAAWY,KAAK,GAAGQ,MAAM,MAAMC,OAAS,GAJ5C,YAQRR,EAAUe,SAAS,cAAgBf,EAAUe,SAAS,WACnD,qCACqB,IAArBf,EAAUQ,OACV,kBAAC,EAAD,CAASQ,OAAQhB,EAAU,GAAIN,SAAUA,IAEzC,kBAAC,EAAD,CAAUuB,QAASjB,EAAWN,SAAUA,MAQlDQ,EAAUlB,IAAMkC,YAClB,SAACC,EAAwDhB,GAAiC,IAC9EC,EAAuBe,EAAvBf,QAAYgB,EADiE,YACtDD,EADsD,aAGrF,OACI,qCAAGE,GAAG,WAAWlB,IAAKA,GAASiB,GAC1BpC,IAAMsC,SACH,kBACI,oCACI,0BAAMC,UAAU,eAAeC,SAAU,IACpCpB,EAAQ,IAEb,uBAAGoB,SAAU,GAAID,UAAU,gBACtBnB,EAAQ,GAAGG,MAAM,MAAMkB,KAAI,SAACC,EAAKC,GAAN,OACxB,0BAAMC,IAAKD,EAAGE,GAAI,GAAS,GAAJF,GAClBD,UAMrB,CAACtB,QAOf0B,EAAY,SAACX,GAA8E,IACrFV,EAA+BU,EAA/BV,QAASE,EAAsBQ,EAAtBR,OAAWS,EADgE,YACrDD,EADqD,sBAG5F,OACI,qCAAGE,GAAG,eAAkBD,GACnBpC,IAAMsC,SACH,kBACI,oCACI,0BACIC,UAAU,0BACVQ,EAAE,mGAEN,kBAAC,IAAD,eAAmBC,UAAU,cAAiB,CAAEvB,UAASE,eAGjE,CAACF,EAASE,MAMpBsB,EAAU,SAACd,GAAkD,IAAD,EACtDpC,EAAUC,IAAMC,WAAWC,KAA3BH,MADsD,EAG9BS,mBAAS,CAAEC,MAAO,IAHY,mBAGvDyC,EAHuD,KAG7CC,EAH6C,KAIxDC,EAAapD,IAAMO,OAA2B,MACpDK,qBAAU,kBAAMuC,EAAYC,EAAWvC,QAASC,aAAY,IAE5D,IAAMuC,EAAkBtD,EAAMK,SAAS+B,EAAMH,QAAQjB,KAAK,GAAGS,OACvD8B,GAAYvD,EAAM8B,SAASC,MAAQK,EAAMzB,SAASD,OAAS,EAEjE,OACI,oCACI,uBAAG4B,GAAG,YACF,uBACIkB,WAAW,SACXlC,MAAK,eACA,gBACuB,MAApBtB,EAAMkB,UACA,OACA,UAAAoC,GAAmB,EAChBtD,EAAM8B,SAASC,MAAQ,GAAKoB,EAASzC,MAAQ,GAC7CV,EAAM8B,SAASC,MAAQ,GAAKoB,EAASzC,MAAQ,KAFhD,QAKd,0BAAM8B,UAAU,gBAAhB,gBACA,0BAAMA,UAAU,eAAeM,GAAI,IAAnC,SAIJ,uBACIU,WAAW,QACXpC,IAAKiC,EACL/B,MAAK,eACA,gBACuB,MAApBtB,EAAMkB,UACA,UAAAoC,GAAmB,EACZ,IACA,MAFP,MADN,UAIStD,EAAM8B,SAASC,MAAQ,GAAKoB,EAASzC,MAJ9C,QAOR,0BAAM8B,UAAU,gBAAgBxC,EAAMK,SAAS+B,EAAMH,QAAQjB,KAAK,IACjEhB,EAAMK,SAAS+B,EAAMH,QAAQjB,KAAK,GAAGQ,MAAM,MAAMkB,KAAI,SAACC,EAAaC,GAAd,OAClD,0BAAMJ,UAAU,eAAeM,GAAI,GAAS,GAAJF,EAAQC,IAAKD,GAChDD,QAKjB,0BACIL,GAAG,QACHU,EAAE,kEACFS,KAAK,QACLnC,OAAK,mBACA,gBACuB,MAApBtB,EAAMkB,UAAN,WACU,IAAM,KAAOoC,GAAmB,EAAI,EAAI,IAAOA,GAAmBC,GAAY,EAC9E,GAFV,iBAGUvD,EAAM8B,SAASC,MACf,GACAoB,EAASzC,OACR4C,GAAmB,EAAI,IAAU,MAClCC,EACAnB,EAAMzB,SAASD,MACf,GACA,MACA,EACA,GAZV,OAFH,cAeA,WAAwC,MAApBV,EAAMkB,UAAoB,OAAS,UAfvD,OAsBfwC,EAAW,SAACtB,GAAqD,IAAD,IACxCnC,IAAMC,WAAWC,KAAnCH,EAD0D,EAC1DA,MAAO2D,EADmD,EACnDA,OAETC,EAAYxB,EAAMF,QAAQQ,KAAI,SAAAJ,GAAE,OAAItC,EAAMK,SAASiC,GAAItB,QAHK,EAIlCP,mBAAS,CAAEC,MAAO,IAJgB,mBAI3DyC,EAJ2D,KAIjDC,EAJiD,KAK5DS,EAAcrD,iBAA+B,IACnDK,qBACI,WACIuC,GAAY,SAAAU,GAAQ,sBAAUA,EAAV,CAAoBpD,MAAO,OAC/CmD,EAAY/C,QAAQiD,SAAQ,SAAAC,GACxB,IAAIb,EAAQ,OAAGa,QAAH,IAAGA,OAAH,EAAGA,EAAIjD,UACnBqC,GAAY,SAAAU,GACR,OAAIX,EACOW,EAASpD,MAAQyC,EAASzC,MAAQoD,EAAWX,EAE7CW,UAMvB,CAACF,EAAUK,aAGf,IAAMC,EAAY9B,EAAMF,QAAQQ,KAAI,SAAAyB,GAAK,OACrCR,EAAOS,QACH,SAACC,EAAKC,GAAN,OAEIA,EAAMtC,SAASmC,GACTE,EAAIE,OACAD,EACKE,QAAO,SAAAC,GAAC,OAAK,CAAC,YAAa,WAAWzC,SAASyC,MAE/CC,MAA0B,MAApB1E,EAAMkB,UAAoB,GAAK,GAAG,IAEjDmD,IACV,OAIFf,EAAkBqB,KAAKC,IAAL,MAAAD,KAAI,YAAQf,EAAUlB,KAAI,SAAAmC,GAAK,OAAIA,EAAM,GAAGpD,YAC9D8B,GAAYvD,EAAM8B,SAASC,MAAQK,EAAMzB,SAASD,OAAS,EAEjE,OACI,oCACI,uBAAG4B,GAAG,cACDsB,EAAUlB,KAAI,SAAC1B,EAAM4B,GAClB,OACI,kBAAC,IAAMkC,SAAP,CAAgBjC,IAAKD,GACjB,uBACIY,WAAW,SACXlC,MAAK,eACA,gBACuB,MAApBtB,EAAMkB,UACA,OADN,UAESlB,EAAM8B,SAASC,MAAQ,GAAKoB,EAASzC,MAAQ,GAFtD,QAKR,0BAAM8B,UAAU,gBAAhB,gBACA,0BAAMA,UAAU,eAAeuC,EAAG,IAAlC,SAIJ,uBACI3D,IAAK,SAAA4C,GAAE,OAAKH,EAAY/C,QAAQ8B,GAAKoB,GACrCR,WAAW,QACXlC,MAAK,eACA,gBACuB,MAApBtB,EAAMkB,UACA,QADN,UAESlB,EAAM8B,SAASC,MAAQ,GAAKoB,EAASzC,MAF9C,QAKR,0BAAM8B,UAAU,gBAAgBxB,EAAK,IACpCA,EAAK,GAAGQ,MAAM,MAAMkB,KAAI,SAACC,EAAKqC,GAAN,OACrB,0BAAMnC,IAAKmC,EAAGxC,UAAU,eAAeuC,EAAG,GAAS,GAAJC,GAC1CrC,MAGT,0BAAMH,UAAU,eAAeuC,GAAI,IAC9Bb,EAAUtB,GAAGF,KAAI,SAAA+B,GAAC,OAAIzE,EAAMK,SAASoE,GAAGzD,KAAK,MAAIiE,KAAK,KAAO,gBAElE,0BAAMzC,UAAU,2CAA2CuC,GAAI,IAC1D,WACGb,EAAUtB,GACLF,KAAI,SAAA+B,GAAC,OAAIzE,EAAMK,SAASoE,GAAGzD,KAAK,MAChCiE,KAAK,KACLC,QAAQ,KAAM,YAO/C,0BACI5C,GAAG,QACHU,EAAE,kEACFS,KAAK,QACLnC,OAAK,mBACA,gBACuB,MAApBtB,EAAMkB,UAAN,WACU,GAAK,IAAM,EAAIoC,GAAmBC,GAAY,EAAI,GAD5D,iBAEUvD,EAAM8B,SAASC,MACf,GACAoB,EAASzC,MACT,GACA,GACA6C,EACAnB,EAAMzB,SAASD,MACf,GACA,MACA,EACA,GAZV,OAFH,cAeA,WAAwC,MAApBV,EAAMkB,UAAoB,OAAS,UAfvD,OC1PfiE,GAFSC,UAlBI,WAAO,IACdpF,EAAUC,aAAiBE,KAA3BH,MACR,OACI,gCACI,gBAAC,IAAD,CAAYqF,QAASrF,EAAMsF,gBAAiBC,aAAa,EAAMC,UAAWxF,EAAMyF,UAEhF,gBAAC,EAAD,CACI5D,IAAK7B,EAAM0F,aACXpE,MAAK,eACA,gBADA,UACgD,MAApBtB,EAAMkB,UAAoBlB,EAAM8B,SAASC,MAAQ,IAAM,IADnF,SAKT,gBAAC,EAAD,QAOQ,SAACK,GAA0D,IACnEP,EAAmBO,EAAnBP,IAAQQ,EAD0D,YAC/CD,EAD+C,SAG1E,OACI,mCAAGE,GAAG,YAAeD,GAChBpC,WACG,kBACI,gCACI,0BAAQ0F,GAAI,EAAGC,GAAI,EAAGC,EAAG,GAAIpC,KAAK,4BAClC,wBAAMjB,UAAU,eAAeC,SAAU,GAAIK,IAAK,KAC7CjB,GAEL,wBAAMW,UAAU,eAAeC,SAAU,GAAIK,GAAI,IAAjD,gBAGA,wBAAMN,UAAU,eAAeC,SAAU,EAAGK,GAAI,IAAhD,eAKR,CAACjB,Q,gCC7CF,SAASiE,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIlD,EAAKD,EADLqD,ECHS,SAAuCF,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIlD,EAAKD,EAFLqD,EAAS,GACTC,EAAaC,OAAOC,KAAKL,GAG7B,IAAKnD,EAAI,EAAGA,EAAIsD,EAAWzE,OAAQmB,IACjCC,EAAMqD,EAAWtD,GACboD,EAASK,QAAQxD,IAAQ,IAC7BoD,EAAOpD,GAAOkD,EAAOlD,IAGvB,OAAOoD,EDTM,CAA6BF,EAAQC,GAGlD,GAAIG,OAAOG,sBAAuB,CAChC,IAAIC,EAAmBJ,OAAOG,sBAAsBP,GAEpD,IAAKnD,EAAI,EAAGA,EAAI2D,EAAiB9E,OAAQmB,IACvCC,EAAM0D,EAAiB3D,GACnBoD,EAASK,QAAQxD,IAAQ,GACxBsD,OAAOK,UAAUC,qBAAqBC,KAAKX,EAAQlD,KACxDoD,EAAOpD,GAAOkD,EAAOlD,IAIzB,OAAOoD,EAjBT,mC,2DEwEeU,IAhEI,SAACvE,GAChB,IAAMwE,EAAe,SAAAvB,GACjB,OAAQA,GACJ,IAAK,OACL,IAAK,MACL,IAAK,OACD,OAAO,GACX,IAAK,MACL,IAAK,MACD,OAAO,GACX,IAAK,MACL,IAAK,MACL,IAAK,SACD,OAAO,GACX,QACI,OAAO,GAdE,CAgBlBjD,EAAMiD,SAEHwB,EAAiB5G,IAAMsC,SAAQ,WACjC,OAAQH,EAAMiD,SACV,IAAK,MACD,OAAO,4BAAQO,IAAK,GAAIC,EAAG,GAAIpC,KAAK,QACxC,IAAK,OACD,OAAO,6BAASmC,IAAK,GAAIkB,GAAI,GAAIC,GAAI,GAAItD,KAAK,WAClD,IAAK,MACD,OAAO,0BAAMuD,GAAI,GAAIjC,GAAI,GAAIkC,OAAQ,GAAIvG,MAAO,GAAI+C,KAAK,QAC7D,IAAK,MACD,OAAO,6BAASmC,IAAK,GAAIkB,GAAI,GAAIC,GAAI,GAAItD,KAAK,UAClD,IAAK,SACD,OAAO,6BAASmC,IAAK,GAAIkB,GAAI,GAAIC,GAAI,GAAItD,KAAK,WAClD,IAAK,MACD,OAAO,0BAAMuD,GAAI,GAAIjC,GAAI,GAAIkC,OAAQ,GAAIvG,MAAO,GAAI+C,KAAK,WAC7D,IAAK,MACD,OAAO,0BAAMuD,GAAI,GAAIjC,GAAI,GAAIkC,OAAQ,GAAIvG,MAAO,IAAK+C,KAAK,eAC9D,IAAK,OACD,OAAO,0BAAMuD,GAAI,GAAIjC,GAAI,GAAIkC,OAAQ,GAAIvG,MAAO,GAAI+C,KAAK,WAC7D,QACI,OAAO,wCAEhB,CAACrB,EAAMiD,UAIV,OACI,uBAAGpC,UAAS,sBAAmC,QAAlBb,EAAMiD,SAHtB,GAGoD,EAArD,MACR,0BACI/C,GAAG,WACHhB,MAAK,eACA,WADA,UACuBsF,EADvB,SAIT,uBACItF,MAAO,CACH2B,UAAW,oEAGdb,EAAMmD,aAAesB,GAEzBzE,EAAMoD,WAAa,kBAAC0B,EAAQ9E,KAOzC,IAAM8E,EAAMjH,IAAMkH,MACd,SAAC/E,GAAkB,IAAD,EAIRgF,EAAY,CAAC,OAAQ,MAAO,QAAQpF,SAASI,EAAMiD,SACnDgC,EAAS,SAAChC,GACZ,OAAQA,GACJ,IAAK,MACL,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,SACD,MAAO,OACX,QACI,MAAO,QAZJ,CAcZjD,EAAMiD,SAET,OACI,uBACI7B,WAAW,SACXC,KAAM2D,EAAY,OAAS,sBAC3B9F,OAAK,mBACA,WAAoB+F,GADpB,0BAEU,qDAFV,cAGA,gBAAyB,yCAHzB,cAIA,gBAAyB,qDAJzB,IAOL,0BAAMJ,OAAQ,GAAIvG,MAAO,GAAIoG,GAAI,EAAGE,GAAI,GAAIvD,KAAM2D,EAAY,OAAS,4BACvE,0BAAM5E,UAAU,eAAeC,SAAU,GAAIK,GAAI,IAC5CV,EAAMoD,WAEX,0BAAMhD,UAAU,eAAeC,SAAU,GAAIK,GAAI,IAAjD,sBAGA,0BAAMN,UAAU,eAAeC,SAAU,IAAKK,GAAI,IAAlD,mBAMZ,SAACwE,EAAWC,GAAZ,OAA0BD,EAAUjC,UAAYkC,EAAUlC,SAAWiC,EAAU9B,YAAc+B,EAAU/B,c,mECpF5FgC,IAlCW,SAACpF,GAA8E,IAC7FV,EAA+BU,EAA/BV,QAASE,EAAsBQ,EAAtBR,OAAWS,EADwE,YAC7DD,EAD6D,sBAK9FqF,EAAYxH,IAAMO,OAA8B,MAL8C,EAM5EP,IAAMQ,SAAS,CAAEC,MAHd,WAHyE,mBAM7FgH,EAN6F,KAMvFC,EANuF,KAOpG1H,IAAMY,WAAU,kBAAM8G,EAAQF,EAAU3G,QAASC,aAAY,CAACW,IAE9D,IAAMkG,EAAeF,EAAKhH,MANC,kBAMiDgH,EAAKhH,MAAQ,EACnFmH,EAAiC,IAAnBnG,EAAQD,OAAemG,EAAe,EAE1D,OACI,qCAAGpE,WAAW,SAASf,SAAU,MAAUJ,GACtCpC,IAAMsC,SACH,kBACI,oCACI,uBAAGU,UAAS,kCAA6B2E,EAA7B,MACR,0BAAMxG,IAAKqG,EAAWjF,UAAU,gBAC3Bd,IAGT,uBAAGuB,UAAS,iCAA4B4E,EAA5B,MACR,0BAAMrF,UAAU,gBAAgBZ,OAK5C,CAAC8F,EAAKhH,MAAOgB,EAASE","file":"static/js/runinMTR.c120d944.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { ParamContext } from '../../context';\nimport StationNumberText from '../station-num-gzmtr';\n\nconst InfoGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    const curStnInfo = param.stn_list[param.current_stn_idx];\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[param.direction === 'l' ? 'parents' : 'children'];\n\n    return (\n        <g>\n            <BigName\n                ref={curNameEl}\n                curName={curStnInfo.name}\n                style={{\n                    ['--translate-y' as any]: `${0.5 * param.svg_height -\n                        50 -\n                        (curStnInfo.name[1].split('\\\\').length - 1) * 18}px`,\n                }}\n            />\n\n            <BigStnNum\n                lineNum={param.line_num}\n                stnNum={curStnInfo.num}\n                style={{\n                    ['--translate-x' as any]: `${(param.svgWidth.runin + nameBBox.width) / 2 + 55}px`,\n                    ['--translate-y' as any]: `${0.5 * param.svg_height -\n                        30 -\n                        (curStnInfo.name[1].split('\\\\').length - 1) * 18}px`,\n                }}\n            />\n\n            {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                <></>\n            ) : nextStnId.length === 1 ? (\n                <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n            ) : (\n                <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n            )}\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [curName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigStnNum = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    return (\n        <g id=\"big_stn_num\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <path\n                            className=\"rmg-stn rmg-stn--future\"\n                            d=\"M 0,12.95 V -12.95 H -12.95 a 12.95,12.95 0 0,0 0,25.9 h 25.9 a 12.95,12.95 0 0,0 0,-25.9 H 0 \"\n                        />\n                        <StationNumberText transform=\"scale(1.4)\" {...{ lineNum, stnNum }} />\n                    </>\n                ),\n                [lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { param } = React.useContext(ParamContext);\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(() => setNextBBox(nextNameEl.current!.getBBox()), []);\n\n    const nextNameZHCount = param.stn_list[props.nextId].name[0].length;\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${param.svgWidth.runin - 45 - nextBBox.width - 70}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\">下站</text>\n                    <text className=\"rmg-name__en\" dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\">{param.stn_list[props.nextId].name[0]}</text>\n                    {param.stn_list[props.nextId].name[1].split('\\\\').map((txt: string, i: number) => (\n                        <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 -\n                                  20}px`\n                            : `${(param.svgWidth.runin -\n                                  45 -\n                                  nextBBox.width -\n                                  (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                  nameBcrX +\n                                  props.nameBBox.width +\n                                  55 +\n                                  18.5 * 1.4) /\n                                  2 +\n                                  20}px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const nextNames = props.nextIds.map(id => param.stn_list[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(param.direction === 'l' ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '72px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '113px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => param.stn_list[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => param.stn_list[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${(param.svgWidth.runin -\n                                  45 -\n                                  nextBBox.width -\n                                  41 -\n                                  27 +\n                                  nameBcrX +\n                                  props.nameBBox.width +\n                                  55 +\n                                  18.5 * 1.4) /\n                                  2 +\n                                  20}px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\n\nconst RunInGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <StripGZMTR variant={param.info_panel_type} isShowLight={true} isShowPSD={param.psd_num} />\n\n            <PlatformNum\n                num={param.platform_num}\n                style={{\n                    ['--translate-x' as any]: `${param.direction === 'l' ? param.svgWidth.runin - 100 : 100}px`,\n                }}\n            />\n\n            <InfoGZMTR />\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst PlatformNum = (props: { num: string } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                            {num}\n                        </text>\n                        <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                            站台\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                            Platform\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\n\ninterface Props {\n    variant: PanelTypeGZMTR;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? '#000' : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n"],"sourceRoot":""}