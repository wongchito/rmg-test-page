{"version":3,"sources":["panels/layout/common.tsx","panels/layout/panel.tsx","panels/layout/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","textField","maxWidth","slider","width","marginLeft","marginRight","React","window","urlParams","get","SizeLi","t","useTranslation","classes","ParamContext","param","dispatch","canvasAvailable","CanvasContext","isOpen","setIsOpen","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","map","canvas","key","value","svgWidth","toString","onChange","e","isNaN","Number","target","type","targetId","InputProps","endAdornment","position","variant","svg_height","JSON","stringify","YLi","y_pc","_","step","marks","label","valueLabelDisplay","BranchSpacingLi","branch_spacing","PaddingLi","padding","max","LayoutGZMTR","container","justify","alignItems","item","xs","sm","md","lg","fallback","Panel"],"mappings":"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","file":"static/js/panelLayout.1f55c81c.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    TextField,\n    Slider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    InputAdornment,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../context';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        textField: {\n            maxWidth: 168,\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default React.memo(function LayoutCommon() {\n    return (\n        <>\n            <SizeLi />\n            <Divider />\n            {window.urlParams.get('style') !== 'shmetro' && (\n                <>\n                    <YLi />\n                    <Divider />\n                </>\n            )}\n            <BranchSpacingLi />\n            <Divider />\n            <PaddingLi />\n        </>\n    );\n});\n\nconst SizeLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const { canvasAvailable } = React.useContext(CanvasContext);\n\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>panorama_horizontal</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.size.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        {canvasAvailable.map(canvas => (\n                            <React.Fragment key={canvas}>\n                                <ListItem>\n                                    <ListItemText primary={t('layout.size.width.' + canvas)} />\n                                    <TextField\n                                        value={param.svgWidth[canvas].toString()}\n                                        onChange={e =>\n                                            !isNaN(Number(e.target.value)) &&\n                                            dispatch({\n                                                type: 'SET_WIDTH',\n                                                targetId: canvas,\n                                                value: Number(e.target.value),\n                                            })\n                                        }\n                                        className={classes.textField}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                        }}\n                                    />\n                                </ListItem>\n                                <Divider variant=\"middle\" />\n                            </React.Fragment>\n                        ))}\n                        <ListItem>\n                            <ListItemText primary={t('layout.size.height')} />\n                            <TextField\n                                value={param.svg_height.toString()}\n                                onChange={e =>\n                                    !isNaN(Number(e.target.value)) &&\n                                    dispatch({ type: 'SET_HEIGHT', value: Number(e.target.value) })\n                                }\n                                className={classes.textField}\n                                InputProps={{\n                                    endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                }}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(param.svgWidth), param.svg_height, isOpen, classes.nestedList]\n    );\n};\n\nconst YLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>vertical_align_center</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.y')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.y_pc}\n                    onChange={(_, value) => dispatch({ type: 'SET_Y', value: value as number })}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 100, label: '100%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.y_pc, classes.slider]\n    );\n};\n\nconst BranchSpacingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>format_line_spacing</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.branchSpacing')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.branch_spacing}\n                    onChange={(_, value) => dispatch({ type: 'SET_BRANCH_SPACING', value: value as number })}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0px' },\n                        { value: 100, label: '100px' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.branch_spacing, classes.slider]\n    );\n};\n\nconst PaddingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>stay_current_landscape</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.padding')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.padding}\n                    onChange={(_, value) => dispatch({ type: 'SET_PADDING', value: value as number })}\n                    step={0.01}\n                    max={50}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.padding, classes.slider]\n    );\n};\n","import * as React from 'react';\n\nimport { Grid, Paper, List, LinearProgress } from '@material-ui/core';\n\nimport LayoutCommon from './common';\nconst LayoutGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelLayoutGZMTR\" */ './gzmtr'));\n\nexport default React.memo(function LayoutPanel() {\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <LayoutCommon />\n                        {window.urlParams.get('style') === 'gzmtr' && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <LayoutGZMTR />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n});\n\n// export default LayoutPanel;\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}