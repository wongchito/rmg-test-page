{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","stnInfo","React","ParamContext","param","stn_list","stnId","xlinkHref","transfer","type","stnState","className","transform","branch","left","right","length","name","infos","info","isOSI","includes","StationNameGElement","nameENLn","split","stnNameEl","width","bBox","setBBox","current","getBBox","toString","x","Math","cos","textAnchor","StationName","ref","intInfos","flat","osiInfos","fontSize","map","txt","i","key","dy","IntBoxGroup","others","dx","isLineNumber","Boolean","match","el","IntBoxNumber","IntBoxLetter","height","y","fill","dominantBaseline","prevProps","nextProps","textCount","OSIText","lineNames","join","MainSHMetro","useContext","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","useMemo","console","log","Object","keys","reduce","acc","cur","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","ys","branch_spacing","stnStates","getStnState","current_stn_idx","direction","linePaths","drawLine","paths","stns","_linePath","id","svg_height","Line","pass","path","stroke","strokeWidth","d","main","stnIds","prevY","prevX","e","forEach","hasOwnProperty","xm","ym","h","StationGroup","filter","style","RailMapSHMetro","DefsSHMetro","r","_objectWithoutProperties","source","excluded","target","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","stnList","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","pos","parId","getNamePos","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.ddc1ebf0.chunk.js","sourcesContent":["import * as React from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    return (\n        <>\n            <use\n                xlinkHref={\n                    '#' +\n                    (stnInfo.transfer.type === 'none' ? 'stn_sh' : 'int2_sh') +\n                    (props.stnState === -1 ? '_pass' : '')\n                }\n                className=\"rmg-stn\"\n            />\n            <g transform={`translate(${[...stnInfo.branch.left, ...stnInfo.branch.right].length ? 30 : 0},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    isOSI={stnInfo.transfer.type.includes('osi')}\n                    stnState={props.stnState}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    isOSI: boolean;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g\n            className=\"Name Future\"\n            transform={`translate(${-(24 + (nameENLn - 1) * 12) * Math.cos(-45)},${-4 -\n                21.921875 -\n                (nameENLn - 1) * 12 * Math.cos(-45)})rotate(-50)`}\n            textAnchor=\"start\"\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n\n            <IntBoxGroup intInfos={props.isOSI ? props.infos.flat() : props.infos[0]} transform={`translate(${x},0)`} />\n\n            {props.isOSI && (\n                <g transform={`translate(${x + props.infos.flat().length * 15},-30)`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    React.useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\">{props.name[0]}</text>\n                <g fontSize=\"60%\">\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    )\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[] } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const el = (\n                    <g transform={`translate(${dx},0)`} key={i}>\n                        {isLineNumber ? <IntBoxNumber info={info} /> : <IntBoxLetter info={info} />}\n                    </g>\n                );\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                dx += isLineNumber ? 25 : info[4].length * 16 + 12 + 5;\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <rect height={30} width={20} y={-15} fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" textAnchor=\"middle\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={30} width={textCount * 16 + 12} y={-15} fill={props.info[2]} />\n                <text\n                    x={textCount * 8 + 6}\n                    className=\"rmg-name__zh\"\n                    textAnchor=\"middle\"\n                    fill={props.info[3]}\n                    dominantBaseline=\"central\"\n                >\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\">{'换乘' + lineNames.join('，')}</text>\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\" dy={10}>\n                    仅限公共交通卡\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: { main: string[]; pass: string[] } }) => {\n    return (\n        <>\n            <g className=\"rmg-line rmg-line__pass rmg-line__shmetro\">\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} stroke=\"gray\" strokeWidth={12} fill=\"none\" d={path} />\n                ))}\n            </g>\n            <g className=\"rmg-line rmg-line__shmetro\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} fill=\"var(--rmg-theme-colour)\" d={path} />\n                ))}\n            </g>\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x},${y - 6} L ${x - e},${y - 6} l -12,12 L ${x},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} L ${x + e},${y - 6} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e},${y}`;\n            } else {\n                return `M ${x - e},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e},${y - 6} H ${h} l 0,12 L ${x - 42},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} H ${h + e} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e}`;\n            } else {\n                return `M ${x - e},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let h = path['end'][0];\n        // let [xb, yb] = path['bifurcate']\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x - e - 12} Z`;\n                } else {\n                    // main line, left direction, upper to center\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm} Z`;\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x} Z`;\n                } else {\n                    // main line, right direction, center to upper\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm + e},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm + e + 12} Z`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" stroke=\"var(--rmg-theme-colour)\" strokeWidth={2} r={5} />\n        <circle id=\"stn_sh_pass\" fill=\"#fff\" stroke=\"#aaa\" strokeWidth={2} r={5} />\n        <path\n            id=\"int2_sh\"\n            fill=\"#fff\"\n            stroke=\"var(--rmg-theme-colour)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"int2_sh_pass\"\n            fill=\"#fff\"\n            stroke=\"#aaa\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    private getNamePos(stnId: string): boolean {\n        if (stnId === 'linestart') {\n            this.namePoss['linestart'] = true;\n            return true;\n        }\n        let self = this;\n        let pos = this.criticalPath.nodes.indexOf(stnId) % 2; // -1, 0 or 1;\n        if (pos === -1) {\n            let parId = this.stnList[stnId].parents[0];\n            if (this.stnList[parId].children.length === 2) {\n                let res = self.getNamePos(parId);\n                this.namePoss[stnId] = res;\n                return res;\n            }\n            let res = !self.getNamePos(parId);\n            this.namePoss[stnId] = res;\n            return res;\n        }\n        this.namePoss[stnId] = pos === 1;\n        return pos === 1;\n    }\n\n    static getNamePos(stnList: StationDict, cp: { len: number; nodes: string[] }) {\n        console.log('computing name position');\n        let stations = new this({ stnList, criticalPath: cp });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.namePoss) return;\n            stations.getNamePos(stnId);\n        });\n\n        return stations.namePoss;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}