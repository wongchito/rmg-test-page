{"version":3,"sources":["panels/stations/edit-diag/interchange-tab.tsx","panels/colour-diag/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/stations/edit-diag/name-list-items.tsx","panels/colour-diag/data.ts","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts"],"names":["StationEditInterchangeTab","props","t","useTranslation","rmgStyle","useContext","CanvasContext","React","useState","osiNameDialogOpened","setOsiNameDialogOpened","addClick","index","changeType","ns","stnTrans","info","map","inf","length","console","log","transInfo","type","osi_names","includes","concat","Array","onUpdate","idx","deleteClick","i","slice","style","margin","title","aria-label","onClick","InterchangeChipSet","stnId","setIndex","onDelete","variant","color","lineHeight","whiteSpace","marginRight","join","OSINameDialog","open","osiName","onClose","InterchangeMore","intChipSetStyles","makeStyles","createStyles","intChip","borderRadius","height","intChipText","display","textAlign","intChipTextZH","fontSize","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","classes","ParamContext","param","dispatch","intInfos","stn_list","transfer","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","label","className","key","deleteIcon","backgroundColor","theme","undefined","lineName","value","setIdx","intIdx","memo","dividers","event","newOSIName","val","target","name","autoFocus","prevProps","nextProps","toString","tickDirecChange","_event","direction","paidAreaChange","checked","isPaid","useMemo","primary","secondary","row","tick_direc","onChange","control","labelPlacement","secondaryTypographyProps","edge","paid_area","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useStyles","listItemIcon","width","NameListItems","helperText","cityList","country","en","zh","ga","pt","ko","ja","cityItem","flexDirection","alignItems","menuItemSpan","padding","button","minWidth","border","inputColour","position","left","top","buttonContainer","flexShrink","i18n","hexTemp","setHexTemp","lineList","list","setList","listPromise","default","useEffect","data","l","colour","fg","useLineList","filter","newTheme","select","line","disabled","getTransText2","languages","rgb","htmlFor","borderColor","component","error","match","hex","toUpperCase","CitySelect","items","c","CountryFlag","useEmojiStyles","img","codePoints","split","char","codePointAt","language","navigator","platform","indexOf","src","process","alt","String","fromCodePoint","cp","parseInt","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","paddingTop","inputBaseInputEN","paddingBottom","ColourDialog","nameChange","newName","handleClose","root","input"],"mappings":"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B,MAAO5E,EAASoG,WAAYC,SAAUX,GACpE,kBAAC,mBAAD,CACId,MAAM,IACN0B,QAAS,kBAAC,QAAD,CAAO1E,MAAM,cACtBwC,MAAOjF,EAAE,yCACToH,eAAe,QAEnB,kBAAC,mBAAD,CACI3B,MAAM,IACN0B,QAAS,kBAAC,QAAD,CAAO1E,MAAM,cACtBwC,MAAOjF,EAAE,yCACToH,eAAe,SAI3BC,yBAAwB,eAAK,YAAqB,UAG1D,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,sBAEJ,kBAAC,eAAD,CAAcP,QAAS9G,EAAE,wCACzB,kBAAC,0BAAD,KACI,kBAAC,SAAD,CAAQsH,KAAK,MAAMJ,SAAUR,EAAgBC,QAAS9F,EAAS0G,iBAM/E,CAACxH,EAAMsC,MAAOxB,EAASoG,WAAYpG,EAAS0G,c,mBC3bpD,IAAIxG,EAAM,CACT,cAAe,CACd,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,GAED,eAAgB,CACf,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,IAED,eAAgB,CACf,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,WAAY,CACX,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,YAAa,CACZ,GACA,EACA,GAED,eAAgB,CACf,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,GAED,gBAAiB,CAChB,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,iBAAkB,CACjB,GACA,EACA,GAED,WAAY,CACX,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,GAED,UAAW,CACV,GACA,EACA,GAED,aAAc,CACb,GACA,EACA,GAED,cAAe,CACd,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,iBAAkB,CACjB,GACA,EACA,IAED,oBAAqB,CACpB,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,gBAAiB,CAChB,GACA,EACA,IAED,WAAY,CACX,GACA,EACA,IAED,cAAe,CACd,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,IAED,YAAa,CACZ,GACA,EACA,IAED,eAAgB,CACf,GACA,EACA,IAED,UAAW,CACV,GACA,EACA,IAED,aAAc,CACb,GACA,EACA,KAGF,SAASyG,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE5G,EAAK0G,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMnH,EAAI0G,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoB1H,EAAEmI,EAAID,EAAI,OAGvCV,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKrH,IAEpByG,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,gCC/PjB,0BAIMgB,EAAYpF,sBAAW,kBACzBC,uBAAa,CACToF,aAAc,CACVC,MAAO,MACP7E,SAAU,SACVF,UAAW,eAiDRgF,IAvCO,SAAC5I,GAAkB,IAC7BC,EAAMC,2BAAND,EACFoE,EAAUoE,IAEhB,OAAOnI,WACH,kBACI,gCACI,gBAAC,WAAD,KACI,gBAAC,eAAD,KACI,wBAAM6E,UAAWd,EAAQqE,cAAzB,WAEJ,gBAAC,YAAD,CACI1G,MAAO,CAAE2G,MAAO,QAChBlG,QAAQ,WACRyC,MAAOjF,EAAE,6BACTkH,SAAUnH,EAAM2B,SAAS,GACzB+D,MAAO1F,EAAMmG,KAAK,MAG1B,gBAAC,WAAD,KACI,gBAAC,eAAD,KACI,wBAAMhB,UAAWd,EAAQqE,cAAzB,MAEJ,gBAAC,YAAD,CACI1G,MAAO,CAAE2G,MAAO,QAChBlG,QAAQ,WACRyC,MAAOjF,EAAE,6BACTkH,SAAUnH,EAAM2B,SAAS,GACzB+D,MAAO1F,EAAMmG,KAAK,GAClB0C,WAAY5I,EAAE,yCAM9B,CAACD,EAAMmG,KAAKI,e,iGCtDPuC,EAAwB,CACjC,CACIV,GAAI,UACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,UACJC,GAAI,iBAGZ,CACIb,GAAI,WACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,WACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,UACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,UACJC,GAAI,iBAGZ,CACIb,GAAI,YACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,YACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,WACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,WACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,YACJW,QAAS,QACT5C,KAAM,CACF6C,GAAI,YACJE,GAAI,oBACJ,UAAW,qBACX,UAAW,uBAGnB,CACId,GAAI,SACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,SACJC,GAAI,iBAGZ,CACIb,GAAI,UACJW,QAAS,QACT5C,KAAM,CACF6C,GAAI,UACJE,GAAI,UACJD,GAAI,6BAGZ,CACIb,GAAI,YACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,YACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,WACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,YACJC,GAAI,iBAGZ,CACIb,GAAI,YACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,YACJC,GAAI,iBAGZ,CACIb,GAAI,SACJW,QAAS,QACT5C,KAAM,CACF6C,GAAI,SACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,QACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,QACJG,GAAI,QACJ,UAAW,eACX,UAAW,iBAGnB,CACIf,GAAI,YACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,aACJC,GAAI,iBAGZ,CACIb,GAAI,eACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,gBACJ,UAAW,qBACX,QAAS,qBACT,QAAS,uBAGjB,CACIZ,GAAI,QACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,4BACJI,GAAI,mCACJ,UAAW,6CACX,UAAW,+CAGnB,CACIhB,GAAI,WACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,WACJC,GAAI,iBAGZ,CACIb,GAAI,WACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,WACJC,GAAI,iBAGZ,CACIb,GAAI,SACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,SACJ,UAAW,eACX,UAAW,iBAGnB,CACIZ,GAAI,QACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,6BACJK,GAAI,6CACJ,UAAW,6CACX,UAAW,+CAGnB,CACIjB,GAAI,UACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,UACJ,UAAW,qBACX,UAAW,uBAGnB,CACIZ,GAAI,OACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,QACJC,GAAI,iBAGZ,CACIb,GAAI,QACJW,QAAS,KACT5C,KAAM,CACF6C,GAAI,mBACJ,UAAW,4BACX,UAAW,yBCzLjBP,EAAYpF,sBAAW,kBACzBC,uBAAa,CACTgG,SAAU,CACN3F,QAAS,OACT4F,cAAe,MACfC,WAAY,UAEhBC,aAAc,CACVC,QAAS,WAEbC,OAAQ,CACJnG,aAAc,MACdC,OAAQ,GACRkF,MAAO,GACPiB,SAAU,EACV/G,YAAa,EACbgH,OAAQ,QACRH,QAAS,GAEbI,YAAa,CACTC,SAAU,WACVpB,MAAO,EACPlF,OAAQ,EACRuG,KAAM,GACNC,IAAK,IAETC,gBAAiB,CACbvG,QAAS,OACTwG,WAAY,QAyCT7J,MAAMuF,MACjB,SAAoB7F,GAEhB,IAAMqE,EAAUoE,IAF0B,EAGtBvI,2BAAZD,EAHkC,EAGlCA,EAAGmK,EAH+B,EAG/BA,KAH+B,EAKZ9J,IAAMC,SAASP,EAAMuF,MAAM,IALf,mBAKnC8E,EALmC,KAK1BC,EAL0B,KAapCC,EAlDM,SAAChF,GAAkB,IAAD,EACVjF,IAAMC,SAAS,IADL,mBAC3BiK,EAD2B,KACrBC,EADqB,KAG5BC,EAAcnF,EAAM,GACpB,kBAAsDA,EAAM,KAAMwC,MAC9D,SAAAQ,GAAM,OAAIA,EAAOoC,WAErB9C,QAAQC,QAAQ,IAqBtB,OAnBA8C,qBACI,WAC4B,qBAAbrF,EAAM,KAEO,UAAbA,EAAM,GAEbmF,EAAY3C,MAAK,SAAA8C,GACbJ,EACII,EAAK7J,KAAI,SAAC8J,EAAGhJ,GAAJ,OAAiB,IAANA,EAAA,eAAegJ,EAAf,CAAkBC,OAAQxF,EAAM,GAAIyF,GAAIzF,EAAM,IAAM,SAApD,eAAoEuF,UAIhGJ,EAAY3C,MAAK,SAAA8C,GAAI,OAAIJ,EAAQI,SAIzC,CAACtF,EAAMgB,aAGJiE,EAsBcS,CAAYjL,EAAMuF,OAGnCqF,qBACI,WACI,GAAwB,IAApBL,EAASrJ,SACTqJ,EAASW,QAAO,SAAAJ,GAAC,OAAIA,EAAE1C,KAAOpI,EAAMuF,MAAM,MAAIrE,OAAlD,CACA,IAAIiK,EAAW,CAACnL,EAAMuF,MAAM,GAAIgF,EAAS,GAAGnC,GAAImC,EAAS,GAAGQ,OAAQR,EAAS,GAAGS,IAAM,QACtFhL,EAAM2B,SAAS,QAASwJ,MAG5B,CAACZ,IAgBLK,qBACI,WACIN,EAAWtK,EAAMuF,MAAM,MAG3B,CAACvF,EAAMuF,MAAM,KAyDjB,OACI,oCACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,uBAEJ,kBAAC,EAAD,CAAYG,MAAO1F,EAAMuF,MAAM,GAAI4B,SArG5B,SAACpB,GAChB,IAAIoF,EAAWnL,EAAMuF,MAAMvE,KAAI,SAACiF,EAAKrE,GAAN,OAAuB,IAARA,EAAYmE,EAAMG,OAAOR,MAAQO,KAC/EjG,EAAM2B,SAAS,QAASwJ,OAqGpB,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,gBAEJ,kBAAC,YAAD,CACIC,QAAM,EACNpJ,MAAO,CAAE2G,MAAO,QAChBlG,QAAQ,WACRyC,MAAOjF,EAAE,eACTkH,SA5FG,SAACpB,GAChB,IAAIsF,EAAOtF,EAAMG,OAAOR,MACpByF,EAAW,CACXnL,EAAMuF,MAAM,GACZ8F,EACAd,EAASW,QAAO,SAAAJ,GAAC,OAAIA,EAAE1C,KAAOiD,KAAM,GAAGN,OACvCR,EAASW,QAAO,SAAAJ,GAAC,OAAIA,EAAE1C,KAAOiD,KAAM,GAAGL,IAAM,QAEjDhL,EAAM2B,SAAS,QAASwJ,IAqFZzF,MAAO1F,EAAMuF,MAAM,GACnB+F,SAA6B,UAAnBtL,EAAMuF,MAAM,IAErBgF,EAASvJ,KAAI,SAAA8J,GAAC,OACX,kBAAC,WAAD,CAAU1F,IAAK0F,EAAE1C,GAAI1C,MAAOoF,EAAE1C,IAC1B,0BACIjD,UAAWd,EAAQoF,aACnBzH,MAAO,CACHsD,gBAAiBwF,EAAEC,OACnBrI,MAAOoI,EAAEE,IAAM,SAGlBO,YAAcT,EAAE3E,KAAMiE,EAAKoB,kBAMhD,kBAAC,WAAD,KACI,yBAAKrG,UAAWd,EAAQ6F,iBACpB,2BACI5I,KAAK,QACL8G,GAAG,cACH1C,MAAO1F,EAAMuF,MAAM,GACnB4B,SAhGC,SAACpB,GAClB,IAAI0F,EAAM1F,EAAMG,OAAOR,MAGvB,GAFA4E,EAAWmB,GAEY,UAAnBzL,EAAMuF,MAAM,GAAgB,CAE5B,IAAI4F,EAAW,CAAC,QAASnL,EAAMuF,MAAM,GAAIkG,EAAKzL,EAAMuF,MAAM,IAC1DvF,EAAM2B,SAAS,QAASwJ,OAGrB,CAEH,IAAIA,EAAWnL,EAAMuF,MAAMvE,KAAI,SAACiF,EAAKrE,GAAN,OAAuB,IAARA,EAAY6J,EAAMxF,KAChEjG,EAAM2B,SAAS,QAASwJ,KAoFZhG,UAAWd,EAAQyF,cAEvB,2BAAO4B,QAAQ,eACX,kBAAC,UAAD,CAASxJ,MAAOjC,EAAE,kBAAmBkC,aAAW,iBAC5C,kBAAC,SAAD,CACIgD,UAAWd,EAAQsF,OACnB3H,MAAO,CACHsD,gBAAiBtF,EAAMuF,MAAM,GAC7BoG,YAAa3L,EAAMuF,MAAM,IAAM,QAEnC9C,QAAQ,YACRmJ,UAAU,QAET,QAKjB,kBAAC,YAAD,CACIC,QAAO,OAACxB,QAAD,IAACA,OAAD,EAACA,EAASyB,MAAM,uBACvB9J,MAAO,CAAE2G,MAAO,OAAQ9F,YAAa,GACrCJ,QAAQ,WACRyC,MAAOjF,EAAE,iBACTkH,SAtGE,SAACpB,GACf,IAAIgG,EAAMhG,EAAMG,OAAOR,MACvB,GAAyC,OAArCqG,EAAID,MAAM,uBAGd,GAFAxB,EAAWyB,GAEY,UAAnB/L,EAAMuF,MAAM,GACZ,GAAuC,OAAnCwG,EAAID,MAAM,qBAA+B,CAEzC,IAAIX,EAAW,CAAC,QAASnL,EAAMuF,MAAM,GAAIwG,EAAK/L,EAAMuF,MAAM,IAC1DvF,EAAM2B,SAAS,QAASwJ,OAGrB,CAEH,IAAIA,EAAW,CAAC,QAASnL,EAAMuF,MAAM,GAAIvF,EAAMuF,MAAM,GAAIvF,EAAMuF,MAAM,IACrEvF,EAAM2B,SAAS,QAASwJ,QAK5B,GAAuC,OAAnCY,EAAID,MAAM,qBAA+B,CAEzC,IAAIX,EAAWnL,EAAMuF,MAAMvE,KAAI,SAACiF,EAAKrE,GAAN,OAAuB,IAARA,EAAYmK,EAAM9F,KAChEjG,EAAM2B,SAAS,QAASwJ,KAgFpBzF,MAAK,OAAE2E,QAAF,IAAEA,OAAF,EAAEA,EAAS2B,gBAEpB,kBAAC,YAAD,CACIZ,QAAM,EACNpJ,MAAO,CAAE2G,MAAO,QAChBlG,QAAQ,WACRyC,MAAOjF,EAAE,aACTkH,SA/EC,SAACpB,GACd,IAAIoF,EAAW,CAAC,QAAS,QAASnL,EAAMuF,MAAM,GAAIQ,EAAMG,OAAOR,OAC/D1F,EAAM2B,SAAS,QAASwJ,IA8EZzF,MAAO1F,EAAMuF,MAAM,IAAM,QAEzB,kBAAC,WAAD,CAAUH,IAAI,OAAOM,MAAM,QACtBzF,EAAE,mBAEP,kBAAC,WAAD,CAAUmF,IAAI,OAAOM,MAAM,QACtBzF,EAAE,yBAO3B,SAACoG,EAAWC,GAAZ,OAA0BD,EAAUd,MAAMgB,aAAeD,EAAUf,MAAMgB,cAGvE0F,EAAa,SAACjM,GAA8F,IAAD,EACzFE,2BAAZD,EADqG,EACrGA,EAAGmK,EADkG,EAClGA,KACL/F,EAAUoE,IAEVyD,EAAQpF,mBACV,kBACIgC,EAAS9H,KAAI,SAAAmL,GAAC,OACV,kBAAC,WAAD,CAAU/G,IAAK+G,EAAE/D,GAAI1C,MAAOyG,EAAE/D,IAC1B,0BAAMjD,UAAWd,EAAQiF,UACrB,kBAAC8C,EAAD,CAAalE,KAAMiE,EAAEpD,UACrB,8BAAOwC,YAAcY,EAAEhG,KAAMiE,EAAKoB,mBAKlD,IAEJ,OACI,kBAAC,YAAD,CACIJ,QAAM,EACNpJ,MAAO,CAAE2G,MAAO,QAChBlG,QAAQ,WACRyC,MAAOjF,EAAE,eACTyF,MAAO1F,EAAM0F,MACbyB,SAAUnH,EAAMmH,UAEf+E,IAKPG,EAAiBhJ,sBAAW,kBAC9BC,uBAAa,CACTgJ,IAAK,CACD7I,OAAQ,GACRZ,YAAa,eAQzB,SAASuJ,EAAYpM,GAA0B,IACnCoK,EAASlK,2BAATkK,KACF/F,EAAUgI,IAEZE,EAAa,GAoBjB,OAjBIA,EADsB,IAAtBvM,EAAMkI,KAAKhH,OACElB,EAAMkI,KACd8D,cACAQ,MAAM,IACNxL,KAAI,SAAAyL,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQnG,SAAS,IAAIyF,iBAEvD,CAAC,SAASvK,OACnBzB,EAAMkI,KACD8D,cACAQ,MAAM,IACNxL,KAAI,SAAAyL,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQnG,SAAS,IAAIyF,iBACpE,SAKJ,CAAC,QAAS,WAAWxK,SAAS4I,EAAKuC,WAA4B,OAAf3M,EAAMkI,OAAeqE,EAAa,CAAC,WAEvC,IAAzCK,UAAUC,SAASC,QAAQ,WAA4D,IAAzCF,UAAUC,SAASC,QAAQ,SAC5E,yBACIC,IAAKC,iBAAA,wBAA0CT,EAAWzJ,KAAK,KAA1D,QACLqC,UAAWd,EAAQiI,IACnBW,IAAG,kBAAajN,EAAMkI,QAI1B,8BAAOgF,OAAOC,cAAP,MAAAD,OAAM,YAAkBX,EAAWvL,KAAI,SAAAoM,GAAE,OAAIC,SAASD,EAAI,UC9UzE,IAAM3E,EAAYpF,sBAAW,SAAAkC,GAAK,OAC9BjC,uBAAa,CACTgK,UAAW,CACP3E,MAAO,KAEX4E,cAAe,CACXC,eAAgB,UAEpBC,SAAU,CACN1D,SAAU,WACVrH,MAAO6C,EAAMmI,QAAQC,OAAOC,QAEhCC,cAAe,CACXlK,QAAS,SAEbmK,iBAAkB,CACdlK,UAAW,SACXE,SAAU,GACV4F,QAAS,EACTqE,WAAY,EACZtK,OAAQ,IAEZuK,iBAAkB,CACdpK,UAAW,SACXE,SAAU,GACV4F,QAAS,EACTuE,cAAe,EACfxK,OAAQ,aA0ELyK,EA7DM5N,IAAMuF,MACvB,SAAC7F,GACG,IAAMqE,EAAUoE,IACRxI,EAAMC,2BAAND,EAEFkO,EAAa,SAACzI,EAAe/E,GAC/B,IAAIyN,EAAUpO,EAAMyF,SAASzE,KAAI,SAACiF,EAAKrE,GAAN,OAAeA,IAAQjB,EAAQ+E,EAAQO,KACxEjG,EAAM2B,SAAS,OAAQyM,IAIrBC,EAAc,WAChBrO,EAAMkD,WAGV,OACI,kBAAC,SAAD,CAAQA,QAASmL,EAAarL,KAAMhD,EAAMgD,MACtC,kBAAC,cAAD,KAAc/C,EAAE,iBAChB,kBAAC,gBAAD,CAAe6F,UAAQ,GACnB,kBAAC,OAAD,KACI,kBAAC,WAAD,CAAUX,UAAWd,EAAQkJ,eACzB,kBAAC,QAAD,CAAOpI,UAAWd,EAAQiJ,UAAWtL,MAAO,CAAEsD,gBAAiBtF,EAAMuF,MAAM,KACvE,kBAAC,OAAD,CAAMJ,UAAWd,EAAQoJ,UAAzB,QACA,kBAAC,YAAD,CACI/H,MAAO1F,EAAMyF,SAAS,GACtBpB,QAAS,CACLiK,KAAMjK,EAAQwJ,cACdU,MAAOlK,EAAQyJ,kBAEnB9L,MAAO,CAAEU,MAAO1C,EAAMuF,MAAM,IAAM,QAClC4B,SAAU,SAAAa,GAAC,OAAImG,EAAWnG,EAAE9B,OAAOR,MAAO,IAC1CU,WAAS,IAEb,kBAAC,YAAD,CACIV,MAAO1F,EAAMyF,SAAS,GACtBpB,QAAS,CACLiK,KAAMjK,EAAQwJ,cACdU,MAAOlK,EAAQ2J,kBAEnBhM,MAAO,CAAEU,MAAO1C,EAAMuF,MAAM,IAAM,QAClC4B,SAAU,SAAAa,GAAC,OAAImG,EAAWnG,EAAE9B,OAAOR,MAAO,QAItD,kBAAC,EAAD,CAAgBH,MAAOvF,EAAMuF,MAAO5D,SAAU3B,EAAM2B,aAG5D,kBAAC,gBAAD,KACI,kBAAC,SAAD,CAAQS,QAASiM,EAAa3L,MAAM,WAC/BzC,EAAE,qBAMvB,SAACoG,EAAWC,GAAZ,OACID,EAAUrD,OAASsD,EAAUtD,MAC7BqD,EAAUZ,SAASc,aAAeD,EAAUb,SAASc,YACrDF,EAAUd,MAAMgB,aAAeD,EAAUf,MAAMgB,cCpHxC2H","file":"static/js/panelStationsInterchange.78c65293.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    Divider,\n    Button,\n    ListItemIcon,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    Switch,\n    Chip,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tooltip,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\n\ninterface StationEditInterchangeTabProps {\n    stnTrans: StationTransfer;\n    stnId: string;\n    onUpdate: (trans: StationTransfer) => void;\n}\n\nconst StationEditInterchangeTab = (props: StationEditInterchangeTabProps) => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n\n    // const { param, dispatch } = React.useContext(ParamContext);\n\n    const [osiNameDialogOpened, setOsiNameDialogOpened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] += 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n        if (props.stnTrans.info.length === 1 && index === 1) {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.concat([[Array(6) as InterchangeInfo]]),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        } else {\n            let transInfo = {\n                ...props.stnTrans,\n                type: changeType as any,\n                osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n                info: props.stnTrans.info.map((inf, idx) =>\n                    idx === index ? inf.concat([Array(6) as InterchangeInfo]) : inf\n                ),\n            };\n            // dispatch({ type: 'UPDATE_STATION_TRANSFER', stnId: props.stnId, transfer: transInfo });\n            console.log(transInfo);\n            props.onUpdate(transInfo);\n        }\n    };\n\n    const deleteClick = (index: number, i: number) => {\n        let ns = props.stnTrans.info.map(inf => inf.length);\n        if (ns.length === 1) {\n            ns[1] = 0;\n        }\n        ns[index] -= 1;\n        let changeType: string;\n        if (ns[0] === 3 && ns[1] === 0) {\n            changeType = 'int3'; // was int4\n        } else if (ns[0] === 2 && ns[1] === 1) {\n            changeType = 'osi31';\n        } else if (ns[0] === 2 && ns[1] === 0) {\n            changeType = 'int3';\n        } else if (ns[0] === 1 && ns[1] === 2) {\n            changeType = 'osi22';\n        } else if (ns[0] === 1 && ns[1] === 1) {\n            changeType = 'osi21';\n        } else if (ns[0] === 1 && ns[1] === 0) {\n            changeType = 'int2';\n        } else if (ns[0] === 0 && ns[1] === 3) {\n            changeType = 'osi13';\n        } else if (ns[0] === 0 && ns[1] === 2) {\n            changeType = 'osi12';\n        } else if (ns[0] === 0 && ns[1] === 1) {\n            changeType = 'osi11';\n        } else if (ns[0] === 0 && ns[1] === 0) {\n            changeType = 'none';\n        } else {\n            // sum(ns) > 3\n            changeType = 'int3';\n        }\n        console.log(changeType);\n\n        let transInfo = {\n            ...props.stnTrans,\n            type: changeType as any,\n            osi_names: changeType.includes('osi') ? [props.stnTrans.osi_names[0] || ['車站名', 'Stn Name']] : [],\n            info: props.stnTrans.info.map((inf, idx) =>\n                idx === index ? inf.slice(0, i).concat(inf.slice(i + 1)) : inf\n            ),\n        };\n        console.log(transInfo);\n        props.onUpdate(transInfo);\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={props.stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n            {['mtr', 'shmetro'].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                onClick={() => setOsiNameDialogOpened(true)}\n                            >\n                                {props.stnTrans.osi_names[0]\n                                    ? props.stnTrans.osi_names[0].join('\\r\\n')\n                                    : '車站名\\r\\nStn Name'}\n                            </Button>\n                            <OSINameDialog\n                                open={osiNameDialogOpened}\n                                osiName={props.stnTrans.osi_names[0] || ['', '']}\n                                stnId={props.stnId}\n                                onClose={() => setOsiNameDialogOpened(false)}\n                            />\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={props.stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                    <ListItem>\n                        <span>{t('stations.edit.interchange.note')}</span>\n                    </ListItem>\n                </>\n            )}\n            {rmgStyle === 'mtr' && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const classes = intChipSetStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const intInfos = param.stn_list[props.stnId].transfer.info[props.setIndex];\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: (value as string[]).concat(Array(2)) as InterchangeInfo,\n            });\n        }\n        if (key === 'name') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: Array(4).concat(value) as InterchangeInfo,\n            });\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => props.onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? (([] as any) as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as '#fff' | '#000',\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    osiName: Name;\n    onClose: () => void;\n}\n\nconst OSINameDialog = React.memo(\n    (props: OSINameDialogProps) => {\n        const { t } = useTranslation();\n\n        const { dispatch } = React.useContext(ParamContext);\n\n        const handleUpdate = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = props.osiName.map((val, i) => (i === index ? event.target.value : val)) as Name;\n            dispatch({ type: 'UPDATE_STATION_OSI_NAME', stnId: props.stnId, name: newOSIName });\n        };\n\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <NameListItems onUpdate={handleUpdate} name={props.osiName} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.open !== nextProps.open) {\n            return false;\n        } else {\n            return prevProps.osiName.toString() === nextProps.osiName.toString();\n        }\n    }\n);\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnTrans = param.stn_list[props.stnId].transfer;\n\n    const tickDirecChange = (_event: React.ChangeEvent<HTMLInputElement>, value: string) => {\n        if (value === 'l' || value === 'r')\n            dispatch({\n                type: 'UPDATE_STATION_TICK_DIREC',\n                stnId: props.stnId,\n                direction: value,\n            });\n    };\n\n    const paidAreaChange = (_event: React.ChangeEvent<{}>, checked: boolean) =>\n        dispatch({\n            type: 'UPDATE_STATION_PAID_AREA',\n            stnId: props.stnId,\n            isPaid: checked,\n        });\n\n    return React.useMemo(\n        () => (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={t('stations.edit.interchange.tickDirec.label')}\n                        secondary={\n                            <RadioGroup name=\"tick_direc\" row value={stnTrans.tick_direc} onChange={tickDirecChange}>\n                                <FormControlLabel\n                                    value=\"l\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.l')}\n                                    labelPlacement=\"end\"\n                                />\n                                <FormControlLabel\n                                    value=\"r\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label={t('stations.edit.interchange.tickDirec.r')}\n                                    labelPlacement=\"end\"\n                                />\n                            </RadioGroup>\n                        }\n                        secondaryTypographyProps={{ ['component' as any]: 'div' }}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch edge=\"end\" onChange={paidAreaChange} checked={stnTrans.paid_area} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, stnTrans.tick_direc, stnTrans.paid_area]\n    );\n};\n","var map = {\n\t\"./README.md\": [\n\t\t75,\n\t\t7,\n\t\t47\n\t],\n\t\"./beijing\": [\n\t\t43,\n\t\t9,\n\t\t1\n\t],\n\t\"./beijing.ts\": [\n\t\t43,\n\t\t9,\n\t\t1\n\t],\n\t\"./changsha\": [\n\t\t44,\n\t\t9,\n\t\t12\n\t],\n\t\"./changsha.ts\": [\n\t\t44,\n\t\t9,\n\t\t12\n\t],\n\t\"./chengdu\": [\n\t\t45,\n\t\t9,\n\t\t21\n\t],\n\t\"./chengdu.ts\": [\n\t\t45,\n\t\t9,\n\t\t21\n\t],\n\t\"./chongqing\": [\n\t\t46,\n\t\t9,\n\t\t22\n\t],\n\t\"./chongqing.ts\": [\n\t\t46,\n\t\t9,\n\t\t22\n\t],\n\t\"./dongguan\": [\n\t\t47,\n\t\t9,\n\t\t23\n\t],\n\t\"./dongguan.ts\": [\n\t\t47,\n\t\t9,\n\t\t23\n\t],\n\t\"./edinburgh\": [\n\t\t48,\n\t\t9,\n\t\t2\n\t],\n\t\"./edinburgh.ts\": [\n\t\t48,\n\t\t9,\n\t\t2\n\t],\n\t\"./foshan\": [\n\t\t49,\n\t\t9,\n\t\t3\n\t],\n\t\"./foshan.ts\": [\n\t\t49,\n\t\t9,\n\t\t3\n\t],\n\t\"./glasgow\": [\n\t\t50,\n\t\t9,\n\t\t4\n\t],\n\t\"./glasgow.ts\": [\n\t\t50,\n\t\t9,\n\t\t4\n\t],\n\t\"./guangzhou\": [\n\t\t51,\n\t\t9,\n\t\t5\n\t],\n\t\"./guangzhou.ts\": [\n\t\t51,\n\t\t9,\n\t\t5\n\t],\n\t\"./hongkong\": [\n\t\t52,\n\t\t9,\n\t\t6\n\t],\n\t\"./hongkong.ts\": [\n\t\t52,\n\t\t9,\n\t\t6\n\t],\n\t\"./kaohsiung\": [\n\t\t53,\n\t\t9,\n\t\t7\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t53,\n\t\t9,\n\t\t7\n\t],\n\t\"./london\": [\n\t\t54,\n\t\t9,\n\t\t8\n\t],\n\t\"./london.ts\": [\n\t\t54,\n\t\t9,\n\t\t8\n\t],\n\t\"./macao\": [\n\t\t55,\n\t\t9,\n\t\t9\n\t],\n\t\"./macao.ts\": [\n\t\t55,\n\t\t9,\n\t\t9\n\t],\n\t\"./newtaipei\": [\n\t\t56,\n\t\t9,\n\t\t10\n\t],\n\t\"./newtaipei.ts\": [\n\t\t56,\n\t\t9,\n\t\t10\n\t],\n\t\"./other\": [\n\t\t57,\n\t\t9,\n\t\t11\n\t],\n\t\"./other.ts\": [\n\t\t57,\n\t\t9,\n\t\t11\n\t],\n\t\"./sanfrancisco\": [\n\t\t58,\n\t\t9,\n\t\t13\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t58,\n\t\t9,\n\t\t13\n\t],\n\t\"./seoul\": [\n\t\t59,\n\t\t9,\n\t\t14\n\t],\n\t\"./seoul.ts\": [\n\t\t59,\n\t\t9,\n\t\t14\n\t],\n\t\"./shanghai\": [\n\t\t60,\n\t\t9,\n\t\t15\n\t],\n\t\"./shanghai.ts\": [\n\t\t60,\n\t\t9,\n\t\t15\n\t],\n\t\"./shenzhen\": [\n\t\t61,\n\t\t9,\n\t\t16\n\t],\n\t\"./shenzhen.ts\": [\n\t\t61,\n\t\t9,\n\t\t16\n\t],\n\t\"./taipei\": [\n\t\t62,\n\t\t9,\n\t\t17\n\t],\n\t\"./taipei.ts\": [\n\t\t62,\n\t\t9,\n\t\t17\n\t],\n\t\"./tokyo\": [\n\t\t63,\n\t\t9,\n\t\t18\n\t],\n\t\"./tokyo.ts\": [\n\t\t63,\n\t\t9,\n\t\t18\n\t],\n\t\"./toronto\": [\n\t\t64,\n\t\t9,\n\t\t19\n\t],\n\t\"./toronto.ts\": [\n\t\t64,\n\t\t9,\n\t\t19\n\t],\n\t\"./xi'an\": [\n\t\t65,\n\t\t9,\n\t\t20\n\t],\n\t\"./xi'an.ts\": [\n\t\t65,\n\t\t9,\n\t\t20\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 69;\nmodule.exports = webpackAsyncContext;","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>漢</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n};\n\nexport default NameListItems;\n","export const cityList: CityEntry[] = [\n    {\n        id: 'beijing',\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: 'changsha',\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: 'chengdu',\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: 'chongqing',\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: 'dongguan',\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: 'edinburgh',\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: 'foshan',\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: 'glasgow',\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: 'guangzhou',\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: 'hongkong',\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: 'kaohsiung',\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: 'london',\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: 'macao',\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: 'newtaipei',\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: 'sanfrancisco',\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: 'seoul',\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: 'shanghai',\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: 'shenzhen',\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: 'taipei',\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            'zh-Hans': '台北',\n            'zh-Hant': '臺北',\n        },\n    },\n    {\n        id: 'tokyo',\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: 'toronto',\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: 'xian',\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: 'other',\n        country: 'UN',\n        name: {\n            en: 'Customise (Beta)',\n            'zh-Hans': '自定义 (Beta)',\n            'zh-Hant': '自訂 (Beta)',\n        },\n    },\n];\n","import React, { useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    Button,\n    makeStyles,\n    createStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { cityList } from './data';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 28,\n            width: 28,\n            minWidth: 0,\n            marginRight: 8,\n            border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as LineEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `./colours/${theme[0]}`).then(\n              module => module.default as LineEntry[]\n          )\n        : Promise.resolve([] as LineEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            } else if (theme[0] === 'other') {\n                // mutate original list\n                listPromise.then(data => {\n                    setList(\n                        data.map((l, i) => (i === 0 ? { ...l, colour: theme[2], fg: theme[3] || '#fff' } : { ...l }))\n                    );\n                });\n            } else {\n                listPromise.then(data => setList(data));\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: [string, string, string, '#000' | '#fff'];\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport default React.memo(\n    function ThemeItems(props: ColourDialogProps) {\n        // console.log('rerender');\n        const classes = useStyles();\n        const { t, i18n } = useTranslation();\n\n        const [hexTemp, setHexTemp] = React.useState(props.theme[2]);\n\n        const cityChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = props.theme.map((val, idx) => (idx === 0 ? event.target.value : val));\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for fetching line list of current city\n        const lineList = useLineList(props.theme);\n\n        // Hook for updating props.theme when lineList changed\n        useEffect(\n            () => {\n                if (lineList.length === 0) return; // initialising, ignore\n                if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n                let newTheme = [props.theme[0], lineList[0].id, lineList[0].colour, lineList[0].fg || '#fff'];\n                props.onUpdate('theme', newTheme);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [lineList]\n        );\n\n        const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let line = event.target.value;\n            let newTheme = [\n                props.theme[0],\n                line,\n                lineList.filter(l => l.id === line)[0].colour,\n                lineList.filter(l => l.id === line)[0].fg || '#fff',\n            ];\n            props.onUpdate('theme', newTheme);\n        };\n\n        // Hook for updating hexTemp when props.hex changed\n        // which means valid hex has been updated to props\n        useEffect(\n            () => {\n                setHexTemp(props.theme[2]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.theme[2]]\n        );\n\n        const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let rgb = event.target.value;\n            setHexTemp(rgb);\n\n            if (props.theme[0] !== 'other') {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = ['other', props.theme[1], rgb, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? rgb : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            }\n        };\n\n        const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let hex = event.target.value;\n            if (hex.match(/^#[0-9a-fA-f]{0,6}$/) === null) return;\n            setHexTemp(hex);\n\n            if (props.theme[0] !== 'other') {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify theme city and props.hex\n                    let newTheme = ['other', props.theme[1], hex, props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                } else {\n                    // if hex not valid, modify theme city only\n                    let newTheme = ['other', props.theme[1], props.theme[2], props.theme[3]];\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (along with selection)\n                    // then line will be updated by hook\n                }\n            } else {\n                if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                    // if hex valid, modify props.hex\n                    let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                    props.onUpdate('theme', newTheme);\n                    // then lineList will be updated by hook (actually only hex is changed)\n                } else {\n                    // if hex not valid, do nothing\n                }\n            }\n        };\n\n        const fgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newTheme = ['other', 'other', props.theme[2], event.target.value];\n            props.onUpdate('theme', newTheme);\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>location_city</Icon>\n                    </ListItemIcon>\n                    <CitySelect value={props.theme[0]} onChange={cityChange} />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>subway</Icon>\n                    </ListItemIcon>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.line')}\n                        onChange={lineChange}\n                        value={props.theme[1]}\n                        disabled={props.theme[0] === 'other'}\n                    >\n                        {lineList.map(l => (\n                            <MenuItem key={l.id} value={l.id}>\n                                <span\n                                    className={classes.menuItemSpan}\n                                    style={{\n                                        backgroundColor: l.colour,\n                                        color: l.fg || '#fff',\n                                    }}\n                                >\n                                    {getTransText2(l.name, i18n.languages)}\n                                </span>\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </ListItem>\n                <ListItem>\n                    <div className={classes.buttonContainer}>\n                        <input\n                            type=\"color\"\n                            id=\"input-color\"\n                            value={props.theme[2]}\n                            onChange={colourChange}\n                            className={classes.inputColour}\n                        />\n                        <label htmlFor=\"input-color\">\n                            <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                                <Button\n                                    className={classes.button}\n                                    style={{\n                                        backgroundColor: props.theme[2],\n                                        borderColor: props.theme[3] || '#fff',\n                                    }}\n                                    variant=\"contained\"\n                                    component=\"span\"\n                                >\n                                    {' '}\n                                </Button>\n                            </Tooltip>\n                        </label>\n                    </div>\n                    <TextField\n                        error={!hexTemp?.match(/^#[0-9a-fA-f]{6}$/g)}\n                        style={{ width: '100%', marginRight: 5 }}\n                        variant=\"outlined\"\n                        label={t('colour.colour')}\n                        onChange={hexChange}\n                        value={hexTemp?.toUpperCase()}\n                    ></TextField>\n                    <TextField\n                        select\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('colour.fg')}\n                        onChange={fgChange}\n                        value={props.theme[3] || '#fff'}\n                    >\n                        <MenuItem key=\"#fff\" value=\"#fff\">\n                            {t('colour.fgWhite')}\n                        </MenuItem>\n                        <MenuItem key=\"#000\" value=\"#000\">\n                            {t('colour.fgBlack')}\n                        </MenuItem>\n                    </TextField>\n                </ListItem>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nconst CitySelect = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages)}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <TextField\n            select\n            style={{ width: '100%' }}\n            variant=\"outlined\"\n            label={t('colour.city')}\n            value={props.value}\n            onChange={props.onChange}\n        >\n            {items}\n        </TextField>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (['zh-CN', 'zh-Hans'].includes(i18n.language) && props.code === 'TW') codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    Paper,\n    Icon,\n    InputBase,\n    makeStyles,\n    DialogActions,\n    Button,\n    createStyles,\n} from '@material-ui/core';\n\nimport ThemeListItems from './theme-items';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        paperRoot: {\n            width: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n    })\n);\n\ninterface ColourDialogProps {\n    open: boolean;\n    theme: [string, string, string, '#000' | '#fff'];\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst ColourDialog = React.memo(\n    (props: ColourDialogProps) => {\n        const classes = useStyles();\n        const { t } = useTranslation();\n\n        const nameChange = (value: string, index: number) => {\n            let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n            props.onUpdate('name', newName);\n            // props.onUpdate('all', [...props.theme, ...newName]);\n        };\n\n        const handleClose = () => {\n            props.onClose();\n        };\n\n        return (\n            <Dialog onClose={handleClose} open={props.open}>\n                <DialogTitle>{t('colour.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem className={classes.listItemPaper}>\n                            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                                <Icon className={classes.iconRoot}>edit</Icon>\n                                <InputBase\n                                    value={props.lineName[0]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputZH,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 0)}\n                                    autoFocus\n                                />\n                                <InputBase\n                                    value={props.lineName[1]}\n                                    classes={{\n                                        root: classes.inputBaseRoot,\n                                        input: classes.inputBaseInputEN,\n                                    }}\n                                    style={{ color: props.theme[3] || '#fff' }}\n                                    onChange={e => nameChange(e.target.value, 1)}\n                                />\n                            </Paper>\n                        </ListItem>\n                        <ThemeListItems theme={props.theme} onUpdate={props.onUpdate} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.open === nextProps.open &&\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.theme.toString() === nextProps.theme.toString()\n);\n\nexport default ColourDialog;\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;"],"sourceRoot":""}