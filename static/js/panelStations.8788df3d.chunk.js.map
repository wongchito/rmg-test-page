{"version":3,"sources":["panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/chip-set.tsx","panels/stations/delete-diags.tsx","panels/stations/auto-num-diag.tsx","panels/stations/fabs.tsx","panels/stations/panel.tsx","panels/stations/index.ts"],"names":["getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","stnId","numsZH","split","numsEN","map","char","parseInt","join","React","memo","props","t","useTranslation","rmgStyle","useContext","CanvasContext","ParamContext","param","dispatch","tpo","stnList","stn_list","allLocs","centre","upper","lower","newupper","newlower","useState","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","Boolean","indexOf","handleClick","action","onClose","newId","includes","newInfo","name","secondaryName","num","services","branch","left","right","transfer","info","type","tick_direc","paid_area","osi_names","facility","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","lineend","addStation","open","dividers","select","style","width","variant","label","onChange","e","target","value","key","formatStnName","idx","disabled","display","onClick","color","autoFocus","prevProps","nextProps","NameTab","lazy","InterchangeTab","BranchTab","MoreTab","useStyles","makeStyles","createStyles","tab","padding","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","Dialog","stnInfo","tabIndex","setTabIndex","classes","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","tabNav","indicatorColor","textColor","_","val","scrollButtons","i","icon","className","interchangeUpdate","transInfo","updatedValue","inf","values","concat","component","role","Suspense","fallback","stnTrans","onUpdate","root","backgroundColor","palette","background","paper","borderRadius","boxShadow","shadows","rootSize","margin","rootSizeTablet","rootSizeMobile","stnChipText","textAlign","stnChipTextZH","fontSize","fontWeight","lineHeight","stnChipTextEN","whiteSpace","overflow","addChipLabel","stnChipLabel","StationChipSet","isTablet","isMobile","replace","onSelection","getDeps","reduce","acc","cur","k","o","a","c","StationDeleteDialog","isError","setIsError","isLastMainBranchStn","id","console","log","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","current_stn_idx","newCurrentId","filter","i18nKey","ErrorDialog","AutoNumDialog","branches","branch0","fab","position","spacing","bottom","StationFabs","fabEl","setFabEl","handleAction","onAction","title","aria-label","anchorEl","primary","PanelStations","stationSelected","setStationSelected","isSnackBarOpen","setIsSnackBarOpen","isAddDialogOpen","setIsAddDialogOpen","isEditDialogOpen","setIsEditDialogOpen","isDeleteDialogOpen","setIsDeleteDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","snackBarClose","addStationClick","r","autoHideDuration","message","Fragment","size","Panel"],"mappings":"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","file":"static/js/panelStations.8788df3d.chunk.js","sourcesContent":["import { getYShareMTR } from '../../methods';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: { [stnId: string]: StationInfo }\n): [string, StationDict] => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        secondaryName: false,\n        num: '00',\n        services: ['local'],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: [],\n        },\n        transfer: {\n            info: [[]],\n            type: 'none',\n            tick_direc: 'r',\n            paid_area: true,\n            osi_names: [],\n        },\n        facility: '',\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = ['through', newId];\n            newStnList[end].branch.right = ['through', newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = ['through', newId];\n            newStnList[end].branch.left = ['through', newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [\n        newId,\n        {\n            ...newStnList,\n            [newId]: newInfo,\n        },\n    ];\n};\n\nconst getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = '癸甲乙丙丁戊己庚辛壬日月金木水火土竹戈十大中一弓人心手口尸廿山女田難卜重'.split('');\n    let numsEN = 'Zero One Two Three Four Five Six Seven Eight Nine Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu'.split(\n        ' '\n    );\n    return [\n        stnId\n            .split('')\n            .map(char => numsZH[parseInt(char, 36)])\n            .join(''),\n        stnId\n            .split('')\n            .map(char => numsEN[parseInt(char, 36)])\n            .join(' '),\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time.\n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: StationDict) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length === 2 && children.length === 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length === 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length === 2 || children.length === 2) {\n        console.log('this case');\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length === 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length === 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length === 2 && newStnList[children[0]].parents.length === 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        });\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n","import React, { useContext, useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\nimport { CanvasContext, ParamContext } from '../../context';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const { rmgStyle } = useContext(CanvasContext);\n        const { param, dispatch, tpo } = useContext(ParamContext);\n        const stnList = param.stn_list;\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    stnList\n                );\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.prep')}\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                            >\n                                <MenuItem key=\"before\" value=\"before\">\n                                    {t('stations.add.before')}\n                                </MenuItem>\n                                <MenuItem key=\"after\" value=\"after\">\n                                    {t('stations.add.after')}\n                                </MenuItem>\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.pivot')}\n                                onChange={e => setPivot(e.target.value)}\n                                value={pivot}\n                            >\n                                {tpo.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.loc')}\n                                onChange={e => setLoc(e.target.value)}\n                                value={loc}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <MenuItem key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.end')}\n                                onChange={e => setEnd(e.target.value)}\n                                value={end}\n                            >\n                                {endList.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnList = param.stn_list;\n    const stnInfo = stnList[props.stnId];\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    const interchangeUpdate = (transInfo: StationTransfer) => {\n        let updatedValue = {\n            ...transInfo,\n            info: transInfo.info.map(inf =>\n                inf.map(i =>\n                    Object.values(i).length === 0\n                        ? ((param.theme.concat(['轉綫', 'Line']) as unknown) as InterchangeInfo)\n                        : i\n                )\n            ),\n        };\n\n        // window.myLine.updateStnTransfer2(props.stnId, updatedValue);\n        dispatch({\n            type: 'UPDATE_STATION_TRANSFER',\n            stnId: props.stnId,\n            transfer: updatedValue,\n        });\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={fullScreen}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {tabNav}\n                <Typography component=\"div\" role=\"tabpanel\">\n                    <React.Suspense fallback={<CircularProgress />}>\n                        {(idx => {\n                            switch (idx) {\n                                case 0:\n                                    return <NameTab stnId={props.stnId} />;\n                                case 1:\n                                    return (\n                                        <InterchangeTab\n                                            stnTrans={stnInfo.transfer}\n                                            onUpdate={interchangeUpdate}\n                                            stnId={props.stnId}\n                                        />\n                                    );\n                                case 2:\n                                    return <BranchTab stnId={props.stnId} />;\n                                case 3:\n                                    return <MoreTab stnId={props.stnId} />;\n                            }\n                        })(tabIndex)}\n                    </React.Suspense>\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import Dialog from './dialog';\n\nexport default Dialog;","import React, { useContext } from 'react';\nimport { Chip, makeStyles, Avatar, createStyles, useMediaQuery } from '@material-ui/core';\nimport { CanvasContext, ParamContext } from '../../context';\n\nconst useStyles = makeStyles(theme => {\n    return createStyles({\n        root: {\n            backgroundColor: theme.palette.background.paper,\n            height: 55,\n            borderRadius: 8,\n            boxShadow: theme.shadows[1],\n        },\n        rootSize: {\n            margin: 8,\n            width: 'calc((100% - 96px) / 6)',\n        },\n        rootSizeTablet: {\n            margin: 6,\n            width: 'calc((100% - 48px) / 4)',\n        },\n        rootSizeMobile: {\n            margin: 6,\n            width: 'calc((100% - 24px) / 2)',\n        },\n        stnChipText: {\n            display: 'block',\n            textAlign: 'center',\n        },\n        stnChipTextZH: {\n            fontSize: 18,\n            fontWeight: 500,\n            lineHeight: '1.2rem',\n        },\n        stnChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre',\n            overflow: 'hidden',\n        },\n        addChipLabel: {\n            fontWeight: 500,\n            fontSize: '1rem',\n            lineHeight: '1.2rem',\n            textAlign: 'center',\n            width: '100%',\n        },\n        stnChipLabel: {\n            width: '100%',\n        },\n    });\n});\n\ninterface StationChipSetProps {\n    stnList: {\n        [stnId: string]: StationInfo;\n    };\n    onSelection: (stnId: string) => () => void;\n    addStationClick: () => void;\n}\n\nconst StationChipSet = React.memo(\n    (props: StationChipSetProps) => {\n        const { rmgStyle } = useContext(CanvasContext);\n        const { tpo } = useContext(ParamContext);\n\n        const isTablet = useMediaQuery('(max-width: 839px) and (min-width: 480px)');\n        const isMobile = useMediaQuery('(max-width: 480px)');\n        const classes = useStyles();\n\n        return (\n            <div>\n                {tpo.map((stnId, i) => {\n                    let label = (\n                        <span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextZH}`}>\n                                {props.stnList[stnId]?.name[0] || ''}\n                            </span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextEN}`}>\n                                {props.stnList[stnId]?.name[1].replace('\\\\', '\\r\\n') || ''}\n                            </span>\n                        </span>\n                    );\n                    return (\n                        <Chip\n                            key={stnId}\n                            icon={\n                                rmgStyle !== 'gzmtr' ? (\n                                    <></>\n                                ) : (\n                                    <Avatar style={{ backgroundColor: 'unset' }}>\n                                        {props.stnList[stnId]?.num || '00'}\n                                    </Avatar>\n                                )\n                            }\n                            label={label}\n                            onClick={props.onSelection(stnId)}\n                            classes={{ label: classes.stnChipLabel }}\n                            className={`${classes.root} ${\n                                isMobile ? classes.rootSizeMobile : isTablet ? classes.rootSizeTablet : classes.rootSize\n                            }`}\n                        />\n                    );\n                })}\n            </div>\n        );\n    },\n    (prevProps, nextProps) => {\n        const getDeps = (stnList: { [stnId: string]: StationInfo }) =>\n            Object.keys(stnList).reduce(\n                (acc, cur) =>\n                    acc +\n                    cur +\n                    ((...k: (keyof StationInfo)[]) => (o: StationInfo) =>\n                        k.reduce((a, c) => a + JSON.stringify(o[c]), ''))(\n                        'name',\n                        'num'\n                    )(stnList[cur]),\n                ''\n            );\n\n        return getDeps(prevProps.stnList) === getDeps(nextProps.stnList);\n    }\n);\n\nexport default StationChipSet;\n","import React, { useContext, useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { removeStation } from './utils';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = useContext(ParamContext);\n    const stnList = param.stn_list;\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            let res = removeStation(props.stnId, stnList);\n            if (res === false) {\n                setIsError(true);\n            } else {\n                if (param.current_stn_idx === props.stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch({ type: 'SET_CURRENT_STATION', stnId: newCurrentId });\n                }\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n            }\n        }\n        props.onClose();\n    };\n    return (\n        <>\n            <Dialog open={props.open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n\n    const { dispatch, branches } = React.useContext(ParamContext);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch({ type: 'UPDATE_STATION_NUM', stnId, num });\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Fab,\n    Tooltip,\n    Icon,\n    Menu,\n    MenuItem,\n    createStyles,\n    makeStyles,\n    ListItemText,\n    ListItemIcon,\n} from '@material-ui/core';\nimport { CanvasContext } from '../../context';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const { rmgStyle } = useContext(CanvasContext);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip')} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === 'gzmtr' && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import React, { useState, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Snackbar, Button, IconButton, Icon } from '@material-ui/core';\n\nimport { formatStnName } from '../../utils';\n\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationChipSet from './chip-set';\nimport StationDeleteDialog from './delete-diags';\nimport AutoNumDialog from './auto-num-diag';\nimport StationFabs from './fabs';\nimport { CanvasContext, ParamContext } from '../../context';\n\nconst PanelStations = () => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n    const stnList = param.stn_list;\n\n    const [stationSelected, setStationSelected] = useState('');\n    const [isSnackBarOpen, setIsSnackBarOpen] = useState(false);\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const stnChipSetSelection = (stnId: string) => () => {\n        setStationSelected(stnId);\n        setIsSnackBarOpen(true);\n    };\n\n    const snackBarClose = (action: string) => {\n        if (action === 'clickaway') return;\n        setIsSnackBarOpen(false);\n        if (action === 'current') {\n            dispatch({ type: 'SET_CURRENT_STATION', stnId: stationSelected });\n        } else if (action === 'edit') {\n            setIsEditDialogOpen(true);\n        } else if (action === 'delete') {\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStationSelected(action);\n            setIsEditDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch({ type: 'REVERSE_STATIONS' });\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <StationChipSet\n                stnList={stnList}\n                onSelection={stnChipSetSelection}\n                addStationClick={() => setIsAddDialogOpen(true)}\n            />\n            <Snackbar\n                open={isSnackBarOpen}\n                onClose={(e, r) => snackBarClose(r)}\n                autoHideDuration={5000}\n                message={formatStnName(stnList[stationSelected], rmgStyle)}\n                action={\n                    <React.Fragment>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('current')}>\n                            {t('stations.current')}\n                        </Button>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('edit')}>\n                            {t('stations.edit.button')}\n                        </Button>\n                        <Button color=\"secondary\" size=\"small\" onClick={() => snackBarClose('delete')}>\n                            {t('stations.remove.button')}\n                        </Button>\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            onClick={() => snackBarClose('close')}\n                        >\n                            <Icon fontSize=\"small\">close</Icon>\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationEditDialog\n                open={isEditDialogOpen}\n                onClose={() => setIsEditDialogOpen(false)}\n                stnId={stationSelected}\n            />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stationSelected}\n            />\n\n            {rmgStyle === 'gzmtr' && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </div>\n    );\n};\n\nexport default PanelStations;\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}