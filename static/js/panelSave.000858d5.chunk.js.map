{"version":3,"sources":["panels/save/upload-item.tsx","panels/save/export-diag/utils.ts","panels/save/export-diag/preview-diag.tsx","panels/save/export-diag/index.ts","panels/save/export-diag/dialog.tsx","panels/save/panel.tsx","panels/save/index.ts"],"names":["UploadLi","t","useTranslation","React","useState","open","setOpen","importedParam","setImportedParam","ListItem","button","component","htmlFor","ListItemIcon","Icon","ListItemText","primary","type","accept","style","display","id","onChange","event","console","log","target","files","Promise","resolve","reader","FileReader","onloadend","readAsText","then","e","JSON","parse","result","param","ImportDialog","onClose","action","document","getElementById","value","localStorage","rmgParam","stringify","window","location","reload","content","props","Dialog","DialogTitle","DialogContent","dividers","DialogContentText","whiteSpace","Object","keys","length","stn_list","entries","map","x","includes","name","join","trim","replace","DialogActions","Button","onClick","color","autoFocus","test","svgEl","svgW","viewBox","baseVal","width","svgH","height","setAttribute","toString","canvas","querySelectorAll","Number","ctx","getContext","clearRect","forEach","el","getComputedStyle","fontSize","elStyle","fontFamily","fill","dominantBaseline","textAnchor","removeAttribute","img","Image","onload","setTimeout","drawImage","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","saveAs","toDataURL","Date","toISOString","addEventListener","src","btoa","unescape","encodeURIComponent","outerHTML","setSvgEl","isLoaded","setIsLoaded","contentEl","key","querySelector","getPropertyValue","match","thisSVGWidth","thisSVGHeight","MAX_WIDTH","Math","min","innerWidth","MAX_HEIGHT","innerHeight","scaleFactor","elem","cloneNode","setProperty","tag","Array","from","filter","l","sheet","cssRules","rule","cssText","txt","s","innerText","prepend","urlParams","get","getBase64FontFace","response","a","all","uris","fonts","ready","handleClose","current","maxWidth","dangerouslySetInnerHTML","__html","ref","disabled","ExportDialog","CanvasContext","canvasAvailable","canvasToShown","previewDialogOpened","setPreviewDialogOpened","setCanvas","List","c","TemplateDialog","lazy","allStyles","gzmtr","mtr","shmetro","allLangs","en","SaveLists","i18n","setStyle","isTempDialogOpen","setIsTempDialogOpen","isExportDialogOpen","setIsExportDialogOpen","setIsPreviewDialogOpen","setPreviewDialogCanvas","isStyleDialogOpen","setIsStyleDialogOpen","isLangDialogOpen","setIsLangDialogOpen","Card","Divider","secondary","getTransText2","languages","Suspense","fallback","LinearProgress","StyleDialog","set","gtag","event_category","event_label","LangDialog","lang","language","changeLanguage","title","documentElement","Panel","TranslatedSaveLists","withTranslation","Grid","container","spacing","justify","alignItems","item","xs","sm","md","lg"],"mappings":"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","file":"static/js/panelSave.000858d5.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\n\nexport default function UploadLi() {\n    const { t } = useTranslation();\n\n    const [open, setOpen] = React.useState(false);\n    const [importedParam, setImportedParam] = React.useState({} as RMGParam);\n\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.files![0]);\n        let filePromise = new Promise((resolve: (event: ProgressEvent<FileReader>) => void) => {\n            let reader = new FileReader();\n            reader.onloadend = resolve;\n            reader.readAsText(event.target.files![0]);\n        });\n        filePromise\n            .then(e => JSON.parse(e.target!.result as string))\n            .then(param => {\n                setImportedParam(param);\n                setOpen(true);\n            });\n    };\n\n    const handleClose = (action: string) => () => {\n        if (action === 'close') {\n            (document.getElementById('upload-param') as HTMLInputElement).value = '';\n            setOpen(false);\n            return;\n        }\n        if (action === 'accept') {\n            localStorage.rmgParam = JSON.stringify(importedParam);\n            window.location.reload(true);\n        }\n    };\n\n    return (\n        <>\n            <ListItem button component=\"label\" htmlFor=\"upload-param\">\n                <ListItemIcon>\n                    <Icon>folder_open</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('file.open.button')} />\n            </ListItem>\n            <input\n                type=\"file\"\n                accept=\"application/json\"\n                style={{ display: 'none' }}\n                id=\"upload-param\"\n                onChange={handleUpload}\n            />\n            <ImportDialog open={open} onClose={handleClose} content={importedParam} />\n        </>\n    );\n}\n\ninterface ImportDialogProps {\n    onClose: (action: string) => () => void;\n    open: boolean;\n    content: {} | RMGParam;\n}\n\nfunction ImportDialog(props: ImportDialogProps) {\n    const { t } = useTranslation();\n\n    const describeParams = (param: RMGParam) => {\n        return `Number of stations: ${Object.keys(param.stn_list).length - 2}\n                ${Object.entries(param.stn_list)\n                    .map(x => (['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')))\n                    .join('\\r\\n')\n                    .trim()\n                    .replace(/\\\\/, ' ')}`;\n    };\n\n    return (\n        <Dialog onClose={props.onClose('close')} open={props.open}>\n            <DialogTitle>Your Configuration</DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText style={{ whiteSpace: 'pre-line' }}>\n                    {Object.keys(props.content).length === 0 ? 'empty' : describeParams(props.content as RMGParam)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose('close')} color=\"primary\">\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={props.onClose('accept')} color=\"primary\" autoFocus>\n                    Import\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export function test(svgEl: SVGSVGElement) {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    svgEl.setAttribute('width', svgW.toString());\n    svgEl.setAttribute('height', svgH.toString());\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * 2.5;\n    canvas.height = Number(svgH) * 2.5;\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl.querySelectorAll('.rmg-name__zh.IntName').forEach(el => el.setAttribute('font-size', '10px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--osi').forEach(el => el.setAttribute('font-size', '9px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.IntName').forEach(el => el.setAttribute('font-size', '7px'));\n\n    svgEl\n        .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n        .forEach(el => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        el.removeAttribute('class');\n    });\n\n    var img = new Image();\n    img.onload = function() {\n        setTimeout(() => {\n            ctx.drawImage(img, 0, 0, Number(svgW) * 2.5, Number(svgH) * 2.5);\n            saveAs(canvas.toDataURL('image/png'), 'rmg.' + new Date().toISOString() + '.png');\n        }, 2000);\n    };\n    // img.onloadend = () => {\n    //     console.log('img loaded')\n    // }\n    img.addEventListener('loadend', () => {\n        console.log('img loaded');\n    });\n    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n}\n\nfunction saveAs(uri: string, filename: string) {\n    var link = document.createElement('a');\n\n    if (typeof link.download === 'string') {\n        link.href = uri;\n        link.download = filename;\n        //Firefox requires the link to be in the body\n        document.body.appendChild(link);\n        //simulate click\n        link.click();\n        //remove the link when done\n        document.body.removeChild(link);\n    } else {\n        window.open(uri);\n    }\n}\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@material-ui/core';\n\nimport { test } from './utils';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n    canvas: string;\n}\n\nexport default (props: Props) => {\n    const { t } = useTranslation();\n\n    const [svgEl, setSvgEl] = React.useState((document.createElement('svg') as Element) as SVGSVGElement);\n    const [isLoaded, setIsLoaded] = React.useState(false);\n\n    const contentEl = React.useRef<HTMLDivElement | null>(null);\n\n    React.useEffect(() => {\n        if (props.canvas === '') {\n            setSvgEl((document.createElement('svg') as Element) as SVGSVGElement);\n            setIsLoaded(false);\n            return;\n        }\n        let [thisSVGWidth, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n            .map(\n                key =>\n                    (document.querySelector(`svg#${props.canvas}`) as SVGSVGElement).style\n                        .getPropertyValue(key)\n                        .match(/\\d+/g)![0]\n            )\n            .map(Number);\n\n        let MAX_WIDTH = Math.min(window.innerWidth, 1412) - 64 - 24 * 2;\n        let MAX_HEIGHT = window.innerHeight - 64 - 64 - 52 - 8 * 2;\n        let scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);\n\n        let elem = document.querySelector(`svg#${props.canvas}`)!.cloneNode(true) as SVGSVGElement;\n        // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n        elem.setAttribute('height', (thisSVGHeight * scaleFactor).toString());\n        elem.style.setProperty('all', 'initial');\n\n        let cssTxt = ['share', props.canvas].map(tag => {\n            return Array.from(\n                (Array.from(document.querySelectorAll('link')).filter(l => l.id === 'css_' + tag)[0]\n                    ?.sheet as CSSStyleSheet).cssRules\n            )\n                .map(rule => rule.cssText)\n                .join(' ');\n        });\n\n        cssTxt.forEach(txt => {\n            let s = document.createElement('style');\n            s.innerText = txt;\n            elem.prepend(s);\n        });\n\n        if (window.urlParams.get('style') === 'mtr') {\n            import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper').then(({ getBase64FontFace }) => {\n                getBase64FontFace(elem).then(async response => {\n                    let uris = await Promise.all(response);\n                    let s = document.createElement('style');\n                    s.innerText = uris.join(' ');\n                    elem.prepend(s);\n\n                    setSvgEl(elem);\n                    document.fonts.ready.then(() => setIsLoaded(true));\n                });\n            });\n        } else {\n            setSvgEl(elem);\n            setIsLoaded(true);\n        }\n    }, [props.canvas]);\n\n    const handleClose = (action: string) => () => {\n        let svgEl = contentEl.current!.querySelector('svg') as SVGSVGElement;\n        if (action === 'png') {\n            test(svgEl);\n        } else if (action === 'svg') {\n            var link = document.createElement('a');\n            link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n            link.download = 'rmg.' + new Date().toISOString() + '.svg';\n            link.click();\n        }\n        props.onClose('close');\n    };\n\n    return (\n        <Dialog onClose={handleClose('close')} open={props.open} maxWidth={false}>\n            <DialogTitle>{t('file.preview.title')}</DialogTitle>\n            <DialogContent dangerouslySetInnerHTML={{ __html: svgEl.outerHTML }} ref={contentEl} />\n            <DialogActions>\n                <Button onClick={handleClose('close')} color=\"primary\" autoFocus>\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={handleClose('png')} color=\"primary\" disabled={!isLoaded}>\n                    {t('file.preview.png')}\n                </Button>\n                <Button onClick={handleClose('svg')} color=\"primary\" disabled={!isLoaded}>\n                    {t('file.preview.svg')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import ExportDialog from './dialog';\n\nexport default ExportDialog;","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, List, ListItem, ListItemText } from '@material-ui/core';\n\nimport PreviewDialog from './preview-diag';\nimport { CanvasContext } from '../../../context';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n}\n\nexport default function ExportDialog(props: Props) {\n    const { t } = useTranslation();\n\n    const { canvasAvailable, canvasToShown } = React.useContext(CanvasContext);\n\n    const [previewDialogOpened, setPreviewDialogOpened] = React.useState(false);\n    const [canvas, setCanvas] = React.useState('');\n\n    const handleClose = (action: string) => () => {\n        if (action !== 'close') {\n            setPreviewDialogOpened(true);\n            setCanvas(action);\n        }\n        props.onClose('close');\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setPreviewDialogOpened(false);\n            setCanvas('');\n        }\n    };\n\n    return (\n        <>\n            <Dialog onClose={handleClose('close')} open={props.open}>\n                <DialogTitle>{t('file.export.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {(canvasToShown === 'all' ? canvasAvailable : [canvasToShown]).map(c => (\n                            <ListItem button key={c} onClick={handleClose(c)}>\n                                <ListItemText primary={t('file.export.' + c)} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n            </Dialog>\n\n            <PreviewDialog open={previewDialogOpened} onClose={previewDialogClose} canvas={canvas} />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nimport {\n    Grid,\n    Card,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Divider,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    LinearProgress,\n} from '@material-ui/core';\n\nimport { getTransText2 } from '../../utils';\n\n// import TemplateDialog from './template-diag';\nimport UploadListItem from './upload-item';\nimport ExportDialog from './export-diag';\n\nconst TemplateDialog = React.lazy(() => import(/* webpackChunkName: \"panelSaveTemplateDialog\" */ './template-diag'));\n\nexport default function PanelSave() {\n    let TranslatedSaveLists = withTranslation()(SaveLists);\n\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={8} md={6} lg={4}>\n                <TranslatedSaveLists />\n            </Grid>\n        </Grid>\n    );\n}\n\nconst allStyles = {\n    gzmtr: 'Guangzhou Metro',\n    mtr: 'MTR',\n    shmetro: 'Shanghai Metro (Alpha)',\n};\n\nconst allLangs = {\n    en: 'English',\n    'zh-Hans': '中文（简体）',\n    'zh-HK': '中文（香港）',\n};\n\nconst SaveLists = () => {\n    const { t, i18n } = useTranslation();\n\n    const [style, setStyle] = useState(window.urlParams.get('style'));\n    const [isTempDialogOpen, setIsTempDialogOpen] = useState(false);\n    const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n    const [isPreviewDialogOpen, setIsPreviewDialogOpen] = useState(false);\n    const [previewDialogCanvas, setPreviewDialogCanvas] = useState('');\n    const [isStyleDialogOpen, setIsStyleDialogOpen] = useState(false);\n    const [isLangDialogOpen, setIsLangDialogOpen] = useState(false);\n\n    const saveClick = () => {\n        let link = document.createElement('a');\n        link.href = 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(localStorage.rmgParam)));\n        link.download = 'rmg.param.' + new Date().toISOString() + '.json';\n        link.click();\n    };\n\n    const exportDialogClose = (action: string) => {\n        if (action === 'close') {\n            setIsExportDialogOpen(false);\n            return;\n        }\n        setIsExportDialogOpen(false);\n        setPreviewDialogCanvas(action);\n        setIsPreviewDialogOpen(true);\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setIsPreviewDialogOpen(false);\n            setPreviewDialogCanvas('');\n        }\n    };\n\n    const styleDialogClose = (action: string) => {\n        if (action === 'close' || action === style) {\n            setIsStyleDialogOpen(false);\n        } else {\n            setStyle(action);\n            setIsStyleDialogOpen(false);\n\n            window.urlParams.set('style', action);\n            window.gtag('event', 'set', {\n                event_category: 'style',\n                event_label: action,\n            });\n            window.location.href = '?' + window.urlParams.toString();\n        }\n    };\n\n    return (\n        <div>\n            <Card>\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsTempDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>note_add</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.new.button')} />\n                    </ListItem>\n                    <UploadListItem />\n                    <ListItem button onClick={saveClick}>\n                        <ListItemIcon>\n                            <Icon>save</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.save')} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsExportDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>cloud_download</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.export.button')} />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsStyleDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>style</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.style.button')} secondary={t('file.style.' + style)} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsLangDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>translate</Icon>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t('file.lang.button')}\n                            secondary={getTransText2(allLangs, i18n.languages)}\n                        />\n                    </ListItem>\n                </List>\n            </Card>\n\n            <React.Suspense fallback={<LinearProgress />}>\n                <TemplateDialog open={isTempDialogOpen} onClose={() => setIsTempDialogOpen(false)} />\n            </React.Suspense>\n\n            <ExportDialog open={isExportDialogOpen} onClose={exportDialogClose} />\n\n            <StyleDialog open={isStyleDialogOpen} onClose={styleDialogClose} />\n            <LangDialog open={isLangDialogOpen} onClose={() => setIsLangDialogOpen(false)} />\n        </div>\n    );\n};\n\ninterface StyleDialogProps {\n    onClose: (style: string) => void;\n    open: boolean;\n}\n\nfunction StyleDialog(props: StyleDialogProps) {\n    const { t } = useTranslation();\n\n    return (\n        <Dialog onClose={() => props.onClose('close')} open={props.open}>\n            <DialogTitle>{t('file.style.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {Object.keys(allStyles).map(key => (\n                        <ListItem button onClick={() => props.onClose(key)} key={key}>\n                            <ListItemText primary={t('file.style.' + key)} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\ninterface LangDialogProps {\n    onClose: () => void;\n    open: boolean;\n}\n\nfunction LangDialog(props: LangDialogProps) {\n    const { t, i18n } = useTranslation();\n\n    const handleClick = (lang: string) => {\n        if (lang === i18n.language) {\n            props.onClose();\n        } else {\n            i18n.changeLanguage(lang).then(t => (document.title = t('title')));\n            // window.urlParams.set('lang', lang);\n            // history.pushState({url:window.location.href}, null, '?' + window.urlParams.toString());\n            window.gtag('event', 'set', {\n                event_category: 'language',\n                event_label: lang,\n            });\n            document.documentElement.setAttribute('lang', lang);\n            props.onClose();\n            // window.location.href = '?' + window.urlParams.toString();\n        }\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open}>\n            <DialogTitle>{t('file.lang.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {(Object.keys(allLangs) as (keyof typeof allLangs)[]).map(key => (\n                        <ListItem button onClick={() => handleClick(key)} key={key}>\n                            <ListItemText primary={allLangs[key]} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}