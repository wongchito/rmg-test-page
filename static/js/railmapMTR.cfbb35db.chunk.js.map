{"version":3,"sources":["svgs/railmap/methods/mtr.ts","svgs/railmap/main/station/station-mtr.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx","svgs/railmap/methods/share.ts","svgs/strip/strip-mtr.tsx"],"names":["StationsMTR","leftWideFactor","stnId","res","stnList","transfer","type","tick_direc","includes","parents","length","children","rightWideFactor","Stations","StationMTR","props","stnInfo","useContext","ParamContext","param","stn_list","branchPos","useMemo","pos","branch","right","push","indexOf","left","toString","JSON","stringify","branchAffix","branchDy","namePos","branchElDy","stnIcon","info","style","transform","variant","stnTrans","stnState","end","undefined","name","osi_names","tickDirec","xlinkHref","className","paid_area","facility","nameDX","StationNameGElement","stnNameEl","useRef","useState","width","x","bBox","setBBox","useEffect","current","getBBox","dy","STN_NAME_LINE_GAP","split","textAnchor","osi22DY","facilityX","facilityNameDX","NAME_FULL_HEIGHT","id","y","NAME_ZH_TOP","height","fill","ref","StationName","nameGap","React","memo","map","txt","i","key","prevProps","nextProps","IntTickGroup","intInfo","rotation","IntTick","nameZHLns","nameENLns","stroke","OSIName","MainMTR","branches","routes","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","reduce","acc","cur","getXShareMTR","lineXs","svgWidth","railmap","padding","xs","len","yShares","getYShares","ys","branch_spacing","stnStates","getStnState","current_stn_idx","direction","namePoss","getNamePos","linePaths","drawLine","y_pc","Lines","paths","strokeWidth","pass","path","d","main","StationGroup","correctedNamePoss","forEach","txt_flip","filter","DefsMTR","RailMapMTR","stripPc","strip_pc","clipPath","points","r","n","h","strokeLinecap","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","data","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","getYShare","parId","stnIds","realXs","realYs","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","join","replace","stations","lineMainStns","linePassStns","_linePath"],"mappings":"iOAEaA,EAAb,2MACcC,eAAiB,SAACC,GACxB,IAAIC,EAAM,EADgC,EAEf,EAAKC,QAAQF,GAAOG,SAAzCC,EAFoC,EAEpCA,KASN,MARmB,MAHuB,EAE9BC,YAEJ,CAAC,OAAQ,QAAS,QAAS,QAAS,SAASC,SAASF,KACtDH,GAAO,IAGF,UAATG,IAAkBH,GAAO,IACc,IAAvC,EAAKC,QAAQF,GAAOO,QAAQC,SAAcP,GAAO,IACgB,IAAjE,EAAKC,QAAQ,EAAKA,QAAQF,GAAOO,QAAQ,IAAIE,SAASD,SAAcP,GAAO,IACxEA,GAZf,EAecS,gBAAkB,SAACV,GACzB,IAAIC,EAAM,EADiC,EAEhB,EAAKC,QAAQF,GAAOG,SAAzCC,EAFqC,EAErCA,KASN,MARmB,MAHwB,EAE/BC,YAEJ,CAAC,OAAQ,QAAS,QAAS,QAAS,SAASC,SAASF,KACtDH,GAAO,IAGF,UAATG,IAAkBH,GAAO,IACe,IAAxC,EAAKC,QAAQF,GAAOS,SAASD,SAAcP,GAAO,IACe,IAAjE,EAAKC,QAAQ,EAAKA,QAAQF,GAAOS,SAAS,IAAIF,QAAQC,SAAcP,GAAO,IACxEA,GA1Bf,6BAAiCU,K,OCyLlBC,EAjLI,SAACC,GAAkB,IAE5BC,EADYC,qBAAWC,KAArBC,MACcC,SAASL,EAAMb,OAK/BmB,EAAYC,mBACd,WACI,IAAIC,EAAqC,GAOzC,OANIP,EAAQQ,OAAOC,MAAMf,QACrBa,EAAIG,KAA2D,IAAtDV,EAAQL,SAASgB,QAAQX,EAAQQ,OAAOC,MAAM,IAAY,KAAO,MAE1ET,EAAQQ,OAAOI,KAAKlB,QACpBa,EAAIG,KAAyD,IAApDV,EAAQP,QAAQkB,QAAQX,EAAQQ,OAAOI,KAAK,IAAY,KAAO,MAErEL,IAGX,CAACP,EAAQP,QAAQoB,WAAYb,EAAQL,SAASkB,WAAYC,KAAKC,UAAUf,EAAQQ,UAM/EQ,EAAcV,mBAChB,WACI,IAAIC,EAAMF,EACV,OAAmB,IAAfE,EAAIb,OACG,GAEPa,EAAIf,SAAS,OAASe,EAAIf,SAAS,OAGnCe,EAAIf,SAAS,OAASe,EAAIf,SAAS,MAF5B,MAKJ,OAGX,CAACa,EAAUQ,aAMTI,EAAWX,mBACb,WAEI,GAAc,KADFU,EAER,OAAO,EACJ,GAAc,QAHTA,EAIR,OAAOjB,EAAMmB,QAAU,MAAQ,KAE/B,IAAIX,EAAMF,EACV,OAAIE,EAAIf,SAAS,OAASe,EAAIf,SAAS,MAC5BO,EAAMmB,QAAU,KAAO,EAE9BX,EAAIf,SAAS,OAASe,EAAIf,SAAS,MAC5BO,EAAMmB,QAAU,GAAK,UADhC,IAMR,CAACb,EAAUQ,WAAYG,EAAajB,EAAMmB,UAMxCC,EAAab,mBAAQ,WAEvB,GAAc,KADFU,EAER,OAAO,EACJ,GAAc,QAHTA,EAIR,OAAOjB,EAAMmB,SAAW,KAAO,KAE/B,IAAIX,EAAMF,EACV,OAAIE,EAAIf,SAAS,OAASe,EAAIf,SAAS,MAC5BO,EAAMmB,QAAU,EAAI,KAE3BX,EAAIf,SAAS,OAASe,EAAIf,SAAS,MAC5BO,EAAMmB,SAAW,KAAO,OADnC,IAIL,CAACF,EAAajB,EAAMmB,QAASb,IAE1Be,EAAW,YAAqB,IAAlB9B,EAAiB,EAAjBA,KAAM+B,EAAW,EAAXA,KACtB,OAAQ/B,GACJ,IAAK,OACL,IAAK,QACD,OAAI+B,EAAK,GAAG3B,OAAS,GACX,MAAN,OAAa2B,EAAK,GAAG3B,OAAS,GAEvB,QAEf,IAAK,QACL,IAAK,QACD,MAAO,QACX,IAAK,QACL,IAAK,QACD,MAAO,QACX,IAAK,QACD,MAA2B,cAAvBM,EAAQP,QAAQ,IAA8C,YAAxBO,EAAQL,SAAS,GAChD,WAEA,QAEf,QACI,MAAO,OAtBF,CAwBdK,EAAQX,UAEX,OACI,oCACI,uBAAGiC,MAAO,CAAEC,UAAU,cAAD,OAAgBJ,EAAhB,SACjB,kBAAC,EAAD,CACIK,QAC8B,UAA1BxB,EAAQX,SAASC,MACO,cAAvBU,EAAQP,QAAQ,IAA8C,YAAxBO,EAAQL,SAAS,GAElDK,EAAQX,SAASC,KADjB,WAGVmC,SAAUzB,EAAQX,SAClBqC,SAAU3B,EAAM2B,SAChBR,QAASnB,EAAMmB,QACfS,IAAiB,aAAZP,EAAiD,cAAvBpB,EAAQP,QAAQ,GAAqB,OAAS,aAAWmC,IAE3FR,EAAQ5B,SAAS,QACd,kBAAC,EAAD,CACIqC,KAAM7B,EAAQX,SAASyC,UAAU,GACjCJ,SAAU3B,EAAM2B,SAChBF,QAC8B,UAA1BxB,EAAQX,SAASC,MACO,cAAvBU,EAAQP,QAAQ,IAA8C,YAAxBO,EAAQL,SAAS,GAEjDK,EAAQX,SAASC,KADlB,WAGVyC,UAAW/B,EAAQX,SAASE,WAC5B2B,QAASnB,EAAMmB,QACfS,IACgB,aAAZP,EAAiD,cAAvBpB,EAAQP,QAAQ,GAAqB,OAAS,aAAWmC,KAKnG,yBACII,UAAW,IAAMZ,EAAUJ,EAC3BiB,YACyB,IAApBlC,EAAM2B,SAAkB,qBAAuB,yBAC/C1B,EAAQX,SAAS6C,UAAY,0BAA4B,6BAE9DZ,MAAO,CACHC,UACI,qBAAcN,EAAd,uBACiC,YAAxBjB,EAAQL,SAAS,GAAmB,GAAK,EADlD,YACuDI,EAAMmB,SAAW,EAAI,EAD5E,QAIZ,uBAAGI,MAAO,CAAEC,UAAU,cAAD,OAAgBN,EAAhB,SACjB,kBAAC,EAAD,CACIY,KAAM7B,EAAQ6B,KACdX,QAASnB,EAAMmB,QACfQ,SAAU3B,EAAM2B,SAChBS,SAAUnC,EAAQmC,SAClBC,OAC8B,UAA1BpC,EAAQX,SAASC,MAAgC,UAAZ8B,EACC,MAAhCpB,EAAQX,SAASE,WACb,GACC,OACLqC,OAkBxBS,EAAsB,SAACtC,GAIzB,IA0BMuC,EAAYC,iBAA2B,MA9BgB,EA+BrCC,mBAAS,CAAEC,MAAO,EAAGC,EAAG,IA/Ba,mBA+BtDC,EA/BsD,KA+BhDC,EA/BgD,KAgC7DC,qBACI,kBAAMD,EAAQN,EAAUQ,QAASC,aAEjC,CAAChD,EAAM2B,SAAU3B,EAAM8B,KAAKhB,aAGhC,IAAMmC,EAAKjD,EAAMmB,QACX+B,SACA,SAA+F,IAAxClD,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GAE1FyD,EAAcpD,EAAMqC,OAAoBrC,EAAMqC,OAAS,EAAI,QAAU,MAAxC,SAC7BgB,EAAWrD,EAAMqC,OAAarC,EAAMmB,QAAU,WAAa,UAAjC,EAE1BmC,EAAatD,EAAMqC,OAEnBrC,EAAMqC,OAAS,EACfrC,EAAMqC,OAAS,WACf,UAA8BO,EAAKF,MAAQ1C,EAAMqC,SAH/CO,EAAKF,MAAQ,GAAK,EAIpBa,EACiB,KAAnBvD,EAAMoC,SACA,EACCpC,EAAMqC,OAEPrC,EAAMqC,OAAS,EACf,EACAmB,SAA2BxD,EAAMqC,OAHjC,UAKV,OACI,uBACIe,WAAYA,EACZ7B,MAAO,CAAEC,UAAU,cAAD,OAAgByB,EAAKI,EAArB,QAClBnB,UAAS,gBAA8B,IAApBlC,EAAM2B,SAAkB,OAA4B,IAAnB3B,EAAM2B,SAAiB,UAAY,WAEnE,IAAnB3B,EAAM2B,UACH,0BACI8B,GAAG,aACHd,EAAGC,EAAKD,EAAI,GAAwB,IAAnBY,EAAuB,EAAIA,EAAiB,GAC7DG,GAAGC,QACHjB,MAAOE,EAAKF,MAAQ,GAAwB,IAAnBa,EAAuB,EAAI,GACpDK,OA/CS,SA+C2D,IAAxC5D,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GAAU,IAG7D,KAAnBK,EAAMoC,UACH,yBACIH,UAAW,IAAMjC,EAAMoC,SACvByB,MAA0B,IAApB7D,EAAM2B,SAAkB,kBAAoB,mBAClDgB,EAAGW,EACHI,EAA8D,KAAxC1D,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GAAtDgE,UAGX,uBAAGG,IAAKvB,EAAWhB,MAAO,CAAEC,UAAU,cAAD,OAAgB+B,EAAhB,SACjC,kBAACQ,EAAD,CAAajC,KAAM9B,EAAM8B,KAAMkC,QA/DpB,QA0ErBD,EAAcE,IAAMC,MACtB,SAAClE,GACG,OACI,oCACI,0BAAMkC,UAAU,uCAAuClC,EAAM8B,KAAK,IACjE9B,EAAM8B,KAAK,GAAGqB,MAAM,MAAMgB,KAAI,SAACC,EAAKC,GAAN,OAC3B,0BAAMC,IAAKD,EAAGnC,UAAU,sCAAsCe,GAAIjD,EAAMgE,QAAc,GAAJK,GAC7ED,UAMrB,SAACG,EAAWC,GAAZ,OACID,EAAUzC,KAAKhB,aAAe0D,EAAU1C,KAAKhB,YAAcyD,EAAUP,UAAYQ,EAAUR,WAW7FS,EAAe,SAACzE,GAClB,OAAQA,EAAMyB,SACV,IAAK,OACD,OACI,2BACI,kBAAC,EAAD,CACIiD,QAAS1E,EAAM0B,SAASJ,KAAK,GAAG,GAChCK,SAAU3B,EAAM2B,SAChBgD,SAAU3E,EAAMmB,QAAU,IAAM,KAIhD,IAAK,OACL,IAAK,QACD,OACI,oCACKnB,EAAM0B,SAASJ,KAAK,GAAG6C,KAAI,SAACO,EAASL,GAAV,OACxB,uBACIC,IAAKD,EACL9C,MAAO,CACHC,UAAU,cAAD,OACJxB,EAAMmB,SAA0B,IAAMnB,EAAM0B,SAASJ,KAAK,GAAG3B,OAAS0E,GAAtD,IAAMA,EAAI,GADtB,SAKb,kBAAC,EAAD,CACIK,QAASA,EACT/C,SAAU3B,EAAM2B,SAChBgD,SAAwC,MAA9B3E,EAAM0B,SAASlC,YAAsB,GAAK,UAM5E,IAAK,QACL,IAAK,QACD,OACI,uBACI+B,MAAO,CACHC,UAAU,cAAD,OAAgBxB,EAAMmB,SAAW,GAAK,GAAtC,SAGb,kBAAC,EAAD,CACIuD,QAAS1E,EAAM0B,SAASJ,KAAK,GAAG,GAChCK,SAAU3B,EAAM2B,SAChBgD,SAAU3E,EAAMmB,QAAU,IAAM,KAIhD,IAAK,QACL,IAAK,QACD,OACI,oCACKnB,EAAM0B,SAASJ,KAAK,GAAG6C,KAAI,SAACO,EAASL,GAAV,OACxB,uBACIC,IAAKD,EACL9C,MAAO,CACHC,UAAU,cAAD,OACJxB,EAAMmB,SAA8B,EAAI,IAAMnB,EAAM0B,SAASJ,KAAK,GAAG3B,OAAS0E,GAA9D,EAAI,IAAMA,EAAI,GAD1B,SAKb,kBAAC,EAAD,CACIK,QAASA,EACT/C,SAAU3B,EAAM2B,SAChBgD,SAAwC,MAA9B3E,EAAM0B,SAASlC,YAAsB,GAAK,UAM5E,IAAK,QACD,OACI,oCACI,2BACI,kBAAC,EAAD,CACIkF,QAAS1E,EAAM0B,SAASJ,KAAK,GAAG,GAChCK,SAAU3B,EAAM2B,SAChBgD,SAAU3E,EAAMmB,QAAU,EAAI,IAC9BkB,OAAsC,MAA9BrC,EAAM0B,SAASlC,WAAqB,GAAK,KAGxDQ,EAAM0B,SAASJ,KAAK,GAAG6C,KAAI,SAACO,EAASL,GAAV,OACxB,uBACIC,IAAKD,EACL9C,MAAO,CACHC,UAAU,cAAD,OACJxB,EAAMmB,SAA8B,EAAI,IAAMnB,EAAM0B,SAASJ,KAAK,GAAG3B,OAAS0E,GAA9D,EAAI,IAAMA,EAAI,GAD1B,SAKb,kBAAC,EAAD,CACIK,QAASA,EACT/C,SAAU3B,EAAM2B,SAChBgD,SAAwC,MAA9B3E,EAAM0B,SAASlC,YAAsB,GAAK,UAM5E,IAAK,WACD,OACI,oCACI,2BACI,kBAAC,EAAD,CACIkF,QAAS1E,EAAM0B,SAASJ,KAAK,GAAG,GAChCK,SAAU3B,EAAM2B,SAChBgD,SAAU3E,EAAMmB,QAAU,IAAM,KAGvCnB,EAAM0B,SAASJ,KAAK,GAAG6C,KAAI,SAACO,EAASL,GAAV,OACxB,uBACIC,IAAKD,EACL9C,MAAO,CACHC,UAAU,aAAD,OAA6B,SAAdxB,EAAM4B,KAAkB,GAAK,GAA5C,cACL5B,EAAMmB,QAAU,GAAKkD,GAAK,IAAMrE,EAAM0B,SAASJ,KAAK,GAAG3B,OAAS,EAAI0E,GAD/D,SAKb,kBAAC,EAAD,CACIK,QAASA,EACT/C,SAAU3B,EAAM2B,SAChBgD,SAAwB,SAAd3E,EAAM4B,IAAiB,IAAM,UAM/D,QACI,OAAO,uCAWbgD,EAAU,SAAC5E,GACb,IAAM6E,EAAY7E,EAAM0E,QAAQ,GAAGvB,MAAM,MAAMxD,OACzCmF,EAAY9E,EAAM0E,QAAQ,GAAGvB,MAAM,MAAMxD,OAEzCgD,EAAK,SAAAgC,GACP,OAAQA,GACJ,KAAK,GACD,OAAQ,GACZ,KAAM,GACF,OAAO,GACX,QACI,OAAO,GAPR,CASR3E,EAAM2E,UAEHjB,EAAK,SAAAiB,GACP,OAAQA,GACJ,KAAK,EACD,OAAO,UACX,KAAK,IACD,OAAO,UAA4B,IAAME,EAAY,GAAK,GAAKC,EAAY,GAC/E,QACI,OAAO,UAAY,SAAW,IAAMD,EAAY,GAAK,GAAKC,EAAY,GAAK,GAAK,GAPjF,CASR9E,EAAM2E,UAEHvB,EAAc,SAAAuB,GAChB,OAAQA,GACJ,KAAK,GACD,MAAO,MACX,KAAM,GACF,MAAO,QACX,QACI,OAAK3E,EAAMqC,OAEArC,EAAMqC,OAAS,EACf,QAEA,MAJA,UARH,CAejBrC,EAAM2E,UAET,OAAOpE,mBACH,kBACI,oCACI,yBACI0B,UAAU,WACV8C,OAAQ/E,EAAM0E,QAAQ,GACtBnD,MAAO,CAAEC,UAAU,UAAD,OAAYxB,EAAM2E,SAAlB,SAClBzC,UACI,4CAAiE,IAApBlC,EAAM2B,SAAkB,kBAAoB,MAGjG,uBACIyB,WAAYA,EACZ7B,MAAO,CACHC,UAAU,aAAD,OAAemB,GAAK3C,EAAMqC,QAAU,GAApC,cAA4CqB,EAA5C,QAEbxB,UAAS,gBAA8B,IAApBlC,EAAM2B,SAAkB,OAAS,WAEnD3B,EAAM0E,QAAQ,GAAGvB,MAAM,MAAMgB,KAAI,SAACC,EAAKC,GAAN,OAC9B,0BAAMC,IAAKD,EAAGnC,UAAU,uBAAuBe,GAAI,GAAKoB,GACnDD,MAGRpE,EAAM0E,QAAQ,GAAGvB,MAAM,MAAMgB,KAAI,SAACC,EAAKC,GAAN,OAC9B,0BAAMC,IAAKO,EAAYR,EAAGnC,UAAU,uBAAuBe,GAAgB,GAAZ4B,EAAiB,EAAI,EAAIR,GACnFD,UAOrB,CAACpE,EAAM0E,QAAQ5D,WAAYd,EAAM2E,SAAU3E,EAAM2B,YAanDqD,EAAU,SAAChF,GACb,IAAMoD,EAAc,SAAA3B,GAChB,OAAQA,GACJ,IAAK,QACL,IAAK,QACD,MAA2B,MAApBzB,EAAMgC,UAAoB,MAAQ,QAC7C,IAAK,QACD,MAA2B,MAApBhC,EAAMgC,UAAoB,QAAU,MAC/C,QACI,MAAO,UARC,CAUjBhC,EAAMyB,SAEHkB,EAAK,SAAAlB,GACP,OAAQA,GACJ,IAAK,QACL,IAAK,QACD,MAA2B,MAApBzB,EAAMgC,WAAqB,GAAK,GAC3C,IAAK,QACD,MAA2B,MAApBhC,EAAMgC,UAAoB,IAAM,GAC3C,IAAK,WACD,MAAqB,SAAdhC,EAAM4B,KAAkB,GAAK,GACxC,QACI,OAAO,GAVR,CAYR5B,EAAMyB,SAEHiC,EAAK,SAAAjC,GACP,OAAQA,GACJ,IAAK,QACL,IAAK,QACD,OAEI,SADEzB,EAAMmB,SAAgB,GAAN,IAElB,WACEnB,EAAMmB,QAAc,IAAMnB,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GAA7C,GAE1B,IAAK,QACD,OAAQK,EAAMmB,SAER,QAAuC,IAAMnB,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GADhF,SAEV,IAAK,QACD,OACMK,EAAMmB,SAAqB,EAAX,IACjBnB,EAAMmB,QAAU,IAAU,IAC3B,QACA,UACA,GAAKnB,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GAEhD,IAAK,WACD,OAAQK,EAAMmB,SAER,QAA2B,IAAMnB,EAAM8B,KAAK,GAAGqB,MAAM,MAAMxD,OAAS,GADpE,SAEV,QACI,OAAO,GA3BR,CA6BRK,EAAMyB,SAET,OACI,uBACI2B,WAAYA,EACZ7B,MAAO,CAAEC,UAAU,aAAD,OAAemB,EAAf,cAAsBe,EAAtB,QAClBxB,UAAS,gBAA8B,IAApBlC,EAAM2B,SAAkB,OAAS,WAEpD,0BAAMO,UAAU,mCAAmClC,EAAM8B,KAAK,IAC7D9B,EAAM8B,KAAK,GAAGqB,MAAM,MAAMgB,KAAI,SAACC,EAAKC,GAAN,OAC3B,0BAAMC,IAAKD,EAAGnC,UAAU,kCAAkCe,GAAI,GAAK,GAAKoB,GACnED,QC7lBflF,EAAiB,SAACG,EAA2CF,GAC/D,IAAIC,EAAM,EADuE,EAEtDC,EAAQF,GAAOG,SAApCC,EAF2E,EAE3EA,KASN,MARmB,MAH8D,EAErEC,YAEJ,CAAC,OAAQ,QAAS,QAAS,QAAS,SAASC,SAASF,KACtDH,GAAO,IAGF,UAATG,IAAkBH,GAAO,IACS,IAAlCC,EAAQF,GAAOO,QAAQC,SAAcP,GAAO,IACW,IAAvDC,EAAQA,EAAQF,GAAOO,QAAQ,IAAIE,SAASD,SAAcP,GAAO,IAC9DA,GAGLS,EAAkB,SAACR,EAA2CF,GAChE,IAAIC,EAAM,EADwE,EAEvDC,EAAQF,GAAOG,SAApCC,EAF4E,EAE5EA,KASN,MARmB,MAH+D,EAEtEC,YAEJ,CAAC,OAAQ,QAAS,QAAS,QAAS,SAASC,SAASF,KACtDH,GAAO,IAGF,UAATG,IAAkBH,GAAO,IACU,IAAnCC,EAAQF,GAAOS,SAASD,SAAcP,GAAO,IACU,IAAvDC,EAAQA,EAAQF,GAAOS,SAAS,IAAIF,QAAQC,SAAcP,GAAO,IAC9DA,GA2FI6F,EAxFC,WAAO,IAAD,IACwBhB,IAAM/D,WAAWC,KAAnDC,EADU,EACVA,MAAO8E,EADG,EACHA,SAAUC,EADP,EACOA,OAAQC,EADf,EACeA,KAE3BC,EAASC,YAAclF,EAAMC,SAAUnB,EAAgBW,GAEvD0F,EAAetB,IAAM1D,SACvB,kBAAMiF,YAAmB,YAAa,UAAWH,KAEjD,CAACtE,KAAKC,UAAUqE,KAEdI,EAASxB,IAAM1D,SACjB,kBAAMiF,YAAmBD,EAAaG,MAAM,GAAIH,EAAaG,MAAMC,OAAO,GAAG,GAAIN,KAEjF,CAACtE,KAAKC,UAAUqE,KAGdO,EAAU3B,IAAM1D,SAClB,WAEI,OADAsF,QAAQC,IAAI,sBACLC,OAAOC,KAAK5F,EAAMC,UAAU4F,QAC/B,SAACC,EAAKC,GAAN,sBAAoBD,EAApB,eAA0BC,EAAMC,YAAaD,EAAKd,EAAQH,OAC1D,MAIR,CAACA,EAASpE,WAAYC,KAAKC,UAAUqE,KAEnCgB,EAA2B,CAC5BjG,EAAMkG,SAASC,QAAUnG,EAAMoG,QAAW,IAC3CpG,EAAMkG,SAASC,SAAW,EAAInG,EAAMoG,QAAU,MAE5CC,EAAKV,OAAOC,KAAKJ,GAASK,QAC5B,SAACC,EAAKC,GAAN,sBAAoBD,EAApB,eAA0BC,EAAME,EAAO,GAAMT,EAAQO,GAAOV,EAAOiB,KAAQL,EAAO,GAAKA,EAAO,QAC9F,IAGEM,EAAU1C,IAAM1D,SAClB,kBAAMtB,EAAY2H,WAAWxG,EAAMC,SAAU6E,KAE7C,CAACE,IAECyB,EAAKd,OAAOC,KAAKW,GAASV,QAC5B,SAACC,EAAKC,GAAN,sBACOD,EADP,eAEKC,GACIQ,EAAQR,GAAO/F,EAAM0G,gBACrB5B,EAAS,GAAGzF,SAAS0G,GAAO,EAAIQ,EAAQR,GAAO,GAAK,KAAO,UAEpE,IAGEY,EAAY9C,IAAM1D,SACpB,kBAAMyG,YAAY5G,EAAM6G,gBAAiB9B,EAAQ/E,EAAM8G,aAEvD,CAAC9G,EAAM6G,gBAAiB7G,EAAM8G,UAAW/B,EAAOrE,aAG9CqG,EAAWlD,IAAM1D,SACnB,kBAAMtB,EAAYmI,WAAWhH,EAAMC,SAAUkF,KAE7C,CAACH,EAAMrE,KAAKC,UAAUuE,KAGpB8B,EAAYpI,EAAYqI,SAC1BpC,EACA6B,EACA3G,EAAMC,SACNgG,EACAI,EACAI,EACAzG,EAAM0G,eACNvB,GAGJ,OACI,uBACI9B,GAAG,OACHlC,OAAK,mBACA,iBAA0BnB,EAAMmH,MADhC,0BAEU,uEAFV,IAKL,kBAACC,EAAD,CAAOC,MAAOJ,IACd,kBAAC,EAAD,CAAcZ,GAAIA,EAAII,GAAIA,EAAIE,UAAWA,EAAWI,SAAUA,MAOpEK,EAAQvD,IAAMC,MAChB,SAAClE,GACG,OACI,uBAAGuB,MAAO,CAAEsC,KAAM,OAAQ6D,YAAa,OACnC,uBAAGnG,MAAO,CAAEwD,OAAQ,oBACf/E,EAAMyH,MAAME,KAAKxD,KAAI,SAACyD,EAAMvD,GAAP,OAClB,0BAAMC,IAAKD,EAAGwD,EAAGD,QAGzB,uBAAGrG,MAAO,CAAEwD,OAAQ,4BACf/E,EAAMyH,MAAMK,KAAK3D,KAAI,SAACyD,EAAMvD,GAAP,OAClB,0BAAMC,IAAKD,EAAGwD,EAAGD,YAMrC,SAACrD,EAAWC,GAAZ,OAA0BzD,KAAKC,UAAUuD,EAAUkD,SAAW1G,KAAKC,UAAUwD,EAAUiD,UAUrFM,EAAe,SAAC/H,GAA8B,IACxCI,EAAU6D,IAAM/D,WAAWC,KAA3BC,MAEJ4H,EAAoB,GAKxB,OAJAjC,OAAOC,KAAKhG,EAAMmH,UAAUc,SACxB,SAAA9I,GAAK,OAAK6I,EAAkB7I,GAASiB,EAAM8H,UAAYlI,EAAMmH,SAAShI,GAASa,EAAMmH,SAAShI,MAI9F,uBAAGsE,GAAG,aACDsC,OAAOC,KAAK5F,EAAMC,UACd8H,QAAO,SAAAhJ,GAAK,OAAK,CAAC,YAAa,WAAWM,SAASN,MACnDgF,KAAI,SAAAhF,GAAK,OACN,uBACImF,IAAKnF,EACLoC,MAAO,CACHC,UAAU,aAAD,OAAexB,EAAMyG,GAAGtH,GAAxB,cAAoCa,EAAM6G,GAAG1H,GAA7C,SAGb,kBAAC,EAAD,CACIA,MAAOA,EACPwC,SAAU3B,EAAM+G,UAAU5H,GAC1BgC,QAAS6G,EAAkB7I,WCzJjDiJ,GAFSC,UAZI,WAAO,IACdjI,EAAU6D,aAAiB9D,KAA3BC,MACR,OACI,gCACI,gBAACgI,EAAD,MAEA,gBAAC,IAAD,CAAUE,QAASlI,EAAMmI,WACzB,gBAAC,EAAD,QAOItE,QAAW,WACvB,OACI,4BACI,qBAAGR,GAAG,UAAUjC,UAAU,uBACtB,wBAAMmB,GAAI,SAAUiB,OAAQ,SAAUlB,MAAO,WAC7C,wBACIe,GAAG,UACHoE,EAAE,0tBACFrG,UAAU,8BACVqC,KAAK,WAGb,qBAAGJ,GAAG,SAASjC,UAAU,uBACrB,wBAAMmB,GAAI,SAAUD,MAAO,SAAUkB,OAAQ,WAC7C,wBACIC,KAAK,QACLgE,EAAE,8mBACFrG,UAAU,iCAGlB,4BAAUiC,GAAG,gBAAgBjC,UAAU,+BACnC,wBACIqC,KAAK,OACLgE,EAAE,iLAGV,qBAAGpE,GAAG,MAAMjC,UAAU,uBAClB,wBAAMmB,GAAI,SAAUD,MAAO,SAAUkB,OAAQ,WAC7C,qBAAG4E,SAAS,sBAAsBhH,UAAU,0BACxC,wBACImB,GAAI,QACJe,EAAG,SACHhB,MAAO,SACPkB,OAAQ,OACRpC,UAAU,iDACVqC,KAAK,UAET,wBACIgE,EAAE,0UACFrG,UAAU,8BACVqC,KAAK,UAET,2BACI4E,OAAO,uEACP5E,KAAK,UAET,wBACIgE,EAAE,4RACFrG,UAAU,gCAEd,wBACIqG,EAAE,iLACFrG,UAAU,8BACVqC,KAAK,UAET,wBACIgE,EAAE,yKACFrG,UAAU,gCAEd,wBACIqG,EAAE,uIACFrG,UAAU,8BACVqC,KAAK,UAET,wBACIgE,EAAE,4IACFrG,UAAU,8BACVqC,KAAK,UAET,2BACI4E,OAAO,wEACP5E,KAAK,UAET,wBACIgE,EAAE,2KACFrG,UAAU,8BACVqC,KAAK,UAET,wBACIgE,EAAE,6KACFrG,UAAU,gCAEd,wBACIqG,EAAE,uPACFrG,UAAU,kCAKtB,0BAAQiC,GAAG,MAAMiF,EAAG,EAAGxG,UAAU,iBACjC,wBACIuB,GAAG,QACHvB,UAAU,eACV2F,EAAE,+EAEN,wBACIpE,GAAG,SACHoE,EAAE,oHACF3F,UAAU,iBAEd,wBAAMuB,GAAG,OAAOoE,EAAE,yDAAyD3F,UAAU,iBAEpF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAAIiC,KAAI,SAAAwE,GACnC,IAAIC,EAAI,IAAMD,EAAI,GAClB,OACI,gBAAC,WAAD,CAAgBrE,IAAKqE,GACjB,wBACIlF,GAAE,aAAQkF,GACVd,EAAC,mBAAce,EAAd,gCAAuCA,EAAvC,wBACD1G,UAAU,iBAEd,wBACIuB,GAAE,aAAQkF,EAAR,MACFzG,UAAU,eACV2F,EAAC,sBAAiBe,EAAjB,gCAA0CA,EAA1C,gGAEL,wBACInF,GAAE,aAAQkF,EAAR,OACFzG,UAAU,eACV2F,EAAC,uBAAkBe,EAAlB,gCAA2CA,EAA3C,2IAMjB,qBAAGnF,GAAG,SACF,wBAAMoE,EAAE,eACR,uBAAK5F,UAAU,SACf,uBAAKA,UAAU,OAAOyB,EAAG,MAE7B,qBAAGD,GAAG,WACF,wBAAMoE,EAAE,kBACR,uBAAK5F,UAAU,WACf,uBAAKA,UAAU,OAAOyB,EAAG,SAE7B,qBAAGD,GAAG,YACF,wBAAMoE,EAAE,kBACR,uBAAK5F,UAAU,YACf,uBAAKA,UAAU,OAAOyB,EAAG,SAG7B,qBAAGD,GAAG,SACF,wBAAMoE,EAAE,eACR,uBAAK5F,UAAU,SACf,uBAAKA,UAAU,QAAQyB,EAAG,MAE9B,qBAAGD,GAAG,WACF,wBAAMoE,EAAE,mBACR,uBAAK5F,UAAU,WACf,uBAAKA,UAAU,QAAQyB,EAAG,SAE9B,qBAAGD,GAAG,YACF,wBAAMoE,EAAE,mBACR,uBAAK5F,UAAU,YACf,uBAAKA,UAAU,QAAQyB,EAAG,SAG9B,qBAAGD,GAAG,YACF,wBAAMoE,EAAE,eACR,uBAAK5F,UAAU,SACf,uBAAKA,UAAU,QAAQU,EAAG,GAAIe,GAAI,MAEtC,qBAAGD,GAAG,cACF,wBAAMoE,EAAE,kBACR,uBAAK5F,UAAU,WACf,uBAAKA,UAAU,QAAQU,EAAG,GAAIe,GAAI,QAGtC,wBAAMD,GAAG,UAAUoE,EAAE,aAAagB,cAAc,gB,6RCpL/CvD,G,MAAgB,SACzBjG,EACAyJ,EACAC,GAEA,OAAOhD,OAAOC,KAAK3G,GAAS4G,QACxB,SAACC,EAAKC,GAAN,sBACOD,EADP,eAEKC,EAAM9G,EAAQ8G,GAAKvG,SAASqG,QACzB,SAAC+C,EAAGC,GAAJ,sBAAgBD,EAAhB,eAAoBC,EAAI,EAAIH,EAAMzJ,EAAS4J,GAAKF,EAAO1J,EAAS8G,OAChE,QAGR,MAUKX,EAAqB,SAArBA,EAAsB0D,EAAcC,EAAY9D,GACzD,GAAI6D,IAASC,EACT,MAAO,CAAEzC,IAAK,EAAGhB,MAAO,CAACwD,IAE7B,IAAIE,EAAuB,GACvBC,EAA4B,GAChCtD,OAAOC,KAAKX,EAAO6D,IAAOjB,SAAQ,SAAAqB,GAC9B,IAAIC,EAAK/D,EAAmB8D,EAAOH,EAAI9D,GACnCkE,EAAG7C,IAAM,IACb0C,EAAWzI,KAAK0E,EAAO6D,GAAMI,GAASC,EAAG7C,KACzC6C,EAAG7D,MAAM8D,QAAQN,GACjBG,EAAc1I,KAAK4I,EAAG7D,WAE1B,IAAI+D,EAAYC,KAAKC,IAAL,MAAAD,KAAYN,GAC5B,MAAO,CACH1C,IAAK+C,EACL/D,MAAO2D,EAAcD,EAAWxI,QAAQ6I,MAInCrD,EAAe,SAACjH,EAAekG,EAA0CH,GAClF,IAAIK,EAAeC,EAAmB,YAAa,UAAWH,GAC9D,GAAIE,EAAaG,MAAMjG,SAASN,GAC5B,OAAOqG,EAAmBD,EAAaG,MAAM,GAAIvG,EAAOkG,GAAQqB,IAMhE,IAHA,IAAIkD,EAAc1E,EAASiD,QAAO,SAAA1H,GAAM,OAAIA,EAAOhB,SAASN,MAAQ,GAEhE0K,EAAa1K,GACToG,EAAaG,MAAMjG,SAASoK,IAChCA,EAAaD,EAAYA,EAAYhJ,QAAQiJ,GAAc,GAG/D,IADA,IAAIC,EAAW3K,GACPoG,EAAaG,MAAMjG,SAASqK,IAChCA,EAAWF,EAAYA,EAAYhJ,QAAQkJ,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EAIdG,EAAO,GAkBX,OAjBKD,GAJ2B,YAAbD,EASRC,GACPC,EAAK,GAAK,EACVA,EAAK,GAAKxE,EAAmBD,EAAaG,MAAM,GAAIoE,EAAUzE,GAAQqB,IACtEsD,EAAK,GAAKxE,EAAmBoE,EAAY,GAAIzK,EAAOkG,GAAQqB,IAC5DsD,EAAK,GAAKxE,EAAmBrG,EAAO2K,EAAUzE,GAAQqB,MAGtDsD,EAAK,GAAKxE,EAAmBD,EAAaG,MAAM,GAAImE,EAAYxE,GAAQqB,IACxEsD,EAAK,GAAKxE,EAAmBqE,EAAYtE,EAAaG,MAAMC,OAAO,GAAG,GAAIN,GAAQqB,IAClFsD,EAAK,GAAKxE,EAAmBqE,EAAY1K,EAAOkG,GAAQqB,IACxDsD,EAAK,GAAKxE,EAAmBrG,EAAOyK,EAAYjE,OAAO,GAAG,GAAIN,GAAQqB,MAdtEsD,EAAK,GAAKxE,EAAmBD,EAAaG,MAAM,GAAImE,EAAYxE,GAAQqB,IACxEsD,EAAK,GAAKxE,EAAmBqE,EAAYC,EAAUzE,GAAQqB,IAC3DsD,EAAK,GAAKxE,EAAmBqE,EAAY1K,EAAOkG,GAAQqB,IACxDsD,EAAK,GAAKxE,EAAmBrG,EAAO2K,EAAUzE,GAAQqB,KAanDsD,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,KAiClDhD,EAAc,SACvBiD,EACA9E,EACA+B,GACmC,IAAD,EAElC,OADArB,QAAQC,IAAI,8BACL,YAAI,IAAIoE,KAAK,MAAgBC,OAAjB,oBAA2BhF,MAAUc,QACpD,SAACC,EAAKC,GAAN,sBACOD,EADP,eAEKC,EACGA,IAAQ8D,EACF,GACe,MAAd/C,EArBF,SAACkD,EAAgBC,EAAgBlF,GAAwB,IAAD,uBACzE,YAAkBA,EAAlB,+CAA0B,CAAC,IAAlBmF,EAAiB,QAClBC,EAAOD,EAAM1J,QAAQwJ,GACrBI,EAAOF,EAAM1J,QAAQyJ,GACzB,IAAc,IAAVE,GAAeA,EAAOC,EAAM,OAAO,GAJ8B,kFAMzE,OAAO,EAgBeC,CAAaR,EAAW9D,EAAKhB,GA/BhC,SAACiF,EAAgBC,EAAgBlF,GAAwB,IAAD,uBAC3E,YAAkBA,EAAlB,+CAA0B,CAAC,IAAlBmF,EAAiB,QAClBC,EAAOD,EAAM1J,QAAQwJ,GACrBI,EAAOF,EAAM1J,QAAQyJ,GACzB,IAAc,IAAVG,GAAeA,EAAOD,EAAM,OAAO,GAJgC,kFAM3E,OAAO,EA0BeG,CAAeT,EAAW9D,EAAKhB,IACnC,GACC,MAEf,KAIKrF,EAAb,WAOI,WAAY6K,GAA8C,IAAD,gCANzDhE,QAAU,GAM+C,KALzDf,QAAU,GAK+C,KAJzDuB,SAAW,GAI8C,KAHzD9H,QAAU,GAG+C,KAFzDkG,aAAe,GAE0C,KAQ/CrG,eAAiB,SAACC,GACxB,OAAO,GAT8C,KAe/CU,gBAAkB,SAACV,GACzB,OAAO,GAhB8C,KAsBlDyL,WAAa,SAACR,EAAgBC,GACjC,OAAK,EAAKhL,QAAQ+K,GAAQxK,SAASH,SAAS4K,GAGrC,EAAI,EAAKxK,gBAAgBuK,GAAU,EAAKlL,eAAemL,IAFlDQ,KAxByC,KAgHjDC,eAAiB,SAACC,GACtB,IAEIC,EAFK,GACEC,KACYvB,KAAKwB,KAAK,GAC7BC,EAAOJ,EAAgB,EAAIC,EAE/B,MAAO,CAAEC,GALA,GAKIG,KAJFH,KAIQD,OAAMK,KADdF,EAAOzB,KAAKwB,KAAK,GACGC,SAtHsB,KA4HjDG,WAAa,SAACP,GAA2B,IAAD,EACP,EAAKD,eAAeC,GAAnDE,EADsC,EACtCA,GAAIG,EADkC,EAClCA,KAAMJ,EAD4B,EAC5BA,KAAMK,EADsB,EACtBA,KAAMF,EADgB,EAChBA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,YAAsCJ,EAAtC,cAAgDK,EAAhD,YAAwDF,EAAxD,cAAkEF,EAAlE,YAAwEA,EAAxE,kBAAoFG,EAApF,YAA4FJ,IA9HvC,KAoIjDO,WAAa,SAACR,GAA2B,IAAD,EACP,EAAKD,eAAeC,GAAnDE,EADsC,EACtCA,GAAIG,EADkC,EAClCA,KAAMJ,EAD4B,EAC5BA,KAAMK,EADsB,EACtBA,KAAMF,EADgB,EAChBA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,aAAuCJ,EAAvC,cAAiDK,EAAjD,aAA0DF,EAA1D,cAAoEF,EAApE,YAA0EA,EAA1E,kBAAsFG,EAAtF,aAA+FJ,IArI/FQ,KAAKnM,QAAUsL,EAAKtL,QACpBmM,KAAKjG,aAAeoF,EAAKpF,aATjC,sDAoCwBpG,EAAe+F,GAC/B,GAAI/F,KAASqM,KAAK7E,QAAS,OAAO6E,KAAK7E,QAAQxH,GAE/C,GACI,CAAC,YAAa,WAAWM,SAASN,IAClCqM,KAAKnM,QAAQF,GAAOO,QAAQC,OAAS,GACrC6L,KAAKnM,QAAQF,GAAOS,SAASD,OAAS,EAGtC,OADA6L,KAAK7E,QAAQxH,GAAS,EACf,EAEX,IAAIsM,EAAUD,KAAKnM,QAAQF,GAAOO,QAAQ,GAC1C,GAAI+L,EAAS,CAET,GAA8C,IAA1CD,KAAKnM,QAAQoM,GAAS7L,SAASD,OAAc,CAE7C,IAAIP,EAAMoM,KAAKE,UAAUD,GAEzB,OADAD,KAAK7E,QAAQxH,GAASC,EACfA,EAGP,IAAIA,EAAgE,IAAlDoM,KAAKnM,QAAQoM,GAAS7L,SAASgB,QAAQzB,GAAe,GAAK,EAE7E,OADAqM,KAAK7E,QAAQxH,GAASC,EACfA,EAKX,OADAoM,KAAK7E,QAAQxH,GAAS,EACf,IAhEnB,iCAiFuBA,GACf,GAAc,cAAVA,EAEA,OADAqM,KAAKrE,SAAL,WAA6B,GACtB,EAEX,IACI3G,EAAMgL,KAAKjG,aAAaG,MAAM9E,QAAQzB,GAAS,EACnD,IAAa,IAATqB,EAAY,CACZ,IAAImL,EAAQH,KAAKnM,QAAQF,GAAOO,QAAQ,GACxC,GAA4C,IAAxC8L,KAAKnM,QAAQsM,GAAO/L,SAASD,OAAc,CAC3C,IAAIP,EALDoM,KAKYpE,WAAWuE,GAE1B,OADAH,KAAKrE,SAAShI,GAASC,EAChBA,EAEX,IAAIA,GATGoM,KASSpE,WAAWuE,GAE3B,OADAH,KAAKrE,SAAShI,GAASC,EAChBA,EAGX,OADAoM,KAAKrE,SAAShI,GAAiB,IAARqB,EACR,IAARA,IApGf,gCAoJQoL,EACAvF,EACAnB,EACA2G,EACAC,EACAf,EACAxB,GACD,IAAD,qBACgC,GADhC,GACOwC,EADP,KACeC,EADf,KACsBC,EADtB,KAEMrE,EAAO,GAFb,EAIuB4D,KAAKV,eAAeC,GACrCmB,EALN,EAIQd,KAJR,EAIcC,KACc,EACtBc,GAAc9F,EAAO,GAAKA,EAAO,IAAMkD,EAAG7C,IAAO,GACjD0F,IAAc/F,EAAO,GAAKA,EAAO,IAAMkD,EAAG7C,IAAM,EAAIwF,GAAS,EAiDjE,OAhDIE,EAAYD,EAAY,GACxBtG,QAAQwG,KAAR,+BAAqCD,EAAYD,IAGrDP,EAAO3D,SAAQ,SAAA9I,GACX,IAAIwD,EAAIkJ,EAAO1M,GACXuE,EAAIoI,EAAO3M,GACf,IAAK6M,GAAmB,IAAVA,EAmBV,OAlBCD,EAAyB5M,EAAjB8M,EAAwBtJ,EAAjBqJ,EAAoBtI,OACd,IAAlBkI,EAAOjM,OACPiI,EAAKjH,KAAL,YAAegC,EAAf,YAAoBe,IACZwB,EAAS,GAAGzF,SAASN,GAGtB+F,EAAS,GAAGzF,SAASmM,EAAO,IAEnChE,EAAKjH,KAAL,YAAegC,EAAf,YAAoBe,KAGhBmI,EAAOD,EAAO,IAAM,GACpBhE,EAAKjH,KAAL,YAAegC,EAAf,YAAoBe,EAAI,OAExBoI,EAAOF,EAAO,IAAM,GACpBhE,EAAKjH,KAAL,YAAegC,EAAf,YAAoBe,EAAI,QAV5BkE,EAAKjH,KAAL,YAAegC,EAAf,YAAoBe,KAexBA,EAAIsI,GACJpE,EAAKjH,KACD,YAAM,IAAN+C,EACWf,EAAIsJ,EAAQE,EAAY,EAAKjN,eAAeC,GAASiN,EAAoB,EAARF,EACjEC,EAAY,EAAKtM,gBAAgBkM,GAAUK,IAE1DxE,EAAKjH,KAAK,EAAK2K,WAAWP,KACnBrH,EAAIsI,IACXpE,EAAKjH,KACD,YAAM,IAAN+C,EACWf,EAAIsJ,EAAQE,EAAY,EAAKjN,eAAeC,GAASiN,EAAoB,EAARF,EACjEC,EAAY,EAAKtM,gBAAgBkM,GAAUK,IAE1DxE,EAAKjH,KAAK,EAAK4K,WAAWR,KAE9BnD,EAAKjH,KAAL,YAAegC,IACdoJ,EAAyB5M,EAAjB8M,EAAwBtJ,EAAjBqJ,EAAoBtI,KAIjCkE,EAAK0E,KAAK,KAAKC,QAAQ,kBAAmB,YAnNzD,kCAoEsBlN,EAAsB6F,GACpCW,QAAQC,IAAI,sBACZ,IAAI0G,EAAW,IAAIhB,KAAK,CAAEnM,YAQ1B,OANA0G,OAAOC,KAAK3G,GAAS4I,SAAQ,SAAA9I,GACrB,CAAC,YAAa,WAAWM,SAASN,IAClCA,KAASqN,EAAS7F,SACtB6F,EAASd,UAAUvM,EAAO+F,MAGvBsH,EAAS7F,UA9ExB,iCAuGsBtH,EAAsBkK,GACpC1D,QAAQC,IAAI,2BACZ,IAAI0G,EAAW,IAAIhB,KAAK,CAAEnM,UAASkG,aAAcgE,IAQjD,OANAxD,OAAOC,KAAK3G,GAAS4I,SAAQ,SAAA9I,GACrB,CAAC,YAAa,WAAWM,SAASN,IAClCA,KAASqN,EAASrF,UACtBqF,EAASpF,WAAWjI,MAGjBqN,EAASrF,WAjHxB,+BAuNQjC,EACA6B,EACA1H,EACAgH,EACAI,EACAI,EACAkE,EACAxB,GACD,IAAD,OACMlC,EAAY,CAAES,KAAM,GAAgBH,KAAM,IAoD9C,OAnDAzC,EAAS+C,SAAQ,SAACxH,EAAQ4D,GAEtB,IAAIoI,GADJhM,EAASA,EAAO0H,QAAO,SAAAhJ,GAAK,OAAK,CAAC,YAAa,WAAWM,SAASN,OACzCgJ,QAAO,SAAAhJ,GAAK,OAAI4H,EAAU5H,IAAU,KAC1DuN,EAAejM,EAAO0H,QAAO,SAAAhJ,GAAK,OAAI4H,EAAU5H,IAAU,KAElC,IAAxBsN,EAAa9M,SACb+M,EAAejM,GAG6D,IAA5EgM,EAAatE,QAAO,SAAAhJ,GAAK,OAAqC,IAAjCuN,EAAa9L,QAAQzB,MAAeQ,QAAgB8M,EAAa9M,SAE1F+M,EAAa,KAAOjM,EAAO,GAE3BiM,EAAa/L,KAAK8L,EAAa,IAE/BA,EAAa,KAAOhM,EAAO,IAC3BgM,EAAaA,EAAa9M,OAAS,KAAOc,EAAOA,EAAOd,OAAS,IACjE+M,EAAa/M,QAEb+M,EAAejM,EACfgM,EAAe,IAGfC,EAAalD,QAAQiD,EAAaA,EAAa9M,OAAS,KAIhE0H,EAAUS,KAAKnH,KACX,IAAI,EAAK,CAAEtB,UAASkG,aAAcgE,IAAMoD,UACpCF,EACApG,EACAnB,EACAuB,EACAI,EACAkE,EACAxB,IAGRlC,EAAUM,KAAKhH,KACX,IAAI,EAAK,CAAEtB,UAASkG,aAAcgE,IAAMoD,UACpCD,EACArG,EACAnB,EACAuB,EACAI,EACAkE,EACAxB,OAKLlC,MApRf,KAwRaC,EAAW,SAACpC,EAAsB6B,GAC3C,IAAIM,EAAY,CAAES,KAAM,GAAkBH,KAAM,IAgChD,OA/BAzC,EAAS+C,SAAQ,SAAAxH,GAEb,IAAIgM,GADJhM,EAASA,EAAO0H,QAAO,SAAAhJ,GAAK,OAAK,CAAC,YAAa,WAAWM,SAASN,OACzCgJ,QAAO,SAAAhJ,GAAK,OAAI4H,EAAU5H,IAAU,KAC1DuN,EAAejM,EAAO0H,QAAO,SAAAhJ,GAAK,OAAI4H,EAAU5H,IAAU,KAElC,IAAxBsN,EAAa9M,SACb+M,EAAejM,GAG6D,IAA5EgM,EAAatE,QAAO,SAAAhJ,GAAK,OAAqC,IAAjCuN,EAAa9L,QAAQzB,MAAeQ,QAAgB8M,EAAa9M,SAE1F+M,EAAa,KAAOjM,EAAO,GAE3BiM,EAAa/L,KAAK8L,EAAa,IAE/BA,EAAa,KAAOhM,EAAO,IAC3BgM,EAAaA,EAAa9M,OAAS,KAAOc,EAAOA,EAAOd,OAAS,IACjE+M,EAAa/M,QAEb+M,EAAejM,EACfgM,EAAe,IAGfC,EAAalD,QAAQiD,EAAaA,EAAa9M,OAAS,KAIhE0H,EAAUS,KAAKnH,KAAK8L,GACpBpF,EAAUM,KAAKhH,KAAK+L,MAGjBrF,I,2DCxcInD,oBAAK,SAAkBlE,GAA6B,IAAD,EAC9D,OACI,0BACI6D,KAAK,0BACLD,OAAQ,GACRrC,OAAK,GACDmB,MAAO,wBADN,cAEA,qBAA8B1C,EAAMsI,SAFpC","file":"static/js/railmapMTR.cfbb35db.chunk.js","sourcesContent":["import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { type, tick_direc } = this.stnList[stnId].transfer;\n        if (tick_direc === 'l') {\n            if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n                res += 0.8;\n            }\n        }\n        if (type === 'osi22') res += 0.8;\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { type, tick_direc } = this.stnList[stnId].transfer;\n        if (tick_direc === 'r') {\n            if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n                res += 0.8;\n            }\n        }\n        if (type === 'osi22') res += 0.8;\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import React, { useState, useContext, useMemo, useRef, useEffect } from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    stnY?: number;\n}\n\nconst StationMTR = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    /**\n     * Arrays of directions of the branches a station has.\n     */\n    const branchPos = useMemo(\n        () => {\n            let pos: ('SE' | 'NE' | 'SW' | 'NW')[] = [];\n            if (stnInfo.branch.right.length) {\n                pos.push(stnInfo.children.indexOf(stnInfo.branch.right[1]) === 1 ? 'SE' : 'NE');\n            }\n            if (stnInfo.branch.left.length) {\n                pos.push(stnInfo.parents.indexOf(stnInfo.branch.left[1]) === 1 ? 'SW' : 'NW');\n            }\n            return pos;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnInfo.parents.toString(), stnInfo.children.toString(), JSON.stringify(stnInfo.branch)]\n    );\n\n    /**\n     * Affix added to station icon's `href`.\n     */\n    const branchAffix = useMemo(\n        () => {\n            let pos = branchPos;\n            if (pos.length === 0) {\n                return '';\n            }\n            if (pos.includes('NW') && pos.includes('SE')) {\n                return '_bb';\n            }\n            if (pos.includes('NE') && pos.includes('SW')) {\n                return '_bb';\n            }\n            return '_b';\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString()]\n    );\n\n    /**\n     * Changes of vertical position of station icon due to branching shift (11px/line width). Icon rotation should also be applied when using this property.\n     */\n    const branchDy = useMemo(\n        () => {\n            let affix = branchAffix;\n            if (affix === '') {\n                return 0;\n            } else if (affix === '_bb') {\n                return props.namePos ? 9.68 : -9.68;\n            } else {\n                let pos = branchPos;\n                if (pos.includes('SE') || pos.includes('SW')) {\n                    return props.namePos ? 9.68 : 0;\n                }\n                if (pos.includes('NE') || pos.includes('NW')) {\n                    return props.namePos ? 0 : -9.68;\n                }\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString(), branchAffix, props.namePos]\n    );\n\n    /**\n     * Changes of vertical position of other elements such as intTick or intName. The result of the ternary operator is the opposite of `this._branchDy`\n     */\n    const branchElDy = useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return props.namePos ? -9.68 : 9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return props.namePos ? 0 : 9.68;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return props.namePos ? -9.68 : 0;\n            }\n        }\n    }, [branchAffix, props.namePos, branchPos]);\n\n    const stnIcon = (({ type, info }) => {\n        switch (type) {\n            case 'int3':\n            case 'osi31':\n                if (info[0].length < 11) {\n                    return `int${info[0].length + 1}`;\n                } else {\n                    return 'int12';\n                }\n            case 'osi11':\n            case 'osi21':\n                return 'osi11';\n            case 'osi12':\n            case 'osi13':\n                return 'osi12';\n            case 'osi22':\n                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {\n                    return 'osi22end';\n                } else {\n                    return 'osi12';\n                }\n            default:\n                return 'stn';\n        }\n    })(stnInfo.transfer);\n\n    return (\n        <>\n            <g style={{ transform: `translateY(${branchElDy}px)` }}>\n                <IntTickGroup\n                    variant={\n                        stnInfo.transfer.type === 'osi22' &&\n                        (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend')\n                            ? 'osi22end'\n                            : stnInfo.transfer.type\n                    }\n                    stnTrans={stnInfo.transfer}\n                    stnState={props.stnState}\n                    namePos={props.namePos}\n                    end={stnIcon === 'osi22end' ? (stnInfo.parents[0] === 'linestart' ? 'left' : 'right') : undefined}\n                />\n                {stnIcon.includes('osi') && (\n                    <OSIName\n                        name={stnInfo.transfer.osi_names[0]}\n                        stnState={props.stnState}\n                        variant={\n                            stnInfo.transfer.type === 'osi22' &&\n                            (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend')\n                                ? 'osi22end'\n                                : (stnInfo.transfer.type as any)\n                        }\n                        tickDirec={stnInfo.transfer.tick_direc}\n                        namePos={props.namePos}\n                        end={\n                            stnIcon === 'osi22end' ? (stnInfo.parents[0] === 'linestart' ? 'left' : 'right') : undefined\n                        }\n                    />\n                )}\n            </g>\n            <use\n                xlinkHref={'#' + stnIcon + branchAffix}\n                className={\n                    (props.stnState === -1 ? 'rmg-stn__mtr--pass' : 'rmg-stn__mtr--future') +\n                    (stnInfo.transfer.paid_area ? ' rmg-stn__mtr--paid-osi' : ' rmg-stn__mtr--unpaid-osi')\n                }\n                style={{\n                    transform:\n                        `translateY(${branchDy}px)` +\n                        `scale(${stnInfo.children[0] === 'lineend' ? 1 : -1},${props.namePos ? -1 : 1})`,\n                }}\n            />\n            <g style={{ transform: `translateY(${branchDy}px)` }}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    namePos={props.namePos}\n                    stnState={props.stnState}\n                    facility={stnInfo.facility}\n                    nameDX={\n                        stnInfo.transfer.type === 'osi22' && stnIcon === 'osi12'\n                            ? stnInfo.transfer.tick_direc === 'l'\n                                ? 3\n                                : -3\n                            : undefined\n                    }\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    namePos: boolean;\n    stnState: -1 | 0 | 1;\n    nameDX?: number;\n    facility: '' | 'airport' | 'hsr' | 'disney';\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    /**\n     * Top (in pixels) of station's Chinese name.\n     */\n    const NAME_ZH_TOP = -10.8125;\n    /**\n     * Height (in pixels) of station's Chinese name.\n     */\n    // const NAME_ZH_HEIGHT = 21.625;\n    /**\n     * Top (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_TOP = -8;\n    /**\n     * Height (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_HEIGHT = 13.21875;\n    /**\n     * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n     */\n    const NAME_ZH_EN_GAP = 17;\n    /**\n     * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n     */\n    const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n    /**\n     * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n     */\n    const STN_NAME_LINE_GAP = 14;\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0, x: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnState, props.name.toString()]\n    );\n\n    const dy = props.namePos\n        ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n        : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - (props.name[1].split('\\\\').length - 1) * 11;\n\n    const textAnchor = !props.nameDX ? 'middle' : props.nameDX > 0 ? 'start' : 'end';\n    const osi22DY = !props.nameDX ? 0 : props.namePos ? 11.515625 : -11.515625;\n\n    const facilityX = !props.nameDX\n        ? -(bBox.width + 3) / 2\n        : props.nameDX > 0\n        ? props.nameDX + (NAME_FULL_HEIGHT + 2) / 2\n        : -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width + props.nameDX;\n    const facilityNameDX =\n        props.facility === ''\n            ? 0\n            : !props.nameDX\n            ? (NAME_FULL_HEIGHT + 2 + 3) / 2\n            : props.nameDX < 0\n            ? 0\n            : NAME_FULL_HEIGHT + 2 + 3 + props.nameDX;\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            style={{ transform: `translateY(${dy + osi22DY}px)` }}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'Current' : 'Future'}`}\n        >\n            {props.stnState === 0 && (\n                <rect\n                    id=\"current_bg\"\n                    x={bBox.x - 3 + (facilityNameDX === 0 ? 0 : facilityNameDX - 1)}\n                    y={NAME_ZH_TOP - 1}\n                    width={bBox.width + 6 + (facilityNameDX === 0 ? 0 : 1)}\n                    height={NAME_FULL_HEIGHT + (props.name[1].split('\\\\').length - 1) * 11 + 2}\n                />\n            )}\n            {props.facility !== '' && (\n                <use\n                    xlinkHref={'#' + props.facility}\n                    fill={props.stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    x={facilityX}\n                    y={NAME_ZH_TOP - 1 + (props.name[1].split('\\\\').length - 1) * 5.5}\n                />\n            )}\n            <g ref={stnNameEl} style={{ transform: `translateX(${facilityNameDX}px)` }}>\n                <StationName name={props.name} nameGap={NAME_ZH_EN_GAP} />\n            </g>\n        </g>\n    );\n};\n\ninterface StationNameProps {\n    name: Name;\n    nameGap: number;\n}\n\nconst StationName = React.memo(\n    (props: StationNameProps) => {\n        return (\n            <>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{props.name[0]}</text>\n                {props.name[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={props.nameGap + i * 11}>\n                        {txt}\n                    </text>\n                ))}\n            </>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.name.toString() === nextProps.name.toString() && prevProps.nameGap === nextProps.nameGap\n);\n\ninterface IntTickGroupProps {\n    variant: 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22' | 'osi22end' | 'none' | 'osi13' | 'osi21' | 'osi31';\n    stnTrans: StationTransfer;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    end?: 'left' | 'right';\n}\n\nconst IntTickGroup = (props: IntTickGroupProps) => {\n    switch (props.variant) {\n        case 'int2':\n            return (\n                <g>\n                    <IntTick\n                        intInfo={props.stnTrans.info[0][0]}\n                        stnState={props.stnState}\n                        rotation={props.namePos ? 180 : 0}\n                    />\n                </g>\n            );\n        case 'int3':\n        case 'osi31':\n            return (\n                <>\n                    {props.stnTrans.info[0].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 18 * (i + 1) : -18 * (props.stnTrans.info[0].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi11':\n        case 'osi21':\n            return (\n                <g\n                    style={{\n                        transform: `translateY(${props.namePos ? -26 : 26}px)`,\n                    }}\n                >\n                    <IntTick\n                        intInfo={props.stnTrans.info[1][0]}\n                        stnState={props.stnState}\n                        rotation={props.namePos ? 180 : 0}\n                    />\n                </g>\n            );\n        case 'osi12':\n        case 'osi13':\n            return (\n                <>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 8 + 18 * (i + 1) : -8 - 18 * (props.stnTrans.info[1].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={props.stnTrans.info[0][0]}\n                            stnState={props.stnState}\n                            rotation={props.namePos ? 0 : 180}\n                            nameDX={props.stnTrans.tick_direc === 'r' ? 3 : -3}\n                        />\n                    </g>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 8 + 18 * (i + 1) : -8 - 18 * (props.stnTrans.info[1].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22end':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={props.stnTrans.info[0][0]}\n                            stnState={props.stnState}\n                            rotation={props.namePos ? 180 : 0}\n                        />\n                    </g>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translate(${props.end === 'left' ? -41 : 41}px,${\n                                    props.namePos ? 18 * i : -18 * (props.stnTrans.info[1].length - 1 - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.end === 'left' ? 90 : -90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        default:\n            return <></>;\n    }\n};\n\ninterface IntTickProps {\n    intInfo: InterchangeInfo;\n    stnState: -1 | 0 | 1;\n    rotation: 0 | 90 | 180 | -90;\n    nameDX?: number;\n}\n\nconst IntTick = (props: IntTickProps) => {\n    const nameZHLns = props.intInfo[4].split('\\\\').length;\n    const nameENLns = props.intInfo[5].split('\\\\').length;\n\n    const x = (rotation => {\n        switch (rotation) {\n            case 90:\n                return -24;\n            case -90:\n                return 24;\n            default:\n                return 0;\n        }\n    })(props.rotation);\n\n    const y = (rotation => {\n        switch (rotation) {\n            case 0:\n                return 25 + 5.953125;\n            case 180:\n                return -25 + 5.953125 - 18.65625 - 10 * (nameZHLns - 1) - 7 * (nameENLns - 1);\n            default:\n                return 5.953125 - (19.65625 + 10 * (nameZHLns - 1) + 7 * (nameENLns - 1) - 1) / 2;\n        }\n    })(props.rotation);\n\n    const textAnchor = (rotation => {\n        switch (rotation) {\n            case 90:\n                return 'end';\n            case -90:\n                return 'start';\n            default:\n                if (!props.nameDX) {\n                    return 'middle';\n                } else if (props.nameDX > 0) {\n                    return 'start';\n                } else {\n                    return 'end';\n                }\n        }\n    })(props.rotation);\n\n    return useMemo(\n        () => (\n            <>\n                <use\n                    xlinkHref=\"#inttick\"\n                    stroke={props.intInfo[2]}\n                    style={{ transform: `rotate(${props.rotation}deg)` }}\n                    className={\n                        'rmg-line rmg-line__mtr rmg-line__change' + (props.stnState === -1 ? ' rmg-line__pass' : '')\n                    }\n                />\n                <g\n                    textAnchor={textAnchor}\n                    style={{\n                        transform: `translate(${x + (props.nameDX || 0)}px,${y}px)`,\n                    }}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    {props.intInfo[4].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__zh IntName\" dy={10 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                    {props.intInfo[5].split('\\\\').map((txt, i) => (\n                        <text key={nameZHLns + i} className=\"rmg-name__en IntName\" dy={nameZHLns * 10 - 1 + 7 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.intInfo.toString(), props.rotation, props.stnState]\n    );\n};\n\ninterface OSINameProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    variant: 'osi11' | 'osi12' | 'osi13' | 'osi22' | 'osi22end' | 'osi31' | 'osi21';\n    tickDirec: 'l' | 'r';\n    namePos: boolean;\n    end?: 'left' | 'right';\n}\n\nconst OSIName = (props: OSINameProps) => {\n    const textAnchor = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return props.tickDirec === 'l' ? 'end' : 'start';\n            case 'osi22':\n                return props.tickDirec === 'l' ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    })(props.variant);\n\n    const x = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return props.tickDirec === 'l' ? -13 : 13;\n            case 'osi22':\n                return props.tickDirec === 'l' ? 13 : -13;\n            case 'osi22end':\n                return props.end === 'left' ? -41 : 41;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const y = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return (\n                    (!props.namePos ? 26 : -26) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    (!props.namePos ? 0 : 10 * (props.name[1].split('\\\\').length - 1))\n                );\n            case 'osi12':\n                return !props.namePos\n                    ? 26 + 18 + 10 + 8.34375\n                    : -(26 + 18 + 10) + 8.34375 - 25.03125 - 10 * (props.name[1].split('\\\\').length - 1);\n            case 'osi22':\n                return (\n                    (!props.namePos ? 26 - 18 : -8) -\n                    (props.namePos ? 18 + 9 : -27) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    5 * (props.name[1].split('\\\\').length - 1)\n                );\n            case 'osi22end':\n                return !props.namePos\n                    ? 10 + 8.34375\n                    : -10 + 8.34375 - 25.03125 - 10 * (props.name[1].split('\\\\').length - 1);\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            style={{ transform: `translate(${x}px,${y}px)` }}\n            className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n        >\n            <text className=\"rmg-name__zh rmg-name__mtr--osi\">{props.name[0]}</text>\n            {props.name[1].split('\\\\').map((txt, i) => (\n                <text key={i} className=\"rmg-name__en rmg-name__mtr--osi\" dy={12 + 10 * i}>\n                    {txt}\n                </text>\n            ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, criticalPathMethod, getXShareMTR, getStnState } from '../methods/share';\nimport { StationsMTR } from '../methods/mtr';\nimport StationMTR from './station/station-mtr';\n\nconst leftWideFactor = (stnList: { [stnId: string]: StationInfo }, stnId: string) => {\n    var res = 0;\n    let { type, tick_direc } = stnList[stnId].transfer;\n    if (tick_direc === 'l') {\n        if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n            res += 0.8;\n        }\n    }\n    if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res;\n};\n\nconst rightWideFactor = (stnList: { [stnId: string]: StationInfo }, stnId: string) => {\n    var res = 0;\n    let { type, tick_direc } = stnList[stnId].transfer;\n    if (tick_direc === 'r') {\n        if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n            res += 0.8;\n        }\n    }\n    if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nconst MainMTR = () => {\n    const { param, branches, routes, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = React.useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = React.useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => StationsMTR.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]:\n                -yShares[cur] * param.branch_spacing +\n                (branches[0].includes(cur) ? 0 : yShares[cur] > 0 ? -9.68 : 9.68),\n        }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const namePoss = React.useMemo(\n        () => StationsMTR.getNamePos(param.stn_list, criticalPath),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps, JSON.stringify(criticalPath)]\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g style={{ fill: 'none', strokeWidth: 9.68 }}>\n                <g style={{ stroke: 'var(--rmg-grey)' }}>\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n                <g style={{ stroke: 'var(--rmg-theme-colour)' }}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    let correctedNamePoss = {} as { [stnId: string]: boolean };\n    Object.keys(props.namePoss).forEach(\n        stnId => (correctedNamePoss[stnId] = param.txt_flip ? !props.namePoss[stnId] : props.namePoss[stnId])\n    );\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationMTR\n                            stnId={stnId}\n                            stnState={props.stnStates[stnId]}\n                            namePos={correctedNamePoss[stnId]}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nconst RailMapMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={param.strip_pc} />\n            <MainMTR />\n        </>\n    );\n};\n\nexport default RailMapMTR;\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <circle id=\"stn\" r={8} className=\"rmg-stn__mtr\" />\n            <path\n                id=\"stn_b\"\n                className=\"rmg-stn__mtr\"\n                d=\"M -6.369803765,4.84 a 8,8 0 1,1 12.73960753,0 a 8,8 0 1,1 -12.73960758,0 Z\"\n            />\n            <path\n                id=\"stn_bb\"\n                d=\"M -6.369803765,4.84 a 8,8 0 1,1 12.73960753,0 a 8,8 0 0,1 0,9.68 a 8,8 0 1,1 -12.73960753,0 a 8,8 0 0,1 0,-9.68 Z\"\n                className=\"rmg-stn__mtr\"\n            />\n            <path id=\"int2\" d=\"M -8,0 v 18 a 8,8 0 0,0 16,0 v -18 a 8,8 0 0,0 -16,0 Z\" className=\"rmg-stn__mtr\" />\n\n            {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(n => {\n                let h = 18 * (n - 1);\n                return (\n                    <React.Fragment key={n}>\n                        <path\n                            id={`int${n}`}\n                            d={`M -8,0 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -16,0 Z`}\n                            className=\"rmg-stn__mtr\"\n                        />\n                        <path\n                            id={`int${n}_b`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M -8,9.68 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -1.630196235,-4.84 a 8,8 0 1,0 -12.73960758,0 a 8,8 0 0,0 -1.630196235,4.84 Z`}\n                        />\n                        <path\n                            id={`int${n}_bb`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M -8,19.36 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -1.630196235,-4.84 a 8,8 0 0,0 0,-9.68 a 8,8 0 1,0 -12.73960758,0 a 8,8 0 0,0 0,9.68 a 8,8 0 0,0 -1.630196235,4.84 Z`}\n                        />\n                    </React.Fragment>\n                );\n            })}\n\n            <g id=\"osi11\">\n                <path d=\"M 0,0 V 26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#stn\" y={26} />\n            </g>\n            <g id=\"osi11_b\">\n                <path d=\"M 0,0 V 35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#stn\" y={35.68} />\n            </g>\n            <g id=\"osi11_bb\">\n                <path d=\"M 0,0 V 45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#stn\" y={45.36} />\n            </g>\n\n            <g id=\"osi12\">\n                <path d=\"M 0,0 V 26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" y={26} />\n            </g>\n            <g id=\"osi12_b\">\n                <path d=\"M 0,11 V 35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" y={35.68} />\n            </g>\n            <g id=\"osi12_bb\">\n                <path d=\"M 0,11 V 45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#int2\" y={45.36} />\n            </g>\n\n            <g id=\"osi22end\">\n                <path d=\"M 0,0 H 41\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" x={41} y={-18} />\n            </g>\n            <g id=\"osi22end_b\">\n                <path d=\"M 0,9.68 H 41\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" x={41} y={-8.32} />\n            </g>\n\n            <path id=\"inttick\" d=\"M 0,0 v 17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    private getNamePos(stnId: string): boolean {\n        if (stnId === 'linestart') {\n            this.namePoss['linestart'] = true;\n            return true;\n        }\n        let self = this;\n        let pos = this.criticalPath.nodes.indexOf(stnId) % 2; // -1, 0 or 1;\n        if (pos === -1) {\n            let parId = this.stnList[stnId].parents[0];\n            if (this.stnList[parId].children.length === 2) {\n                let res = self.getNamePos(parId);\n                this.namePoss[stnId] = res;\n                return res;\n            }\n            let res = !self.getNamePos(parId);\n            this.namePoss[stnId] = res;\n            return res;\n        }\n        this.namePoss[stnId] = pos === 1;\n        return pos === 1;\n    }\n\n    static getNamePos(stnList: StationDict, cp: { len: number; nodes: string[] }) {\n        console.log('computing name position');\n        let stations = new this({ stnList, criticalPath: cp });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.namePoss) return;\n            stations.getNamePos(stnId);\n        });\n\n        return stations.namePoss;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n"],"sourceRoot":""}