{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","svgs/railmap/methods/share.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","svgs/strip/strip-mtr.tsx","svgs/railmap/methods/mtr.ts","svgs/railmap/main/station/station-mtr.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","adjacencyList","stnList","leftW","rightW","keys","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","indexOf","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","pos","parId","getNamePos","stnIds","lineXs","realXs","realYs","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","map","lineMainStns","linePassStns","_linePath","drawLine","_assertThisInitialized","self","ReferenceError","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_typeof","obj","Symbol","iterator","constructor","_possibleConstructorReturn","call","assertThisInitialized","_setPrototypeOf","p","_inherits","subClass","superClass","create","value","React","fill","height","style","width","stripPc","StationsMTR","transfer","type","tick_direc","StationMTR","stnInfo","ParamContext","param","stn_list","branchPos","right","left","toString","JSON","stringify","branchAffix","branchDy","namePos","branchElDy","stnIcon","info","transform","variant","stnTrans","stnState","end","name","osi_names","tickDirec","xlinkHref","className","paid_area","facility","nameDX","StationNameGElement","stnNameEl","bBox","setBBox","current","getBBox","dy","STN_NAME_LINE_GAP","split","textAnchor","osi22DY","facilityX","facilityNameDX","NAME_FULL_HEIGHT","id","NAME_ZH_TOP","ref","StationName","nameGap","txt","prevProps","nextProps","IntTickGroup","intInfo","rotation","IntTick","nameZHLns","nameENLns","stroke","OSIName","MainMTR","deps","realCP","svgWidth","railmap","padding","getYShares","branch_spacing","current_stn_idx","y_pc","Lines","paths","strokeWidth","d","StationGroup","correctedNamePoss","txt_flip","DefsMTR","RailMapMTR","strip_pc","clipPath","points","r","n","h","strokeLinecap"],"mappings":"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","file":"static/js/railmapMTR.6fcd7514.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import * as Global from '../../../methods';\nimport { StationInfo, RMGParam } from '../../../types';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from == to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set([].concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length == 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) == 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    private getNamePos(stnId: string) {\n        if (stnId === 'linestart') {\n            this.namePoss['linestart'] = true;\n            return true;\n        }\n        let self = this;\n        let pos = this.criticalPath.nodes.indexOf(stnId) % 2; // -1, 0 or 1;\n        if (pos === -1) {\n            let parId = this.stnList[stnId].parents[0];\n            if (this.stnList[parId].children.length === 2) {\n                let res = self.getNamePos(parId);\n                this.namePoss[stnId] = res;\n                return res;\n            }\n            let res = !self.getNamePos(parId);\n            this.namePoss[stnId] = res;\n            return res;\n        }\n        this.namePoss[stnId] = pos === 1;\n        return pos === 1;\n    }\n\n    static getNamePos(stnList, cp) {\n        console.log('computing name position');\n        let stations = new this({ stnList, criticalPath: cp });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.namePoss) return;\n            stations.getNamePos(stnId);\n        });\n\n        return stations.namePoss;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX]: [string?, number?, number?] = [];\n        var path = [];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.map((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.map(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length == 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import * as React from 'react';\n\nexport default React.memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { type, tick_direc } = this.stnList[stnId].transfer;\n        if (tick_direc === 'l') {\n            if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n                res += 0.8;\n            }\n        }\n        if (type === 'osi22') res += 0.8;\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { type, tick_direc } = this.stnList[stnId].transfer;\n        if (tick_direc === 'r') {\n            if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n                res += 0.8;\n            }\n        }\n        if (type === 'osi22') res += 0.8;\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import * as React from 'react';\nimport { ParamContext } from '../../../../context';\nimport { Name, InterchangeInfo, StationTransfer } from '../../../../types';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    stnY?: number;\n}\n\nconst StationMTR = (props: Props) => {\n    const { param } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    /**\n     * Arrays of directions of the branches a station has.\n     */\n    const branchPos = React.useMemo(() => {\n        let pos: ('SE' | 'NE' | 'SW' | 'NW')[] = [];\n        if (stnInfo.children.length === 2) {\n            pos.push(stnInfo.children.indexOf(stnInfo.branch.right[1]) === 1 ? 'SE' : 'NE');\n        }\n        if (stnInfo.parents.length === 2) {\n            pos.push(stnInfo.parents.indexOf(stnInfo.branch.left[1]) === 1 ? 'SW' : 'NW');\n        }\n        return pos;\n    }, [stnInfo.parents.toString(), stnInfo.children.toString(), JSON.stringify(stnInfo.branch)]);\n\n    /**\n     * Affix added to station icon's `href`.\n     */\n    const branchAffix = React.useMemo(() => {\n        let pos = branchPos;\n        if (pos.length === 0) {\n            return '';\n        }\n        if (pos.includes('NW') && pos.includes('SE')) {\n            return '_bb';\n        }\n        if (pos.includes('NE') && pos.includes('SW')) {\n            return '_bb';\n        }\n        return '_b';\n    }, [branchPos.toString()]);\n\n    /**\n     * Changes of vertical position of station icon due to branching shift (11px/line width). Icon rotation should also be applied when using this property.\n     */\n    const branchDy = React.useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return props.namePos ? 9.68 : -9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return props.namePos ? 9.68 : 0;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return props.namePos ? 0 : -9.68;\n            }\n        }\n    }, [branchPos.toString(), branchAffix, props.namePos]);\n\n    /**\n     * Changes of vertical position of other elements such as intTick or intName. The result of the ternary operator is the opposite of `this._branchDy`\n     */\n    const branchElDy = React.useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return props.namePos ? -9.68 : 9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return props.namePos ? 0 : 9.68;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return props.namePos ? -9.68 : 0;\n            }\n        }\n    }, [branchAffix, props.namePos, branchPos]);\n\n    const stnIcon = (({ type, info }) => {\n        switch (type) {\n            case 'int3':\n            case 'osi31':\n                if (info[0].length < 11) {\n                    return `int${info[0].length + 1}`;\n                } else {\n                    return 'int12';\n                }\n            case 'osi11':\n            case 'osi21':\n                return 'osi11';\n            case 'osi12':\n            case 'osi13':\n                return 'osi12';\n            case 'osi22':\n                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {\n                    return 'osi22end';\n                } else {\n                    return 'osi12';\n                }\n            default:\n                return 'stn';\n        }\n    })(stnInfo.transfer);\n\n    return (\n        <>\n            <g style={{ transform: `translateY(${branchElDy}px)` }}>\n                <IntTickGroup\n                    variant={\n                        stnInfo.transfer.type === 'osi22' &&\n                        (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend')\n                            ? 'osi22end'\n                            : stnInfo.transfer.type\n                    }\n                    stnTrans={stnInfo.transfer}\n                    stnState={props.stnState}\n                    namePos={props.namePos}\n                    end={stnIcon === 'osi22end' ? (stnInfo.parents[0] === 'linestart' ? 'left' : 'right') : null}\n                />\n                {stnIcon.includes('osi') && (\n                    <OSIName\n                        name={stnInfo.transfer.osi_names[0]}\n                        stnState={props.stnState}\n                        variant={\n                            stnInfo.transfer.type === 'osi22' &&\n                            (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend')\n                                ? 'osi22end'\n                                : (stnInfo.transfer.type as any)\n                        }\n                        tickDirec={stnInfo.transfer.tick_direc}\n                        namePos={props.namePos}\n                        end={stnIcon === 'osi22end' ? (stnInfo.parents[0] === 'linestart' ? 'left' : 'right') : null}\n                    />\n                )}\n            </g>\n            <use\n                xlinkHref={'#' + stnIcon + branchAffix}\n                className={\n                    (props.stnState === -1 ? 'rmg-stn__mtr--pass' : 'rmg-stn__mtr--future') +\n                    (stnInfo.transfer.paid_area ? ' rmg-stn__mtr--paid-osi' : ' rmg-stn__mtr--unpaid-osi')\n                }\n                style={{\n                    transform:\n                        `translateY(${branchDy}px)` +\n                        `scale(${stnInfo.children[0] === 'lineend' ? 1 : -1},${props.namePos ? -1 : 1})`,\n                }}\n            />\n            <g style={{ transform: `translateY(${branchDy}px)` }}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    namePos={props.namePos}\n                    stnState={props.stnState}\n                    facility={stnInfo.facility}\n                    nameDX={\n                        stnInfo.transfer.type === 'osi22' && stnIcon === 'osi12'\n                            ? stnInfo.transfer.tick_direc === 'l'\n                                ? 3\n                                : -3\n                            : null\n                    }\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    namePos: boolean;\n    stnState: -1 | 0 | 1;\n    nameDX?: number;\n    facility: '' | 'airport' | 'hsr' | 'disney';\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    /**\n     * Top (in pixels) of station's Chinese name.\n     */\n    const NAME_ZH_TOP = -10.8125;\n    /**\n     * Height (in pixels) of station's Chinese name.\n     */\n    const NAME_ZH_HEIGHT = 21.625;\n    /**\n     * Top (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_TOP = -8;\n    /**\n     * Height (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_HEIGHT = 13.21875;\n    /**\n     * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n     */\n    const NAME_ZH_EN_GAP = 17;\n    /**\n     * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n     */\n    const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n    /**\n     * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n     */\n    const STN_NAME_LINE_GAP = 14;\n\n    const stnNameEl = React.createRef<SVGGElement>();\n    const [bBox, setBBox] = React.useState({ width: 0, x: 0 } as DOMRect);\n    React.useEffect(() => {\n        setBBox(stnNameEl.current.getBBox());\n    }, [props.stnState, props.name.toString()]);\n\n    const dy = props.namePos\n        ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n        : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - (props.name[1].split('\\\\').length - 1) * 11;\n\n    const textAnchor = !props.nameDX ? 'middle' : props.nameDX > 0 ? 'start' : 'end';\n    const osi22DY = !props.nameDX ? 0 : props.namePos ? 11.515625 : -11.515625;\n\n    const facilityX = !props.nameDX\n        ? -(bBox.width + 3) / 2\n        : props.nameDX > 0\n        ? props.nameDX + (NAME_FULL_HEIGHT + 2) / 2\n        : -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width + props.nameDX;\n    const facilityNameDX =\n        props.facility === ''\n            ? 0\n            : !props.nameDX\n            ? (NAME_FULL_HEIGHT + 2 + 3) / 2\n            : props.nameDX < 0\n            ? 0\n            : NAME_FULL_HEIGHT + 2 + 3 + props.nameDX;\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            style={{ transform: `translateY(${dy + osi22DY}px)` }}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'Current' : 'Future'}`}\n        >\n            {props.stnState === 0 && (\n                <rect\n                    id=\"current_bg\"\n                    x={bBox.x - 3 + (facilityNameDX === 0 ? 0 : facilityNameDX - 1)}\n                    y={NAME_ZH_TOP - 1}\n                    width={bBox.width + 6 + (facilityNameDX === 0 ? 0 : 1)}\n                    height={NAME_FULL_HEIGHT + (props.name[1].split('\\\\').length - 1) * 11 + 2}\n                />\n            )}\n            {props.facility !== '' && (\n                <use\n                    xlinkHref={'#' + props.facility}\n                    fill={props.stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    x={facilityX}\n                    y={NAME_ZH_TOP - 1 + (props.name[1].split('\\\\').length - 1) * 5.5}\n                />\n            )}\n            <g ref={stnNameEl} style={{ transform: `translateX(${facilityNameDX}px)` }}>\n                <StationName name={props.name} nameGap={NAME_ZH_EN_GAP} />\n            </g>\n        </g>\n    );\n};\n\ninterface StationNameProps {\n    name: Name;\n    nameGap: number;\n}\n\nconst StationName = React.memo(\n    (props: StationNameProps) => {\n        return (\n            <>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{props.name[0]}</text>\n                {props.name[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={props.nameGap + i * 11}>\n                        {txt}\n                    </text>\n                ))}\n            </>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.name.toString() === nextProps.name.toString() && prevProps.nameGap === nextProps.nameGap\n);\n\ninterface IntTickGroupProps {\n    variant: 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22' | 'osi22end' | 'none' | 'osi13' | 'osi21' | 'osi31';\n    stnTrans: StationTransfer;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    end?: 'left' | 'right';\n}\n\nconst IntTickGroup = (props: IntTickGroupProps) => {\n    switch (props.variant) {\n        case 'int2':\n            return (\n                <g>\n                    <IntTick\n                        intInfo={props.stnTrans.info[0][0]}\n                        stnState={props.stnState}\n                        rotation={props.namePos ? 180 : 0}\n                    />\n                </g>\n            );\n        case 'int3':\n        case 'osi31':\n            return (\n                <>\n                    {props.stnTrans.info[0].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 18 * (i + 1) : -18 * (props.stnTrans.info[0].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi11':\n        case 'osi21':\n            return (\n                <g\n                    style={{\n                        transform: `translateY(${props.namePos ? -26 : 26}px)`,\n                    }}\n                >\n                    <IntTick\n                        intInfo={props.stnTrans.info[1][0]}\n                        stnState={props.stnState}\n                        rotation={props.namePos ? 180 : 0}\n                    />\n                </g>\n            );\n        case 'osi12':\n        case 'osi13':\n            return (\n                <>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 8 + 18 * (i + 1) : -8 - 18 * (props.stnTrans.info[1].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={props.stnTrans.info[0][0]}\n                            stnState={props.stnState}\n                            rotation={props.namePos ? 0 : 180}\n                            nameDX={props.stnTrans.tick_direc === 'r' ? 3 : -3}\n                        />\n                    </g>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translateY(${\n                                    !props.namePos ? 8 + 18 * (i + 1) : -8 - 18 * (props.stnTrans.info[1].length - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.stnTrans.tick_direc === 'r' ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22end':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={props.stnTrans.info[0][0]}\n                            stnState={props.stnState}\n                            rotation={props.namePos ? 180 : 0}\n                        />\n                    </g>\n                    {props.stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            style={{\n                                transform: `translate(${props.end === 'left' ? -41 : 41}px,${\n                                    props.namePos ? 18 * i : -18 * (props.stnTrans.info[1].length - 1 - i)\n                                }px)`,\n                            }}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={props.stnState}\n                                rotation={props.end === 'left' ? 90 : -90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        default:\n            return <></>;\n    }\n};\n\ninterface IntTickProps {\n    intInfo: InterchangeInfo;\n    stnState: -1 | 0 | 1;\n    rotation: 0 | 90 | 180 | -90;\n    nameDX?: number;\n}\n\nconst IntTick = (props: IntTickProps) => {\n    const nameZHLns = props.intInfo[4].split('\\\\').length;\n    const nameENLns = props.intInfo[5].split('\\\\').length;\n\n    const x = (rotation => {\n        switch (rotation) {\n            case 90:\n                return -24;\n            case -90:\n                return 24;\n            default:\n                return 0;\n        }\n    })(props.rotation);\n\n    const y = (rotation => {\n        switch (rotation) {\n            case 0:\n                return 25 + 5.953125;\n            case 180:\n                return -25 + 5.953125 - 18.65625 - 10 * (nameZHLns - 1) - 7 * (nameENLns - 1);\n            default:\n                return 5.953125 - (19.65625 + 10 * (nameZHLns - 1) + 7 * (nameENLns - 1) - 1) / 2;\n        }\n    })(props.rotation);\n\n    const textAnchor = (rotation => {\n        switch (rotation) {\n            case 90:\n                return 'end';\n            case -90:\n                return 'start';\n            default:\n                if (!props.nameDX) {\n                    return 'middle';\n                } else if (props.nameDX > 0) {\n                    return 'start';\n                } else {\n                    return 'end';\n                }\n        }\n    })(props.rotation);\n\n    return React.useMemo(\n        () => (\n            <>\n                <use\n                    xlinkHref=\"#inttick\"\n                    stroke={props.intInfo[2]}\n                    style={{ transform: `rotate(${props.rotation}deg)` }}\n                    className={\n                        'rmg-line rmg-line__mtr rmg-line__change' + (props.stnState === -1 ? ' rmg-line__pass' : '')\n                    }\n                />\n                <g\n                    textAnchor={textAnchor}\n                    style={{\n                        transform: `translate(${x + (props.nameDX || 0)}px,${y}px)`,\n                    }}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    {props.intInfo[4].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__zh IntName\" dy={10 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                    {props.intInfo[5].split('\\\\').map((txt, i) => (\n                        <text key={nameZHLns + i} className=\"rmg-name__en IntName\" dy={nameZHLns * 10 - 1 + 7 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </>\n        ),\n        [props.intInfo.toString(), props.rotation, props.stnState]\n    );\n};\n\ninterface OSINameProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    variant: 'osi11' | 'osi12' | 'osi13' | 'osi22' | 'osi22end' | 'osi31' | 'osi21';\n    tickDirec: 'l' | 'r';\n    namePos: boolean;\n    end?: 'left' | 'right';\n}\n\nconst OSIName = (props: OSINameProps) => {\n    const textAnchor = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return props.tickDirec === 'l' ? 'end' : 'start';\n            case 'osi22':\n                return props.tickDirec === 'l' ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    })(props.variant);\n\n    const x = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return props.tickDirec === 'l' ? -13 : 13;\n            case 'osi22':\n                return props.tickDirec === 'l' ? 13 : -13;\n            case 'osi22end':\n                return props.end === 'left' ? -41 : 41;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const y = (variant => {\n        switch (variant) {\n            case 'osi11':\n            case 'osi21':\n                return (\n                    (!props.namePos ? 26 : -26) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    (!props.namePos ? 0 : 10 * (props.name[1].split('\\\\').length - 1))\n                );\n            case 'osi12':\n                return !props.namePos\n                    ? 26 + 18 + 10 + 8.34375\n                    : -(26 + 18 + 10) + 8.34375 - 25.03125 - 10 * (props.name[1].split('\\\\').length - 1);\n            case 'osi22':\n                return (\n                    (!props.namePos ? 26 - 18 : -8) -\n                    (props.namePos ? 18 + 9 : -27) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    5 * (props.name[1].split('\\\\').length - 1)\n                );\n            case 'osi22end':\n                return !props.namePos\n                    ? 10 + 8.34375\n                    : -10 + 8.34375 - 25.03125 - 10 * (props.name[1].split('\\\\').length - 1);\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            style={{ transform: `translate(${x}px,${y}px)` }}\n            className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n        >\n            <text className=\"rmg-name__zh rmg-name__mtr--osi\">{props.name[0]}</text>\n            {props.name[1].split('\\\\').map((txt, i) => (\n                <text key={i} className=\"rmg-name__en rmg-name__mtr--osi\" dy={12 + 10 * i}>\n                    {txt}\n                </text>\n            ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, criticalPathMethod, getXShareMTR, getStnState } from '../methods/share';\nimport { StationsMTR } from '../methods/mtr';\nimport StationMTR from './station/station-mtr';\nimport { StationInfo } from '../../../types';\n\nconst leftWideFactor = (stnList: { [stnId: string]: StationInfo }, stnId: string) => {\n    var res = 0;\n    let { type, tick_direc } = stnList[stnId].transfer;\n    if (tick_direc === 'l') {\n        if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n            res += 0.8;\n        }\n    }\n    if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res;\n};\n\nconst rightWideFactor = (stnList: { [stnId: string]: StationInfo }, stnId: string) => {\n    var res = 0;\n    let { type, tick_direc } = stnList[stnId].transfer;\n    if (tick_direc === 'r') {\n        if (['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) {\n            res += 0.8;\n        }\n    }\n    if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nconst MainMTR = () => {\n    const { param, branches, routes, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = React.useMemo(() => criticalPathMethod('linestart', 'lineend', adjMat), [\n        JSON.stringify(adjMat),\n    ]);\n    const realCP = React.useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = React.useMemo(() => {\n        console.log('computing x shares');\n        return Object.keys(param.stn_list).reduce(\n            (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n            {}\n        );\n    }, [branches.toString(), JSON.stringify(adjMat)]);\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(() => StationsMTR.getYShares(param.stn_list, branches), [deps]);\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]:\n                -yShares[cur] * param.branch_spacing +\n                (branches[0].includes(cur) ? 0 : yShares[cur] > 0 ? -9.68 : 9.68),\n        }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(() => getStnState(param.current_stn_idx, routes, param.direction), [\n        param.current_stn_idx,\n        param.direction,\n        routes.toString(),\n    ]);\n\n    const namePoss = React.useMemo(() => StationsMTR.getNamePos(param.stn_list, criticalPath), [\n        deps,\n        JSON.stringify(criticalPath),\n    ]);\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g style={{ fill: 'none', strokeWidth: 9.68 }}>\n                <g style={{ stroke: 'var(--rmg-grey)' }}>\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n                <g style={{ stroke: 'var(--rmg-theme-colour)' }}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    let correctedNamePoss = {} as { [stnId: string]: boolean };\n    Object.keys(props.namePoss).forEach(\n        stnId => (correctedNamePoss[stnId] = param.txt_flip ? !props.namePoss[stnId] : props.namePoss[stnId])\n    );\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list).map(stnId => {\n                if (['linestart', 'lineend'].includes(stnId)) return;\n                return (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationMTR\n                            stnId={stnId}\n                            stnState={props.stnStates[stnId]}\n                            namePos={correctedNamePoss[stnId]}\n                        />\n                    </g>\n                );\n            })}\n        </g>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nconst RailMapMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={param.strip_pc} />\n            <MainMTR />\n        </>\n    );\n};\n\nexport default RailMapMTR;\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <circle id=\"stn\" r={8} className=\"rmg-stn__mtr\" />\n            <path\n                id=\"stn_b\"\n                className=\"rmg-stn__mtr\"\n                d=\"M -6.369803765,4.84 a 8,8 0 1,1 12.73960753,0 a 8,8 0 1,1 -12.73960758,0 Z\"\n            />\n            <path\n                id=\"stn_bb\"\n                d=\"M -6.369803765,4.84 a 8,8 0 1,1 12.73960753,0 a 8,8 0 0,1 0,9.68 a 8,8 0 1,1 -12.73960753,0 a 8,8 0 0,1 0,-9.68 Z\"\n                className=\"rmg-stn__mtr\"\n            />\n            <path id=\"int2\" d=\"M -8,0 v 18 a 8,8 0 0,0 16,0 v -18 a 8,8 0 0,0 -16,0 Z\" className=\"rmg-stn__mtr\" />\n\n            {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(n => {\n                let h = 18 * (n - 1);\n                return (\n                    <React.Fragment key={n}>\n                        <path\n                            id={`int${n}`}\n                            d={`M -8,0 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -16,0 Z`}\n                            className=\"rmg-stn__mtr\"\n                        />\n                        <path\n                            id={`int${n}_b`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M -8,9.68 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -1.630196235,-4.84 a 8,8 0 1,0 -12.73960758,0 a 8,8 0 0,0 -1.630196235,4.84 Z`}\n                        />\n                        <path\n                            id={`int${n}_bb`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M -8,19.36 v ${h} a 8,8 0 0,0 16,0 v -${h} a 8,8 0 0,0 -1.630196235,-4.84 a 8,8 0 0,0 0,-9.68 a 8,8 0 1,0 -12.73960758,0 a 8,8 0 0,0 0,9.68 a 8,8 0 0,0 -1.630196235,4.84 Z`}\n                        />\n                    </React.Fragment>\n                );\n            })}\n\n            <g id=\"osi11\">\n                <path d=\"M 0,0 V 26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#stn\" y={26} />\n            </g>\n            <g id=\"osi11_b\">\n                <path d=\"M 0,0 V 35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#stn\" y={35.68} />\n            </g>\n            <g id=\"osi11_bb\">\n                <path d=\"M 0,0 V 45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#stn\" y={45.36} />\n            </g>\n\n            <g id=\"osi12\">\n                <path d=\"M 0,0 V 26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" y={26} />\n            </g>\n            <g id=\"osi12_b\">\n                <path d=\"M 0,11 V 35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" y={35.68} />\n            </g>\n            <g id=\"osi12_bb\">\n                <path d=\"M 0,11 V 45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#int2\" y={45.36} />\n            </g>\n\n            <g id=\"osi22end\">\n                <path d=\"M 0,0 H 41\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" x={41} y={-18} />\n            </g>\n            <g id=\"osi22end_b\">\n                <path d=\"M 0,9.68 H 41\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" x={41} y={-8.32} />\n            </g>\n\n            <path id=\"inttick\" d=\"M 0,0 v 17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n"],"sourceRoot":""}