{"version":3,"sources":["panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/chip-set.tsx","panels/stations/delete-diags.tsx","panels/stations/auto-num-diag.tsx","panels/stations/fabs.tsx","panels/stations/panel.tsx","panels/stations/index.ts"],"names":["getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","stnId","numsZH","numsEN","split","map","char","parseInt","join","StationAddDialog","React","props","t","useTranslation","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","tpo","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","stnList","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","console","log","p","Boolean","indexOf","handleClick","action","onClose","newId","includes","newInfo","name","num","services","branch","left","right","transfer","info","type","tick_direc","paid_area","osi_names","facility","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","lineend","addStation","paramUpdate","Dialog","open","DialogTitle","DialogContent","dividers","List","ListItem","ListItemIcon","Icon","TextField","select","style","width","variant","label","onChange","e","target","value","MenuItem","key","formatStnName","idx","disabled","display","DialogActions","Button","onClick","color","autoFocus","prevProps","nextProps","prevDeps","nextDeps","NameTab","InterchangeTab","BranchTab","MoreTab","useStyles","makeStyles","theme","createStyles","tab","padding","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","ParamContext","param","dispatch","stnInfo","stn_list","tabIndex","setTabIndex","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","tabNav","Tabs","indicatorColor","textColor","_","val","scrollButtons","i","Tab","icon","className","interchangeUpdate","transInfo","updatedValue","inf","values","concat","Typography","component","role","fallback","CircularProgress","stnTrans","onUpdate","Set","field","root","backgroundColor","palette","background","paper","borderRadius","boxShadow","shadows","rootSize","margin","rootSizeTablet","rootSizeMobile","stnChipText","textAlign","stnChipTextZH","fontSize","fontWeight","lineHeight","stnChipTextEN","whiteSpace","overflow","addChipLabel","stnChipLabel","StationChipSet","isTablet","isMobile","replace","Chip","window","urlParams","get","Avatar","onSelection","StationDeleteDialog","DialogContentText","i18nKey","StationDeleteErrorDialog","AutoNumDialog","branches","branch0","fab","position","spacing","bottom","StationFabs","fabEl","setFabEl","handleAction","onAction","Tooltip","title","aria-label","Fab","Menu","anchorEl","ListItemText","primary","PanelStations","stnChipSetSelection","setState","snackBarOpened","stationSelected","stnAddDialogOpened","stnEditDialogOpened","stnDeleteDialogOpened","stnDeleteErrDialogOpened","autoNumDialogOpened","this","index","servicesSet","selected","delete","chipId","add","from","isLastMainBranchStn","id","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","currentId","newCurrentId","filter","reverse","tmpArr","reverseStations","bind","addStationClick","Snackbar","r","snackBarClose","autoHideDuration","message","size","IconButton","fabsAction","stnAddDialogClose","stnEditDialogUpdate","stnDeleteClose","withTranslation","Panel"],"mappings":"mWAqOA,SAASA,IACL,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,IAAI,GAAI,IAAIC,SAAS,IAAIC,SAAS,EAAG,KAGhF,SAASC,EAAcC,GACnB,IAAIC,EAAS,CACT,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAC7C,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAC9B,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAC9B,SAAK,SAAK,SAAK,SACf,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAEnCC,EAAS,CACT,OAAQ,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OACxE,OAAQ,QAAS,UAAW,QAAS,OAAQ,UAAW,OACxD,QAAS,QAAS,UAAW,OAAQ,OAAQ,OAAQ,WACrD,QAAS,OAAQ,SAAU,QAC3B,SAAU,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,QAE1E,MAAO,CACHF,EAAMG,MAAM,IAAIC,KAAI,SAAAC,GAAI,OAAIJ,EAAOK,SAASD,EAAM,QAAME,KAAK,IAC7DP,EAAMG,MAAM,IAAIC,KAAI,SAAAC,GAAI,OAAIH,EAAOI,SAASD,EAAM,QAAME,KAAK,MAQ9D,ICOQC,EAtLUC,QACrB,SAACC,GAAkC,IACvBC,EAAMC,cAAND,EAEFE,EAAU,CACZC,OAAQH,EAAE,uBACVI,MAAOJ,EAAE,sBACTK,MAAOL,EAAE,sBACTM,SAAUN,EAAE,yBACZO,SAAUP,EAAE,0BARc,EAWNF,WAAe,UAXT,mBAWvBU,EAXuB,KAWjBC,EAXiB,OAYJX,WAAeC,EAAMW,IAAI,IAZrB,mBAYvBC,EAZuB,KAYhBC,EAZgB,OAaRd,WAAee,OAAOC,KAAKZ,GAAS,IAb5B,mBAavBa,EAbuB,KAalBC,EAbkB,OAcJlB,WAAemB,MAAM,GAAGC,MAAK,IAdzB,mBAcvBC,EAduB,KAchBC,EAdgB,OAgBRtB,WAAe,IAhBP,mBAgBvBuB,EAhBuB,KAgBlBC,EAhBkB,OAiBAxB,WAAe,IAjBf,mBAiBvByB,EAjBuB,KAiBdC,EAjBc,KAoBxBC,EAAU3B,WAAc,kBAlEZ,SACtBU,EACAG,EACAe,GAGA,OADUA,EAAQf,GAASe,EAAQf,GAAgB,WAATH,EAAoB,UAAY,YAAYmB,OAAS,GAE3F,KAAK,EAED,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,IACzB,KAAK,EACD,IAAIC,EAAIC,YAAalB,EAAOe,GAC5B,GAAS,GAALE,EAAQ,CAER,IAAIE,EAhCS,SAACtB,EAA0BG,EAAee,GACnE,IAAIK,EAAgB,GACpB,GAAY,UAARvB,EAAkB,CAClB,KAAwC,GAAjCkB,EAAQf,GAAOqB,QAAQL,QAC1BhB,EAAQe,EAAQf,GAAOqB,QAAQ,GAC/BD,EAAIE,QAAQtB,GAEhBoB,EAAIG,UACD,CACH,KAAyC,GAAlCR,EAAQf,GAAOwB,SAASR,QAC3BhB,EAAQe,EAAQf,GAAOwB,SAAS,GAChCJ,EAAIK,KAAKzB,GAEboB,EAAIM,QAER,OAAON,EAiB+BO,CAAqB9B,EAAMG,EAAOe,GAE5D,MAAO,CAAC,EAAG,EAAG,EADdI,EAAQA,EAAMH,OAASG,EAAQ,GACPA,GAErB,OAAIF,EAAI,EACC,UAARpB,EACO,CAACkB,EAAQA,EAAQf,GAAOqB,QAAQ,IAAIG,SAASR,OAAS,EAAG,EAAG,EAAG,GAAI,IAEnE,CAACD,EAAQA,EAAQf,GAAOwB,SAAS,IAAIH,QAAQL,OAAS,EAAG,EAAG,EAAG,GAAI,IAGlE,UAARnB,EACO,CAACkB,EAAQA,EAAQf,GAAOqB,QAAQ,IAAIG,SAASR,OAAS,EAAG,EAAG,EAAG,GAAI,IAEnE,CAACD,EAAQA,EAAQf,GAAOwB,SAAS,IAAIH,QAAQL,OAAS,EAAG,EAAG,EAAG,GAAI,IAI1F,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,IAkCmBY,CAAkB/B,EAAMG,EAAOZ,EAAM2B,WAAU,CAC/ElB,EACAG,EACAZ,EAAM2B,UAEV5B,aAAgB,WACZ0C,QAAQC,IAAI,OACZrB,EAASK,EAAQhC,KAAI,SAAAiD,GAAC,MAAkB,kBAANA,EAAiBC,QAAQD,GAAKC,QAAQD,EAAEf,YAC1EH,EAAWC,EAAQ,MACpB,CAACA,EAAQvC,aAGZY,aAAgB,WACZkB,EAAOH,OAAOC,KAAKZ,GAASiB,EAAMyB,SAAQ,OAC3C,CAACzB,IAGJrB,aAAgB,WACW,IAAnByB,EAAQI,QACZL,EAAOC,EAAQ,MAChB,CAACA,IAGJzB,aAAgB,WACNa,KAASZ,EAAM2B,SAAUd,EAASb,EAAMW,IAAI,MACnD,CAACG,OAAOC,KAAKf,EAAM2B,SAASxC,aAE/B,IAAM2D,EAAc,SAACC,GACjB,GAAe,UAAXA,EACA/C,EAAMgD,QAAQ,aACX,CAAC,IAAD,EDnIO,SACtBvC,EACAnB,EACA0B,EACAM,EACAK,GAIA,IADA,IAAIsB,EAAQnE,IACLgC,OAAOC,KAAKY,GAASuB,SAASD,IACjCA,EAAQnE,IAEZ,IAAIqE,EAAuB,CACvBC,KAAM/D,EAAc4D,GACpBI,IAAK,KACLC,SAAU,CAAC,SACXrB,QAAS,GACTG,SAAU,GACVmB,OAAQ,CACJC,KAAM,GACNC,MAAO,IAEXC,SAAU,CACNC,KAAM,CAAC,IACPC,KAAM,OACNC,WAAY,IACZC,WAAW,EACXC,UAAW,IAEfC,SAAU,IAGVC,EAAaC,KAAKC,MAAMD,KAAKE,UAAUzC,IA4L3C,MA1La,WAATlB,EACY,WAARO,GACAmC,EAAQlB,QAAUN,EAAQrC,GAAO2C,QACK,IAAlCN,EAAQrC,GAAO2C,QAAQL,QAAiD,IAAjCE,YAAaxC,EAAOqC,GAE3DwB,EAAQf,SAAWT,EAAQ0C,UAAUjC,SACG,IAAjCN,YAAaxC,EAAOqC,IAE3BwB,EAAQf,SAAWT,EAAQA,EAAQrC,GAAO2C,QAAQ,IAAIG,SAASkC,QAC/DnB,EAAQI,OAAOE,MAAQ9B,EAAQwB,EAAQlB,QAAQ,IAAIsB,OAAOE,MAC1DQ,EAAWd,EAAQlB,QAAQ,IAAIsB,OAAOE,MAAQ,KAG9CN,EAAQf,SAAW,CAAC9C,GACpB6D,EAAQI,OAAOC,KAAO7B,EAAQrC,GAAOiE,OAAOC,KAC5CS,EAAW3E,GAAOiE,OAAOC,KAAO,IAEpCL,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,MAEhCE,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,OAElB,UAARjC,EAC+B,IAAlCW,EAAQrC,GAAO2C,QAAQL,QACnBD,EAAQrC,GAAOiE,OAAOC,KAAK,KAAO7B,EAAQrC,GAAO2C,QAAQ,KACzDgC,EAAW3E,GAAOiE,OAAOC,KAAK,GAAKP,GAGvCE,EAAQlB,QAAUN,EAAQrC,GAAO2C,QAAQqC,MAAM,EAAG,GAClDnB,EAAQf,SAAW,CAAC9C,GACpB6D,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,MAEhCgB,EAAW3E,GAAO2C,QAAQ,GAAKgB,IAG/BE,EAAQlB,QAAUN,EAAQrC,GAAO2C,QACjCkB,EAAQf,SAAW,CAAC9C,GACpB6D,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAS,GAAKa,EAE1BtB,EAAQ6C,GAAKjB,OAAOE,MAAM,KAAOnE,IACjC2E,EAAWO,GAAKjB,OAAOE,MAAM,GAAKR,MAG1CE,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,OAGtB,UAARjC,EAC+B,IAAlCW,EAAQrC,GAAO2C,QAAQL,QACnBD,EAAQrC,GAAOiE,OAAOC,KAAK,IAAM7B,EAAQrC,GAAO2C,QAAQ,KACxDgC,EAAW3E,GAAOiE,OAAOC,KAAK,GAAKP,GAGvCE,EAAQlB,QAAUN,EAAQrC,GAAO2C,QAAQqC,MAAM,GAC/CnB,EAAQf,SAAW,CAAC9C,GACpB6D,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,MAEhCgB,EAAW3E,GAAO2C,QAAQ,GAAKgB,IAG/BE,EAAQlB,QAAUN,EAAQrC,GAAO2C,QACjCkB,EAAQf,SAAW,CAAC9C,GACpB6D,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpB,IAAIE,EAAc/C,EAAQ6C,GAAKpC,SAASR,OACxCqC,EAAWO,GAAKpC,SAASsC,EAAc,GAAKzB,EAExCtB,EAAQ6C,GAAKjB,OAAOE,MAAM,KAAOnE,IACjC2E,EAAWO,GAAKjB,OAAOE,MAAM,GAAKR,MAG1CE,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,QAIrCgB,EAAW3E,GAAOiE,OAAOC,KAAO,CAAC,UAAWP,GAC5CgB,EAAW3C,GAAKiC,OAAOE,MAAQ,CAAC,UAAWR,GAC3CE,EAAQlB,QAAU,CAACX,GACnB6B,EAAQf,SAAW,CAAC9C,GAER,aAAR0B,GACAiD,EAAW3C,GAAKc,SAASF,QAAQe,GACjCgB,EAAW3E,GAAO2C,QAAQC,QAAQe,KAElCgB,EAAW3C,GAAKc,SAASC,KAAKY,GAC9BgB,EAAW3E,GAAO2C,QAAQI,KAAKY,KAI3B,WAARjC,GACAmC,EAAQf,SAAWT,EAAQrC,GAAO8C,SACK,IAAnCT,EAAQrC,GAAO8C,SAASR,QAAgD,GAAhCE,YAAaxC,EAAOqC,GAC5DwB,EAAQlB,QAAUN,EAAQgD,QAAQ1C,QACK,GAAhCH,YAAaxC,EAAOqC,IAE3BwB,EAAQlB,QAAUN,EAAQA,EAAQrC,GAAO8C,SAAS,IAAIH,QACtDkB,EAAQI,OAAOC,KAAO7B,EAAQwB,EAAQf,SAAS,IAAImB,OAAOC,KAC1DS,EAAWd,EAAQf,SAAS,IAAImB,OAAOC,KAAO,KAG9CL,EAAQlB,QAAU,CAAC3C,GACnB6D,EAAQI,OAAOE,MAAQ9B,EAAQrC,GAAOiE,OAAOE,MAC7CQ,EAAW3E,GAAOiE,OAAOE,MAAQ,IAErCN,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,MAEjCE,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,OAEjB,UAARjC,EACgC,IAAnCW,EAAQrC,GAAO8C,SAASR,QACpBD,EAAQrC,GAAOiE,OAAOE,MAAM,IAAM9B,EAAQrC,GAAO8C,SAAS,KAC1D6B,EAAW3E,GAAOiE,OAAOE,MAAM,GAAKR,GAGxCE,EAAQf,SAAWT,EAAQrC,GAAO8C,SAASkC,MAAM,EAAG,GACpDnB,EAAQlB,QAAU,CAAC3C,GACnB6D,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,MAEjCgB,EAAW3E,GAAO8C,SAAS,GAAKa,IAGhCE,EAAQf,SAAWT,EAAQrC,GAAO8C,SAClCe,EAAQlB,QAAU,CAAC3C,GACnB6D,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAQ,GAAKgB,EAE3BtB,EAAQ8C,GAAOlB,OAAOC,KAAK,KAAOlE,IAClC2E,EAAWQ,GAAOlB,OAAOC,KAAK,GAAKP,MAG3CE,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,OAGrB,UAARjC,EACgC,IAAnCW,EAAQrC,GAAO8C,SAASR,QACpBD,EAAQrC,GAAOiE,OAAOE,MAAM,IAAM9B,EAAQrC,GAAO8C,SAAS,KAC1D6B,EAAW3E,GAAOiE,OAAOE,MAAM,GAAKR,GAGxCE,EAAQf,SAAWT,EAAQrC,GAAO8C,SAASkC,MAAM,GACjDnB,EAAQlB,QAAU,CAAC3C,GACnB6D,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOxC,QAAU,CAACgB,MAEjCgB,EAAW3E,GAAO8C,SAAS,GAAKa,IAGhCE,EAAQf,SAAWT,EAAQrC,GAAO8C,SAClCe,EAAQlB,QAAU,CAAC3C,GACnB6D,EAAQf,SAASmC,SAAQ,SAAAE,GACrBR,EAAWQ,GACNxC,QAA0C,IAAlCN,EAAQ8C,GAAOxC,QAAQL,OAAe,EAAI,GAAKqB,EAExDtB,EAAQ8C,GAAOlB,OAAOC,KAAK,KAAOlE,IAClC2E,EAAWQ,GAAOlB,OAAOC,KAAK,GAAKP,MAG3CE,EAAQlB,QAAQsC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKpC,SAAW,CAACa,QAIpCgB,EAAW3E,GAAOiE,OAAOE,MAAQ,CAAC,UAAWR,GAC7CgB,EAAW3C,GAAKiC,OAAOC,KAAO,CAAC,UAAWP,GAE1CE,EAAQf,SAAW,CAACd,GACpB6B,EAAQlB,QAAU,CAAC3C,GAEP,aAAR0B,GACAiD,EAAW3C,GAAKW,QAAQC,QAAQe,GAChCgB,EAAW3E,GAAO8C,SAASF,QAAQe,KAEnCgB,EAAW3C,GAAKW,QAAQI,KAAKY,GAC7BgB,EAAW3E,GAAO8C,SAASC,KAAKY,KAKrC,CAACA,EAAD,eACAgB,EADA,eAEFhB,EAAQE,KC1FkByB,CACfnE,EACAG,EACAI,EACAM,EACAtB,EAAM2B,SANP,mBACEsB,EADF,KACSjB,EADT,KAWHhC,EAAM6E,YAAY,WAAY7C,GAE9BhC,EAAMgD,QAAQC,KAItB,OACI,gBAAC6B,EAAA,EAAD,CAAQC,KAAM/E,EAAM+E,KAAM/B,QAAS,kBAAMF,EAAY,WACjD,gBAACkC,EAAA,EAAD,KAAc/E,EAAE,uBAChB,gBAACgF,EAAA,EAAD,CAAeC,UAAQ,GACnB,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,wBAEJ,gBAACC,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEC,MAAO,QAChBC,QAAQ,WACRC,MAAO3F,EAAE,qBACT4F,SAAU,SAAAC,GAAC,OAAIpF,EAAQoF,EAAEC,OAAOC,QAChCA,MAAOvF,GAEP,gBAACwF,EAAA,EAAD,CAAUC,IAAI,SAASF,MAAM,UACxB/F,EAAE,wBAEP,gBAACgG,EAAA,EAAD,CAAUC,IAAI,QAAQF,MAAM,SACvB/F,EAAE,yBAIf,gBAACmF,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,iBAEJ,gBAACC,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEC,MAAO,QAChBC,QAAQ,WACRC,MAAO3F,EAAE,sBACT4F,SAAU,SAAAC,GAAC,OAAIjF,EAASiF,EAAEC,OAAOC,QACjCA,MAAOpF,GAENZ,EAAMW,IAAIjB,KAAI,SAAAJ,GAAK,OAChB,gBAAC2G,EAAA,EAAD,CAAUC,IAAK5G,EAAO0G,MAAO1G,GACxB6G,YAAcnG,EAAM2B,QAAQrC,UAK7C,gBAAC8F,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,eAEJ,gBAACC,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEC,MAAO,QAChBC,QAAQ,WACRC,MAAO3F,EAAE,oBACT4F,SAAU,SAAAC,GAAC,OAAI7E,EAAO6E,EAAEC,OAAOC,QAC/BA,MAAOhF,GAENF,OAAOC,KAAKZ,GAAST,KAAI,SAACwG,EAAKE,GAAN,OACtB,gBAACH,EAAA,EAAD,CAAUC,IAAKA,EAAKF,MAAOE,EAAKG,UAAWjF,EAAMgF,IAC5CjG,EAAQ+F,SAKzB,gBAACd,EAAA,EAAD,CAAUK,MAAO,CAAEa,QAAS,CAAC,WAAY,YAAYpD,SAASlC,GAAO,OAAS,SAC1E,gBAACqE,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,cAEJ,gBAACC,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEC,MAAO,QAChBC,QAAQ,WACRC,MAAO3F,EAAE,oBACT4F,SAAU,SAAAC,GAAC,OAAIvE,EAAOuE,EAAEC,OAAOC,QAC/BA,MAAO1E,GAENE,EAAQ9B,KAAI,SAAAJ,GAAK,OACd,gBAAC2G,EAAA,EAAD,CAAUC,IAAK5G,EAAO0G,MAAO1G,GACxB6G,YAAcnG,EAAM2B,QAAQrC,YAOrD,gBAACiH,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM3D,EAAY,UAAU4D,MAAM,WAC9CzG,EAAE,kBAEP,gBAACuG,EAAA,EAAD,CAAQC,QAAS,kBAAM3D,EAAY,WAAW4D,MAAM,UAAUC,WAAS,GAClE1G,EAAE,mBAMvB,SAAC2G,EAAWC,GACR,GAAID,EAAU7B,OAAS8B,EAAU9B,KAC7B,OAAO,EAEP,IAAI+B,EAAW,GACXC,EAAW,GASf,OARAjG,OAAOC,KAAK8F,EAAUlF,SAAS4C,SAAQ,SAAAjF,GAAU,IAAD,EACLuH,EAAUlF,QAAQrC,GAAnD8D,EADsC,EACtCA,KAAMC,EADgC,EAChCA,IAAKpB,EAD2B,EAC3BA,QAASG,EADkB,EAClBA,SAC1B2E,EAASzH,GAAS,CAAE8D,OAAMC,MAAKpB,UAASG,eAE5CtB,OAAOC,KAAK6F,EAAUjF,SAAS4C,SAAQ,SAAAjF,GAAU,IAAD,EACLsH,EAAUjF,QAAQrC,GAAnD8D,EADsC,EACtCA,KAAMC,EADgC,EAChCA,IAAKpB,EAD2B,EAC3BA,QAASG,EADkB,EAClBA,SAC1B0E,EAASxH,GAAS,CAAE8D,OAAMC,MAAKpB,UAASG,eAErC8B,KAAKE,UAAU0C,KAAc5C,KAAKE,UAAU2C,M,+EC/OzDC,EAAUjH,QAAW,kBAAM,kCAC3BkH,EAAiBlH,QAAW,kBAAM,yDAClCmH,EAAYnH,QAAW,kBAAM,kCAC7BoH,EAAUpH,QAAW,kBAAM,yDAE3BqH,EAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACTC,IAAK,CACDC,QAAS,WACTC,OAAQ,GACRC,SAAU,iBACV,oBAAqB,CACjBC,cAAe,OAEnB,qBAAsB,CAClBC,UAAW,QACX,oBAAqB,CACjB,oBAAqB,CACjBC,aAAc,GAElB,yBAA0B,CACtBC,YAAa,WCxCtBjD,MDuDA,SAA2B9E,GAAgC,IAC9DC,EAAMC,cAAND,EAD6D,EAGzCF,aAAiBiI,KAArCC,EAH6D,EAG7DA,MAAOC,EAHsD,EAGtDA,SAETC,EADUF,EAAMG,SACEpI,EAAMV,OALuC,EAOrCS,WAAe,GAPsB,mBAO9DsI,EAP8D,KAOpDC,EAPoD,KAS/DC,EAAUnB,IACVE,EAAQkB,cACRC,EAAaC,YAAcpB,EAAMqB,YAAYC,KAAK,OAElDC,EAAS9I,WACX,kBACI,gBAAC+I,EAAA,EAAD,CACI9C,MAAOqC,EACPU,eAAe,UACfC,UAAU,UACVnD,SAAU,SAACoD,EAAGC,GAAJ,OAAYZ,EAAYY,IAClCvD,QAAQ,aACRwD,cAAc,OAEb,CACG,CAAC,OAAQ,SACT,CAAC,cAAe,6BAChB,CAAC,SAAU,SACX,CAAC,OAAQ,eACXzJ,KAAI,SAACwJ,EAAKE,GAAN,OACF,gBAACC,EAAA,EAAD,CACIzD,MAAO,4BAAO3F,EAAE,qBAAuBiJ,EAAI,KAC3CI,KAAM,gBAAChE,EAAA,EAAD,KAAO4D,EAAI,IACjBhD,IAAKkD,EACLG,UAAWhB,EAAQf,YAKnC,CAACa,EAAUE,EAAQf,MAGjBgC,EAAoB,SAACC,GACvB,IAAIC,EAAY,eACTD,EADS,CAEZ9F,KAAM8F,EAAU9F,KAAKjE,KAAI,SAAAiK,GAAG,OACxBA,EAAIjK,KAAI,SAAA0J,GAAC,OACuB,IAA5BtI,OAAO8I,OAAOR,GAAGxH,OACTqG,EAAMX,MAAMuC,OAAO,CAAC,eAAM,SAC5BT,UAMlBlB,EAAS,CACLtE,KAAM,0BACNtE,MAAOU,EAAMV,MACboE,SAAUgG,KAIlB,OACI,gBAAC5E,EAAA,EAAD,CAAQ9B,QAAShD,EAAMgD,QAAS+B,KAAM/E,EAAM+E,KAAM0D,WAAYA,GAC1D,gBAACzD,EAAA,EAAD,KAAc/E,EAAE,wBAChB,gBAACgF,EAAA,EAAD,CAAeC,UAAQ,EAACO,MAAO,CAAEgC,QAAS,WACrCoB,EACD,gBAACiB,EAAA,EAAD,CAAYC,UAAU,MAAMC,KAAK,YAC7B,gBAAC,WAAD,CAAgBC,SAAU,gBAACC,EAAA,EAAD,OACpB,SAAA9D,GACE,OAAQA,GACJ,KAAK,EACD,OAAO,gBAACY,EAAD,CAAS1H,MAAOU,EAAMV,QACjC,KAAK,EACD,OACI,gBAAC2H,EAAD,CACIkD,SAAUhC,EAAQzE,SAClB0G,SAAUZ,EACVlK,MAAOU,EAAMV,QAGzB,KAAK,EACD,OAAO,gBAAC4H,EAAD,CAAW5H,MAAOU,EAAMV,QACnC,KAAK,EACD,OACI,gBAAC6H,EAAD,CACInD,SAAUmE,EAAQnE,SAClBV,SAAU,IAAI+G,IAAIlC,EAAQ7E,UAC1B8G,SAAU,SAACpE,EAAOsE,GAAR,OAAkBtK,EAAMoK,SAASpE,EAAOsE,IAClDhL,MAAOU,EAAMV,SApB/B,CAwBC+I,MAIf,gBAAC9B,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,QAASzG,EAAMgD,QAAS0D,MAAM,UAAUC,WAAS,GACpD1G,EAAE,mB,kBEvJjBmH,EAAYC,aAAW,SAAAC,GACzB,OAAOC,YAAa,CAChBgD,KAAM,CACFC,gBAAiBlD,EAAMmD,QAAQC,WAAWC,MAC1CjD,OAAQ,GACRkD,aAAc,EACdC,UAAWvD,EAAMwD,QAAQ,IAE7BC,SAAU,CACNC,OAAQ,EACRtF,MAAO,2BAEXuF,eAAgB,CACZD,OAAQ,EACRtF,MAAO,2BAEXwF,eAAgB,CACZF,OAAQ,EACRtF,MAAO,2BAEXyF,YAAa,CACT7E,QAAS,QACT8E,UAAW,UAEfC,cAAe,CACXC,SAAU,GACVC,WAAY,IACZC,WAAY,UAEhBC,cAAe,CACXH,SAAU,SACVE,WAAY,QACZE,WAAY,MACZC,SAAU,UAEdC,aAAc,CACVL,WAAY,IACZD,SAAU,OACVE,WAAY,SACZJ,UAAW,SACX1F,MAAO,QAEXmG,aAAc,CACVnG,MAAO,aA4EJoG,EA9DQ/L,QACnB,SAACC,GACG,IAAM+L,EAAWrD,YAAc,6CACzBsD,EAAWtD,YAAc,sBACzBH,EAAUnB,IAEhB,OACI,2BACKpH,EAAMW,IAAIjB,KAAI,SAACJ,EAAO8J,GAAO,IAAD,MACrBxD,EACA,4BACI,wBAAM2D,UAAS,UAAKhB,EAAQ4C,YAAb,YAA4B5C,EAAQ8C,iBAC9C,UAAArL,EAAM2B,QAAQrC,UAAd,eAAsB8D,KAAK,KAAM,IAEtC,wBAAMmG,UAAS,UAAKhB,EAAQ4C,YAAb,YAA4B5C,EAAQkD,iBAC9C,UAAAzL,EAAM2B,QAAQrC,UAAd,eAAsB8D,KAAK,GAAG6I,QAAQ,KAAM,UAAW,KAIpE,OACI,gBAACC,EAAA,EAAD,CACIhG,IAAK5G,EACLgK,KACsC,UAAlC6C,OAAOC,UAAUC,IAAI,SACjB,iCAEA,gBAACC,EAAA,EAAD,CAAQ7G,MAAO,CAAE+E,gBAAiB,WAC7B,UAAAxK,EAAM2B,QAAQrC,UAAd,eAAsB+D,MAAO,MAI1CuC,MAAOA,EACPa,QAASzG,EAAMuM,YAAYjN,GAC3BiJ,QAAS,CAAE3C,MAAO2C,EAAQsD,cAC1BtC,UAAS,UAAKhB,EAAQgC,KAAb,YACLyB,EAAWzD,EAAQ2C,eAAiBa,EAAWxD,EAAQ0C,eAAiB1C,EAAQwC,mBAQ5G,SAACnE,EAAWC,GACR,GAAID,EAAUjG,IAAIxB,aAAe0H,EAAUlG,IAAIxB,WAC3C,OAAO,EAEP,IAAI2H,EAAW,GACXC,EAAW,GASf,OARAjG,OAAOC,KAAK8F,EAAUlF,SAAS4C,SAAQ,SAAAjF,GAAU,IAAD,EACxBuH,EAAUlF,QAAQrC,GAAhC8D,EADsC,EACtCA,KAAMC,EADgC,EAChCA,IACZ0D,EAASzH,GAAS,CAAE8D,OAAMC,UAE9BvC,OAAOC,KAAK6F,EAAUjF,SAAS4C,SAAQ,SAAAjF,GAAU,IAAD,EACxBsH,EAAUjF,QAAQrC,GAAhC8D,EADsC,EACtCA,KAAMC,EADgC,EAChCA,IACZyD,EAASxH,GAAS,CAAE8D,OAAMC,UAEvBa,KAAKE,UAAU0C,KAAc5C,KAAKE,UAAU2C,M,SC3GxD,SAASyF,EAAoBxM,GAAkC,IAC1DC,EAAMC,cAAND,EACR,OACI,gBAAC6E,EAAA,EAAD,CAAQC,KAAM/E,EAAM+E,MAChB,gBAACC,EAAA,EAAD,KAAc/E,EAAE,0BAChB,gBAACgF,EAAA,EAAD,KACI,gBAACwH,EAAA,EAAD,KACI,gBAAC,IAAD,CAAOC,QAAQ,uBACV,CAAEtJ,KAAMpD,EAAMmI,QAAQ/E,KAAKvD,WAIxC,gBAAC0G,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMzG,EAAMgD,QAAQ,UAAU0D,MAAM,UAAUC,WAAS,GACnE1G,EAAE,kBAEP,gBAACuG,EAAA,EAAD,CAAQC,QAAS,kBAAMzG,EAAMgD,QAAQ,WAAW0D,MAAM,WACjDzG,EAAE,6BAYhB,SAAS0M,EAAyB3M,GAAuC,IACpEC,EAAMC,cAAND,EACR,OACI,gBAAC6E,EAAA,EAAD,CAAQC,KAAM/E,EAAM+E,KAAM/B,QAAShD,EAAMgD,SACrC,gBAACgC,EAAA,EAAD,KAAc/E,EAAE,gCAChB,gBAACgF,EAAA,EAAD,KACI,gBAACwH,EAAA,EAAD,KACKxM,EAAE,+BAGX,gBAACsG,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,QAASzG,EAAMgD,QAAS0D,MAAM,UAAUC,WAAS,GACpD1G,EAAE,gBC1CvB,IA6Ce2M,EA7CO,SAAC5M,GAAkB,IAC7BC,EAAMC,cAAND,EAD4B,EAGLF,aAAiBiI,KAAxCE,EAH4B,EAG5BA,SAAU2E,EAHkB,EAGlBA,SAEZ/J,EAAc,SAACC,GACjB,IAAI+J,EAAUD,EAAS,GACvBC,EAAQvI,SAAQ,SAACjF,EAAO8J,GACpB,IAAI/F,EAEAA,EADW,WAAXN,EACMqG,EAAEjK,WAAWC,SAAS,EAAG,MAExB0N,EAAQlL,OAAS,EAAIwH,GAAGjK,WAAWC,SAAS,EAAG,KAE1D8I,EAAS,CAAEtE,KAAM,qBAAsBtE,QAAO+D,WAIlDrD,EAAMgD,WAGV,OAAOjD,WACH,kBACI,gBAAC+E,EAAA,EAAD,CAAQ9B,QAAShD,EAAMgD,QAAS+B,KAAM/E,EAAM+E,MACxC,gBAACC,EAAA,EAAD,KAAc/E,EAAE,yBAChB,gBAACgF,EAAA,EAAD,KACI,gBAACwH,EAAA,EAAD,KAAoBxM,EAAE,wBAE1B,gBAACsG,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,QAASzG,EAAMgD,QAAS0D,MAAM,UAAUC,WAAS,GACpD1G,EAAE,kBAEP,gBAACuG,EAAA,EAAD,CAAQC,QAAS,kBAAM3D,EAAY,WAAW4D,MAAM,WAC/CzG,EAAE,0BAEP,gBAACuG,EAAA,EAAD,CAAQC,QAAS,kBAAM3D,EAAY,YAAY4D,MAAM,WAChDzG,EAAE,+BAKnB,CAACD,EAAM+E,Q,wCC/CTqC,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACTwF,IAAK,CACDC,SAAU,QACVvJ,MAAO6D,EAAM2F,QAAQ,GACrBC,OAAQ5F,EAAM2F,QAAQ,SAwDnBE,GA/CKpN,QAAW,SAACC,GAAkB,IACtCC,EAAMC,cAAND,EACFsI,EAAUnB,KAF6B,EAGnBrH,WAAmC,MAHhB,mBAGtCqN,EAHsC,KAG/BC,EAH+B,KAKvCC,EAAe,SAACvK,GAAD,OAAoB,WACrCsK,EAAS,MACTrN,EAAMuN,SAASxK,KAGnB,OACI,gCACI,gBAACyK,GAAA,EAAD,CAASC,MAAOxN,EAAE,yBAA0ByN,aAAW,WACnD,gBAACC,GAAA,EAAD,CAAKjH,MAAM,UAAU6C,UAAWhB,EAAQwE,IACpCtG,QAAS,SAACX,GAAD,OAAOuH,EAASvH,EAAEC,UAC3B,gBAACT,EAAA,EAAD,oBAKR,gBAACsI,GAAA,EAAD,CACIC,SAAUT,EACVrI,KAAMnC,QAAQwK,GACdpK,QAAS,kBAAMqK,EAAS,QACxB,gBAACpH,EAAA,EAAD,CAAUQ,QAAS6G,EAAa,QAC5B,gBAACjI,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,iBAEJ,gBAACwI,GAAA,EAAD,CAAcC,QAAS9N,EAAE,wBAE7B,gBAACgG,EAAA,EAAD,CAAUQ,QAAS6G,EAAa,YAC5B,gBAACjI,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,gBAEJ,gBAACwI,GAAA,EAAD,CAAcC,QAAS9N,EAAE,4BAEI,UAAhCkM,OAAOC,UAAUC,IAAI,UAAsB,gBAACpG,EAAA,EAAD,CAAUQ,QAAS6G,EAAa,YACxE,gBAACjI,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,kBAEJ,gBAACwI,GAAA,EAAD,CAAcC,QAAS9N,EAAE,iCAK1C,kBAAM,KC5BH+N,G,YACF,WAAYhO,GAAQ,IAAD,8BACf,4CAAMA,KAaViO,oBAAsB,SAAC3O,GAAD,OAAmB,WACrCmD,QAAQC,IAAIpD,GACZ,EAAK4O,SAAS,CACVC,gBAAgB,EAChBC,gBAAiB9O,MAfrB,EAAKyC,MAAQ,CACTqM,gBAAiB,GACjBD,gBAAgB,EAChBE,oBAAoB,EACpBC,qBAAqB,EACrBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,qBAAqB,GAVV,E,2EAsBL1L,GACK,cAAXA,IACJ2L,KAAKR,SAAS,CAAEC,gBAAgB,IACjB,YAAXpL,EACA2L,KAAK1O,MAAM6E,YAAY,kBAAmB6J,KAAK3M,MAAMqM,iBAEnC,SAAXrL,EACP2L,KAAKR,SAAS,CAAEI,qBAAqB,IACnB,WAAXvL,GACP2L,KAAKR,SAAS,CAAEK,uBAAuB,O,wCAI7BxL,GACC,UAAXA,EACA2L,KAAKR,SAAS,CAAEG,oBAAoB,IAEpCK,KAAKR,SAAS,CACVG,oBAAoB,EACpBC,qBAAqB,EACrBF,gBAAiBrL,M,0CAKTiD,EAAOsE,EAAOqE,GAC9B,IAAIrP,EAAQoP,KAAK3M,MAAMqM,gBAWvB,GAVc,aAAV9D,GAEAoE,KAAK1O,MAAM6E,YAAY,WAAvB,eACO6J,KAAK1O,MAAM2B,QADlB,eAEKrC,EAFL,eAGWoP,KAAK1O,MAAM2B,QAAQrC,GAH9B,CAIQ0E,SAAUgC,OAIR,aAAVsE,EAAsB,CAEtB,IAAIsE,EAAc,IAAIvE,IAAIqE,KAAK1O,MAAM2B,QAAQrC,GAAOgE,WAC7B,IAAnB0C,EAAM6I,SACND,EAAYE,OAAO9I,EAAM+I,QAEzBH,EAAYI,IAAIhJ,EAAM+I,QAE1BL,KAAK1O,MAAM6E,YAAY,WAAvB,eACO6J,KAAK1O,MAAM2B,QADlB,eAEKrC,EAFL,eAGWoP,KAAK1O,MAAM2B,QAAQrC,GAH9B,CAIQgE,SAAUpC,MAAM+N,KAAKL,W,qCAMtB7L,GACX,IAAIzD,EAAQoP,KAAK3M,MAAMqM,gBAEvB,GADAM,KAAKR,SAAS,CAAEK,uBAAuB,IACxB,WAAXxL,EAAqB,CACrB,IAAIf,ER6Ia,SAAC1C,EAAeqC,GACzC,IAAIsC,EAAaC,KAAKC,MAAMD,KAAKE,UAAUzC,IACvCM,EAAUgC,EAAW3E,GAAO2C,QAC5BG,EAAW6B,EAAW3E,GAAO8C,SAE7B8M,GAAsB,EAC1B,IAAK,IAAIC,KAAMlL,EACX,IAAI,CAAC3E,EAAO,YAAa,WAAW4D,SAASiM,IACR,IAAjCrN,YAAaqN,EAAIlL,GAAmB,CACpCiL,GAAsB,EACtB,MAIR,GAAsB,GAAlBjN,EAAQL,QAAkC,GAAnBQ,EAASR,OAEhC,OAAO,EACJ,GAAIsN,EAEP,OAAO,EACJ,GAAsC,GAAlCpO,OAAOC,KAAKkD,GAAYrC,OAE/B,OAAO,EACJ,GAAsB,GAAlBK,EAAQL,QAAkC,GAAnBQ,EAASR,OACvCa,QAAQC,IAAI,aACZT,EAAQsC,SAAQ,SAAA6K,GACZnL,EAAWmL,GAAOhN,SAAWA,KAEjCA,EAASmC,SAAQ,SAAA8K,GACbpL,EAAWoL,GAASpN,QAAUA,KAEZ,GAAlBA,EAAQL,SACRqC,EAAWhC,EAAQ,IAAIsB,OAAOE,MAAQQ,EAAW3E,GAAOiE,OAAOE,OAE5C,GAAnBrB,EAASR,SACTqC,EAAW7B,EAAS,IAAImB,OAAOC,KAAOS,EAAW3E,GAAOiE,OAAOC,WAEhE,GAA8C,GAA1CS,EAAWhC,EAAQ,IAAIG,SAASR,QAAyD,GAA1CqC,EAAW7B,EAAS,IAAIH,QAAQL,OAAa,CAGnG,IAAI0N,EAAgBrL,EAAWhC,EAAQ,IAAIG,SAASS,QAAQvD,GACxDiQ,EAAgBtL,EAAW7B,EAAS,IAAIH,QAAQY,QAAQvD,GAC5D2E,EAAWhC,EAAQ,IAAIG,SAASoN,OAAOF,EAAe,GACtDrL,EAAW7B,EAAS,IAAIH,QAAQuN,OAAOD,EAAe,GAEtDtL,EAAWhC,EAAQ,IAAIsB,OAAOE,MAAQ,GACtCQ,EAAW7B,EAAS,IAAImB,OAAOC,KAAO,QAGtCvB,EAAQsC,SAAQ,SAAA6K,GACZ,IAAIhJ,EAAMnC,EAAWmL,GAAOhN,SAASS,QAAQvD,GACzC8C,EAASR,OACTqC,EAAWmL,GAAOhN,SAASgE,GAAOhE,EAAS,GAG3C6B,EAAWmL,GAAOhN,SAASoN,OAAOpJ,EAAK,GAGvCnC,EAAWmL,GAAO7L,OAAOE,MAAM,KAAOnE,IACtC2E,EAAWmL,GAAO7L,OAAOE,MAAM,GAAKrB,EAAS,OAGrDA,EAASmC,SAAQ,SAAA8K,GACb,IAAIjJ,EAAMnC,EAAWoL,GAASpN,QAAQY,QAAQvD,GAC1C2C,EAAQL,OACRqC,EAAWoL,GAASpN,QAAQmE,GAAOnE,EAAQ,GAG3CgC,EAAWoL,GAASpN,QAAQuN,OAAOpJ,EAAK,GAGxCnC,EAAWoL,GAAS9L,OAAOC,KAAK,KAAOlE,IACvC2E,EAAWoL,GAAS9L,OAAOC,KAAK,GAAKvB,EAAQ,OAOzD,cAFOgC,EAAW3E,GAEX2E,EQ5NWwL,CAAcnQ,EAAOoP,KAAK1O,MAAM2B,SAC1C,IAAY,IAARK,EACA0M,KAAKR,SAAS,CAAEM,0BAA0B,QACvC,CACH,GAAIE,KAAK1O,MAAM0P,YAAcpQ,EAAO,CAChC,IAAIqQ,EAAe7O,OAAOC,KAAKiB,GAAK4N,QAAO,SAAAT,GAAE,OAAK,CAAC,YAAa,WAAWjM,SAASiM,MAAK,GACzFT,KAAK1O,MAAM6E,YAAY,kBAAmB8K,GAE9CjB,KAAK1O,MAAM6E,YAAY,WAAY7C,O,iCAKpCe,GAIP,GAHe,QAAXA,GACA2L,KAAKR,SAAS,CAAEG,oBAAoB,IAEzB,YAAXtL,EAAsB,CACtB,IAAIkB,ER6Me,SAACtC,GAC5B,IAAIsC,EAAaC,KAAKC,MAAMD,KAAKE,UAAUzC,IAmC3C,OAlCAb,OAAOC,KAAKY,GAAS4C,SAAQ,SAAAjF,GACzB,IAAI6I,EAAO,eAAOxG,EAAQrC,IAC1B,GAAc,cAAVA,EACA2E,EAAWU,QAAQ1C,QAAUkG,EAAQ/F,SAASyN,UAC9C5L,EAAWU,QAAQpB,OAAS,CACxBC,KAAM2E,EAAQ5E,OAAOE,MACrBA,MAAO,SAER,GAAc,YAAVnE,EACP2E,EAAWI,UAAUjC,SAAW+F,EAAQlG,QAAQ4N,UAChD5L,EAAWI,UAAUd,OAAS,CAC1BC,KAAM,GACNC,MAAO0E,EAAQ5E,OAAOC,UAEvB,CACH,IAAIsM,EAAS3H,EAAQ/F,SAASyN,UAAUnQ,KAAI,SAAAyP,GACxC,OAAQA,GACJ,IAAK,YAAa,MAAO,UACzB,IAAK,UAAW,MAAO,YACvB,QAAS,OAAOA,MAGxBlL,EAAW3E,GAAO8C,SAAW+F,EAAQlG,QAAQ4N,UAAUnQ,KAAI,SAAAyP,GACvD,OAAQA,GACJ,IAAK,YAAa,MAAO,UACzB,IAAK,UAAW,MAAO,YACvB,QAAS,OAAOA,MAGxBlL,EAAW3E,GAAO2C,QAAU6N,EAC5B7L,EAAW3E,GAAOiE,OAAOC,KAAO2E,EAAQ5E,OAAOE,MAC/CQ,EAAW3E,GAAOiE,OAAOE,MAAQ0E,EAAQ5E,OAAOC,SAGjDS,EQjPkB8L,CAAgBrB,KAAK1O,MAAM2B,SAC5C+M,KAAK1O,MAAM6E,YAAY,WAAYZ,GAKxB,YAAXlB,GACA2L,KAAKR,SAAS,CAAEO,qBAAqB,M,+BAInC,IAAD,OACL,OACI,uBAAKhJ,MAAO,CAAEC,MAAO,SACjB,gBAAC,EAAD,CACI/D,QAAS+M,KAAK1O,MAAM2B,QACpBhB,IAAK+N,KAAK1O,MAAMW,IAChB4L,YAAamC,KAAKT,oBAAoB+B,KAAKtB,MAC3CuB,gBAAiB,kBAAM,EAAK/B,SAAS,CAAEG,oBAAoB,OAE/D,gBAAC6B,EAAA,EAAD,CACInL,KAAM2J,KAAK3M,MAAMoM,eACjBnL,QAAS,SAAC8C,EAAGqK,GAAJ,OAAU,EAAKC,cAAcD,IACtCE,iBAAkB,IAClBC,QAASnK,YAAcuI,KAAK1O,MAAM2B,QAAQ+M,KAAK3M,MAAMqM,kBACrDrL,OACI,gBAAC,WAAD,KACI,gBAACyD,EAAA,EAAD,CAAQE,MAAM,YAAY6J,KAAK,QAAQ9J,QAAS,kBAAM,EAAK2J,cAAc,aACpE1B,KAAK1O,MAAMC,EAAE,qBAElB,gBAACuG,EAAA,EAAD,CAAQE,MAAM,YAAY6J,KAAK,QAAQ9J,QAAS,kBAAM,EAAK2J,cAAc,UACpE1B,KAAK1O,MAAMC,EAAE,yBAElB,gBAACuG,EAAA,EAAD,CAAQE,MAAM,YAAY6J,KAAK,QAAQ9J,QAAS,kBAAM,EAAK2J,cAAc,YACpE1B,KAAK1O,MAAMC,EAAE,2BAElB,gBAACuQ,EAAA,EAAD,CACID,KAAK,QACL7C,aAAW,QACXhH,MAAM,UACND,QAAS,kBAAM,EAAK2J,cAAc,WAElC,gBAAC9K,EAAA,EAAD,CAAMgG,SAAS,SAAf,aAMhB,gBAAC,GAAD,CAAaiC,SAAUmB,KAAK+B,WAAWT,KAAKtB,QAE5C,gBAAC,EAAD,CACI3J,KAAM2J,KAAK3M,MAAMsM,mBACjB1M,QAAS+M,KAAK1O,MAAM2B,QACpBhB,IAAK+N,KAAK1O,MAAMW,IAChBqC,QAAS0L,KAAKgC,kBAAkBV,KAAKtB,MACrC7J,YAAa6J,KAAK1O,MAAM6E,cAE5B,gBAAC,EAAD,CACIE,KAAM2J,KAAK3M,MAAMuM,oBACjBtL,QAAS,kBAAM,EAAKkL,SAAS,CAAEI,qBAAqB,KACpDlE,SAAUsE,KAAKiC,oBAAoBX,KAAKtB,MACxCpP,MAAOoP,KAAK3M,MAAMqM,kBAEtB,gBAAC5B,EAAD,CACIzH,KAAM2J,KAAK3M,MAAMwM,sBACjBvL,QAAS0L,KAAKkC,eAAeZ,KAAKtB,MAClCvG,QAASuG,KAAK1O,MAAM2B,QAAQ+M,KAAK3M,MAAMqM,kBAAoBM,KAAK1O,MAAM2B,QAAX,YAE/D,gBAACgL,EAAD,CACI5H,KAAM2J,KAAK3M,MAAMyM,yBACjBxL,QAAS,kBAAM,EAAKkL,SAAS,CAAEM,0BAA0B,OAE1B,UAAlCrC,OAAOC,UAAUC,IAAI,UAClB,gBAAC,EAAD,CACItH,KAAM2J,KAAK3M,MAAM0M,oBACjBzL,QAAS,kBAAM,EAAKkL,SAAS,CAAEO,qBAAqB,Y,GA/KhD1O,aAuLb8Q,iBAAkB7C,ICxNlB8C","file":"static/js/panelStations.1452ed6e.chunk.js","sourcesContent":["import { StationInfo, Name } from '../../types';\nimport { getYShareMTR } from '../../methods';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: { [stnId: string]: StationInfo }\n) => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        num: '00',\n        services: ['local'],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: []\n        },\n        transfer: {\n            info: [[]],\n            type: 'none',\n            tick_direc: 'r',\n            paid_area: true,\n            osi_names: []\n        },\n        facility: ''\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList));\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] == stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = ['through', newId];\n            newStnList[end].branch.right = ['through', newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) != 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) != 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] == stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] == stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child]\n                        .parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = ['through', newId];\n            newStnList[end].branch.left = ['through', newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [newId, {\n        ...newStnList, \n        [newId]: newInfo\n    }];\n}\n\nfunction getRandomId() {\n    return Math.floor(Math.random() * Math.pow(36, 4)).toString(36).padStart(4, '0');\n}\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = [\n        '癸', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', \n        '日', '月', '金', '木', '水', '火', '土', \n        '竹', '戈', '十', '大', '中', '一', '弓', \n        '人', '心', '手', '口', \n        '尸', '廿', '山', '女', '田', '難', '卜', '重'\n    ];\n    let numsEN = [\n        'Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', \n        'Alfa', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf',\n        'Hotel', 'India', 'Juliett', 'Kilo', 'Lima', 'Mike', 'November', \n        'Oscar', 'Papa', 'Quebec', 'Romeo', \n        'Sierra', 'Tango', 'Uniform', 'Victor', 'Whiskey', 'X-ray', 'Yankee', 'Zulu'\n    ];\n    return [\n        stnId.split('').map(char => numsZH[parseInt(char, 36)]).join(''), \n        stnId.split('').map(char => numsEN[parseInt(char, 36)]).join(' ')\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time. \n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList));\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length == 2 && children.length == 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length == 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length == 2 || children.length == 2) {\n        console.log('this case')\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length == 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length == 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length == 2 && newStnList[children[0]].parents.length == 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        })\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n\nexport const reverseStations = (stnList: { [stnId: string]: StationInfo }) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList));\n    Object.keys(stnList).forEach(stnId => {\n        let stnInfo = {...stnList[stnId]};\n        if (stnId === 'linestart') {\n            newStnList.lineend.parents = stnInfo.children.reverse();\n            newStnList.lineend.branch = {\n                left: stnInfo.branch.right,\n                right: []\n            };\n        } else if (stnId === 'lineend') {\n            newStnList.linestart.children = stnInfo.parents.reverse();\n            newStnList.linestart.branch = {\n                left: [],\n                right: stnInfo.branch.left\n            }\n        } else {\n            var tmpArr = stnInfo.children.reverse().map(id => {\n                switch (id) {\n                    case 'linestart': return 'lineend';\n                    case 'lineend': return 'linestart';\n                    default: return id;\n                }\n            });\n            newStnList[stnId].children = stnInfo.parents.reverse().map(id => {\n                switch (id) {\n                    case 'linestart': return 'lineend';\n                    case 'lineend': return 'linestart';\n                    default: return id;\n                }\n            });\n            newStnList[stnId].parents = tmpArr;\n            newStnList[stnId].branch.left = stnInfo.branch.right;\n            newStnList[stnId].branch.right = stnInfo.branch.left;\n        }\n    });\n    return newStnList;\n};","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    MenuItem,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { StationInfo } from '../../types';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: { [stnId: string]: StationInfo }) => {\n    let res: string[] = [];\n    if (prep == 'before') {\n        while (stnList[pivot].parents.length == 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length == 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y == 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep == 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep == 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\ninterface StationAddDialogProps {\n    open: boolean;\n    stnList: {\n        [stnId: string]: StationInfo;\n    };\n    tpo: string[];\n    onClose: (action: 'close' | string) => void;\n    paramUpdate: (key, data) => void;\n}\n\nconst StationAddDialog = React.memo(\n    (props: StationAddDialogProps) => {\n        const { t } = useTranslation();\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(props.tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = React.useMemo(() => newStnPossibleLoc(prep, pivot, props.stnList), [\n            prep,\n            pivot,\n            props.stnList,\n        ]);\n        React.useEffect(() => {\n            console.log('new');\n            setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n            setEndList(newLocs[3]);\n        }, [newLocs.toString()]);\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        React.useEffect(() => {\n            setLoc(Object.keys(allLocs)[locOK.indexOf(true)]);\n        }, [locOK]);\n\n        // Hook for updating end selection when end list changed\n        React.useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        React.useEffect(() => {\n            if (!(pivot in props.stnList)) setPivot(props.tpo[0]);\n        }, [Object.keys(props.stnList).toString()]);\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    props.stnList\n                );\n                // let [newId, newInfo] = window.myLine.addStn(action[0] as 'before' | 'after', action[1], action[2], action[3]);\n\n                // this.props.paramUpdate('stn_list', getParams().stn_list);\n                props.paramUpdate('stn_list', res);\n\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.prep')}\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                            >\n                                <MenuItem key=\"before\" value=\"before\">\n                                    {t('stations.add.before')}\n                                </MenuItem>\n                                <MenuItem key=\"after\" value=\"after\">\n                                    {t('stations.add.after')}\n                                </MenuItem>\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.pivot')}\n                                onChange={e => setPivot(e.target.value)}\n                                value={pivot}\n                            >\n                                {props.tpo.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(props.stnList[stnId])}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.loc')}\n                                onChange={e => setLoc(e.target.value)}\n                                value={loc}\n                            >\n                                {Object.keys(allLocs).map((key, idx) => (\n                                    <MenuItem key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <TextField\n                                select\n                                style={{ width: '100%' }}\n                                variant=\"outlined\"\n                                label={t('stations.add.end')}\n                                onChange={e => setEnd(e.target.value)}\n                                value={end}\n                            >\n                                {endList.map(stnId => (\n                                    <MenuItem key={stnId} value={stnId}>\n                                        {formatStnName(props.stnList[stnId])}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.open !== nextProps.open) {\n            return false;\n        } else {\n            let prevDeps = {};\n            let nextDeps = {};\n            Object.keys(nextProps.stnList).forEach(stnId => {\n                let { name, num, parents, children } = nextProps.stnList[stnId];\n                nextDeps[stnId] = { name, num, parents, children };\n            });\n            Object.keys(prevProps.stnList).forEach(stnId => {\n                let { name, num, parents, children } = prevProps.stnList[stnId];\n                prevDeps[stnId] = { name, num, parents, children };\n            });\n            return JSON.stringify(prevDeps) === JSON.stringify(nextDeps);\n        }\n    }\n);\n\nexport default StationAddDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { InterchangeInfo, StationTransfer } from '../../../types';\nimport { ParamContext } from '../../../context';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    onUpdate: (value, field, index?) => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnList = param.stn_list;\n    const stnInfo = stnList[props.stnId];\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        [tabIndex, classes.tab]\n    );\n\n    const interchangeUpdate = (transInfo: StationTransfer) => {\n        let updatedValue = {\n            ...transInfo,\n            info: transInfo.info.map(inf =>\n                inf.map(i =>\n                    Object.values(i).length === 0\n                        ? ((param.theme.concat(['轉綫', 'Line']) as unknown) as InterchangeInfo)\n                        : i\n                )\n            ),\n        };\n\n        // window.myLine.updateStnTransfer2(props.stnId, updatedValue);\n        dispatch({\n            type: 'UPDATE_STATION_TRANSFER',\n            stnId: props.stnId,\n            transfer: updatedValue,\n        });\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={fullScreen}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {tabNav}\n                <Typography component=\"div\" role=\"tabpanel\">\n                    <React.Suspense fallback={<CircularProgress />}>\n                        {(idx => {\n                            switch (idx) {\n                                case 0:\n                                    return <NameTab stnId={props.stnId} />;\n                                case 1:\n                                    return (\n                                        <InterchangeTab\n                                            stnTrans={stnInfo.transfer}\n                                            onUpdate={interchangeUpdate}\n                                            stnId={props.stnId}\n                                        />\n                                    );\n                                case 2:\n                                    return <BranchTab stnId={props.stnId} />;\n                                case 3:\n                                    return (\n                                        <MoreTab\n                                            facility={stnInfo.facility}\n                                            services={new Set(stnInfo.services)}\n                                            onUpdate={(value, field) => props.onUpdate(value, field)}\n                                            stnId={props.stnId}\n                                        />\n                                    );\n                            }\n                        })(tabIndex)}\n                    </React.Suspense>\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import Dialog from './dialog';\n\nexport default Dialog;","import * as React from 'react';\nimport { Chip, makeStyles, Avatar, createStyles, useMediaQuery } from '@material-ui/core';\nimport { StationInfo } from '../../types';\n\nconst useStyles = makeStyles(theme => {\n    return createStyles({\n        root: {\n            backgroundColor: theme.palette.background.paper,\n            height: 55,\n            borderRadius: 8,\n            boxShadow: theme.shadows[1],\n        },\n        rootSize: {\n            margin: 8,\n            width: 'calc((100% - 96px) / 6)',\n        },\n        rootSizeTablet: {\n            margin: 6,\n            width: 'calc((100% - 48px) / 4)',\n        },\n        rootSizeMobile: {\n            margin: 6,\n            width: 'calc((100% - 24px) / 2)',\n        },\n        stnChipText: {\n            display: 'block',\n            textAlign: 'center',\n        },\n        stnChipTextZH: {\n            fontSize: 18,\n            fontWeight: 500,\n            lineHeight: '1.2rem',\n        },\n        stnChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre',\n            overflow: 'hidden',\n        },\n        addChipLabel: {\n            fontWeight: 500,\n            fontSize: '1rem',\n            lineHeight: '1.2rem',\n            textAlign: 'center',\n            width: '100%',\n        },\n        stnChipLabel: {\n            width: '100%',\n        },\n    });\n});\n\ninterface StationChipSetProps {\n    stnList: {\n        [stnId: string]: StationInfo;\n    };\n    tpo: string[];\n    onSelection: (stnId: string) => () => void;\n    addStationClick: () => void;\n}\n\nconst StationChipSet = React.memo(\n    (props: StationChipSetProps) => {\n        const isTablet = useMediaQuery('(max-width: 839px) and (min-width: 480px)');\n        const isMobile = useMediaQuery('(max-width: 480px)');\n        const classes = useStyles();\n\n        return (\n            <div>\n                {props.tpo.map((stnId, i) => {\n                    let label = (\n                        <span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextZH}`}>\n                                {props.stnList[stnId]?.name[0] || ''}\n                            </span>\n                            <span className={`${classes.stnChipText} ${classes.stnChipTextEN}`}>\n                                {props.stnList[stnId]?.name[1].replace('\\\\', '\\r\\n') || ''}\n                            </span>\n                        </span>\n                    );\n                    return (\n                        <Chip\n                            key={stnId}\n                            icon={\n                                window.urlParams.get('style') !== 'gzmtr' ? (\n                                    <></>\n                                ) : (\n                                    <Avatar style={{ backgroundColor: 'unset' }}>\n                                        {props.stnList[stnId]?.num || '00'}\n                                    </Avatar>\n                                )\n                            }\n                            label={label}\n                            onClick={props.onSelection(stnId)}\n                            classes={{ label: classes.stnChipLabel }}\n                            className={`${classes.root} ${\n                                isMobile ? classes.rootSizeMobile : isTablet ? classes.rootSizeTablet : classes.rootSize\n                            }`}\n                        />\n                    );\n                })}\n            </div>\n        );\n    },\n    (prevProps, nextProps) => {\n        if (prevProps.tpo.toString() !== nextProps.tpo.toString()) {\n            return false;\n        } else {\n            let prevDeps = {};\n            let nextDeps = {};\n            Object.keys(nextProps.stnList).forEach(stnId => {\n                let { name, num } = nextProps.stnList[stnId];\n                nextDeps[stnId] = { name, num };\n            });\n            Object.keys(prevProps.stnList).forEach(stnId => {\n                let { name, num } = prevProps.stnList[stnId];\n                prevDeps[stnId] = { name, num };\n            });\n            return JSON.stringify(prevDeps) === JSON.stringify(nextDeps);\n        }\n    }\n);\n\nexport default StationChipSet;\n","import * as React from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { StationInfo } from '../../types';\n\ninterface StationDeleteDialogProps {\n    open: boolean;\n    stnInfo: StationInfo;\n    onClose: (action: string) => void;\n}\n\nexport function StationDeleteDialog(props: StationDeleteDialogProps) {\n    const { t } = useTranslation();\n    return (\n        <Dialog open={props.open}>\n            <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <Trans i18nKey=\"stations.remove.msg\">\n                        {{ name: props.stnInfo.name.join() }}\n                    </Trans>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => props.onClose('close')} color=\"primary\" autoFocus>\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={() => props.onClose('accept')} color=\"primary\">\n                    {t('stations.remove.button')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\ninterface StationDeleteErrorDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport function StationDeleteErrorDialog(props: StationDeleteErrorDialogProps) {\n    const { t } = useTranslation();\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {t('stations.remove.error.msg')}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                    {t('dialog.ok')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n\n    const { dispatch, branches } = React.useContext(ParamContext);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch({ type: 'UPDATE_STATION_NUM', stnId, num });\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Fab, Tooltip, Icon, Menu, MenuItem, createStyles, makeStyles, ListItemText, ListItemIcon } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => (\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        }\n    })\n))\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo((props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n    const handleAction = (action: string) => () => {\n        setFabEl(null);\n        props.onAction(action);\n    }\n\n    return (\n        <>\n            <Tooltip title={t('stations.fabs.tooltip')} aria-label=\"options\">\n                <Fab color=\"primary\" className={classes.fab}\n                    onClick={(e) => setFabEl(e.target as HTMLElement)}>\n                    <Icon>more_vert</Icon>\n                </Fab>\n            </Tooltip>\n\n\n            <Menu\n                anchorEl={fabEl}\n                open={Boolean(fabEl)}\n                onClose={() => setFabEl(null)}>\n                <MenuItem onClick={handleAction('add')}>\n                    <ListItemIcon>\n                        <Icon>add_box</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.fabs.add')} />\n                </MenuItem>\n                <MenuItem onClick={handleAction('reverse')}>\n                    <ListItemIcon>\n                        <Icon>cached</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.fabs.reverse')} />\n                </MenuItem>\n                {window.urlParams.get('style')==='gzmtr' && <MenuItem onClick={handleAction('autonum')}>\n                    <ListItemIcon>\n                        <Icon>filter_1</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.autoNum.button')} />\n                </MenuItem>}\n            </Menu>\n        </>\n    )\n}, () => true)\n\nexport default StationFabs;","import * as React from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nimport { Snackbar, Button, IconButton, Icon } from '@material-ui/core';\n\nimport { formatStnName } from '../../utils';\nimport { StationInfo, Name } from '../../types';\n\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationChipSet from './chip-set';\nimport { StationDeleteDialog, StationDeleteErrorDialog } from './delete-diags';\nimport AutoNumDialog from './auto-num-diag';\nimport StationFabs from './fabs';\nimport { removeStation, reverseStations } from './utils';\n\ninterface PanelStationsProps {\n    t: any;\n    theme: [string, string, string, '#000' | '#fff'];\n    stnList: { [stnId: string]: StationInfo };\n    paramUpdate: (key, data) => void;\n    currentId: string;\n    tpo: string[];\n}\n\ninterface PanelStationsState {\n    stationSelected: string;\n    snackBarOpened: boolean;\n    stnAddDialogOpened: boolean;\n    stnEditDialogOpened: boolean;\n    stnDeleteDialogOpened: boolean;\n    stnDeleteErrDialogOpened: boolean;\n    autoNumDialogOpened: boolean;\n}\n\nclass PanelStations extends React.Component<PanelStationsProps, PanelStationsState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stationSelected: '',\n            snackBarOpened: false,\n            stnAddDialogOpened: false,\n            stnEditDialogOpened: false,\n            stnDeleteDialogOpened: false,\n            stnDeleteErrDialogOpened: false,\n            autoNumDialogOpened: false,\n        };\n    }\n\n    stnChipSetSelection = (stnId: string) => () => {\n        console.log(stnId);\n        this.setState({\n            snackBarOpened: true,\n            stationSelected: stnId,\n        });\n    };\n\n    snackBarClose(action: string) {\n        if (action === 'clickaway') return;\n        this.setState({ snackBarOpened: false });\n        if (action === 'current') {\n            this.props.paramUpdate('current_stn_idx', this.state.stationSelected);\n            // window.myLine.currentStnId = this.state.stationSelected;\n        } else if (action === 'edit') {\n            this.setState({ stnEditDialogOpened: true });\n        } else if (action === 'delete') {\n            this.setState({ stnDeleteDialogOpened: true });\n        }\n    }\n\n    stnAddDialogClose(action: 'close' | string) {\n        if (action === 'close') {\n            this.setState({ stnAddDialogOpened: false });\n        } else {\n            this.setState({\n                stnAddDialogOpened: false,\n                stnEditDialogOpened: true,\n                stationSelected: action,\n            });\n        }\n    }\n\n    stnEditDialogUpdate(value, field, index) {\n        let stnId = this.state.stationSelected;\n        if (field === 'facility') {\n            // window.myLine.updateStnUsage(stnId, value);\n            this.props.paramUpdate('stn_list', {\n                ...this.props.stnList,\n                [stnId]: {\n                    ...this.props.stnList[stnId],\n                    facility: value,\n                },\n            });\n        }\n        if (field === 'services') {\n            // window.myLine.updateStnServices(stnId, value);\n            let servicesSet = new Set(this.props.stnList[stnId].services);\n            if (value.selected === false) {\n                servicesSet.delete(value.chipId);\n            } else {\n                servicesSet.add(value.chipId);\n            }\n            this.props.paramUpdate('stn_list', {\n                ...this.props.stnList,\n                [stnId]: {\n                    ...this.props.stnList[stnId],\n                    services: Array.from(servicesSet),\n                },\n            });\n        }\n    }\n\n    stnDeleteClose(action: string) {\n        let stnId = this.state.stationSelected;\n        this.setState({ stnDeleteDialogOpened: false });\n        if (action === 'accept') {\n            let res = removeStation(stnId, this.props.stnList);\n            if (res === false) {\n                this.setState({ stnDeleteErrDialogOpened: true });\n            } else {\n                if (this.props.currentId === stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    this.props.paramUpdate('current_stn_idx', newCurrentId);\n                }\n                this.props.paramUpdate('stn_list', res);\n            }\n        }\n    }\n\n    fabsAction(action: string) {\n        if (action === 'add') {\n            this.setState({ stnAddDialogOpened: true });\n        }\n        if (action === 'reverse') {\n            let newStnList = reverseStations(this.props.stnList);\n            this.props.paramUpdate('stn_list', newStnList);\n            // console.log(newStnList);\n            // setParams('stn_list', newStnList);\n            // location.reload(true);\n        }\n        if (action === 'autonum') {\n            this.setState({ autoNumDialogOpened: true });\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ width: '100%' }}>\n                <StationChipSet\n                    stnList={this.props.stnList}\n                    tpo={this.props.tpo}\n                    onSelection={this.stnChipSetSelection.bind(this)}\n                    addStationClick={() => this.setState({ stnAddDialogOpened: true })}\n                />\n                <Snackbar\n                    open={this.state.snackBarOpened}\n                    onClose={(e, r) => this.snackBarClose(r)}\n                    autoHideDuration={5000}\n                    message={formatStnName(this.props.stnList[this.state.stationSelected])}\n                    action={\n                        <React.Fragment>\n                            <Button color=\"secondary\" size=\"small\" onClick={() => this.snackBarClose('current')}>\n                                {this.props.t('stations.current')}\n                            </Button>\n                            <Button color=\"secondary\" size=\"small\" onClick={() => this.snackBarClose('edit')}>\n                                {this.props.t('stations.edit.button')}\n                            </Button>\n                            <Button color=\"secondary\" size=\"small\" onClick={() => this.snackBarClose('delete')}>\n                                {this.props.t('stations.remove.button')}\n                            </Button>\n                            <IconButton\n                                size=\"small\"\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                onClick={() => this.snackBarClose('close')}\n                            >\n                                <Icon fontSize=\"small\">close</Icon>\n                            </IconButton>\n                        </React.Fragment>\n                    }\n                />\n\n                <StationFabs onAction={this.fabsAction.bind(this)} />\n\n                <StationAddDialog\n                    open={this.state.stnAddDialogOpened}\n                    stnList={this.props.stnList}\n                    tpo={this.props.tpo}\n                    onClose={this.stnAddDialogClose.bind(this)}\n                    paramUpdate={this.props.paramUpdate}\n                />\n                <StationEditDialog\n                    open={this.state.stnEditDialogOpened}\n                    onClose={() => this.setState({ stnEditDialogOpened: false })}\n                    onUpdate={this.stnEditDialogUpdate.bind(this)}\n                    stnId={this.state.stationSelected}\n                />\n                <StationDeleteDialog\n                    open={this.state.stnDeleteDialogOpened}\n                    onClose={this.stnDeleteClose.bind(this)}\n                    stnInfo={this.props.stnList[this.state.stationSelected] || this.props.stnList['linestart']}\n                />\n                <StationDeleteErrorDialog\n                    open={this.state.stnDeleteErrDialogOpened}\n                    onClose={() => this.setState({ stnDeleteErrDialogOpened: false })}\n                />\n                {window.urlParams.get('style') === 'gzmtr' && (\n                    <AutoNumDialog\n                        open={this.state.autoNumDialogOpened}\n                        onClose={() => this.setState({ autoNumDialogOpened: false })}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(PanelStations);\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}