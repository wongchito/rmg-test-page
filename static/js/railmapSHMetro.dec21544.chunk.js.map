{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","svgs/railmap/methods/share.ts","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","adjacencyList","stnList","leftW","rightW","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","protoProps","staticProps","stations","getYShare","getNamePos","stnStates","lineXs","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","parents","stnPred","res","pos","parId","stnIds","realXs","realYs","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","drawLine","StationSHMetro","stnInfo","React","ParamContext","param","stn_list","xlinkHref","transfer","type","stnState","className","transform","left","right","name","infos","info","isOSI","StationNameGElement","nameENLn","split","stnNameEl","width","bBox","setBBox","current","getBBox","toString","cos","textAnchor","StationName","ref","intInfos","flat","osiInfos","fontSize","map","txt","dy","IntBoxGroup","others","dx","isLineNumber","Boolean","match","el","IntBoxNumber","IntBoxLetter","height","fill","dominantBaseline","prevProps","nextProps","textCount","OSIText","lineNames","MainSHMetro","useContext","deps","realCP","useMemo","JSON","stringify","svgWidth","railmap","padding","branch_spacing","current_stn_idx","paths","stns","id","svg_height","Line","stroke","strokeWidth","d","e","hasOwnProperty","xm","ym","h","StationGroup","style","RailMapSHMetro","DefsSHMetro","r"],"mappings":"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","file":"static/js/railmapSHMetro.dec21544.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    private getNamePos(stnId: string): boolean {\n        if (stnId === 'linestart') {\n            this.namePoss['linestart'] = true;\n            return true;\n        }\n        let self = this;\n        let pos = this.criticalPath.nodes.indexOf(stnId) % 2; // -1, 0 or 1;\n        if (pos === -1) {\n            let parId = this.stnList[stnId].parents[0];\n            if (this.stnList[parId].children.length === 2) {\n                let res = self.getNamePos(parId);\n                this.namePoss[stnId] = res;\n                return res;\n            }\n            let res = !self.getNamePos(parId);\n            this.namePoss[stnId] = res;\n            return res;\n        }\n        this.namePoss[stnId] = pos === 1;\n        return pos === 1;\n    }\n\n    static getNamePos(stnList: StationDict, cp: { len: number; nodes: string[] }) {\n        console.log('computing name position');\n        let stations = new this({ stnList, criticalPath: cp });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.namePoss) return;\n            stations.getNamePos(stnId);\n        });\n\n        return stations.namePoss;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import * as React from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    return (\n        <>\n            <use\n                xlinkHref={\n                    '#' +\n                    (stnInfo.transfer.type === 'none' ? 'stn_sh' : 'int2_sh') +\n                    (props.stnState === -1 ? '_pass' : '')\n                }\n                className=\"rmg-stn\"\n            />\n            <g transform={`translate(${[...stnInfo.branch.left, ...stnInfo.branch.right].length ? 30 : 0},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    isOSI={stnInfo.transfer.type.includes('osi')}\n                    stnState={props.stnState}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    isOSI: boolean;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g\n            className=\"Name Future\"\n            transform={`translate(${-(24 + (nameENLn - 1) * 12) * Math.cos(-45)},${-4 -\n                21.921875 -\n                (nameENLn - 1) * 12 * Math.cos(-45)})rotate(-50)`}\n            textAnchor=\"start\"\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n\n            <IntBoxGroup intInfos={props.isOSI ? props.infos.flat() : props.infos[0]} transform={`translate(${x},0)`} />\n\n            {props.isOSI && (\n                <g transform={`translate(${x + props.infos.flat().length * 15},-30)`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    React.useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\">{props.name[0]}</text>\n                <g fontSize=\"60%\">\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    )\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[] } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const el = (\n                    <g transform={`translate(${dx},0)`} key={i}>\n                        {isLineNumber ? <IntBoxNumber info={info} /> : <IntBoxLetter info={info} />}\n                    </g>\n                );\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                dx += isLineNumber ? 25 : info[4].length * 16 + 12 + 5;\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <rect height={30} width={20} y={-15} fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" textAnchor=\"middle\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={30} width={textCount * 16 + 12} y={-15} fill={props.info[2]} />\n                <text\n                    x={textCount * 8 + 6}\n                    className=\"rmg-name__zh\"\n                    textAnchor=\"middle\"\n                    fill={props.info[3]}\n                    dominantBaseline=\"central\"\n                >\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\">{'换乘' + lineNames.join('，')}</text>\n                <text className=\"rmg-name__zh rmg-name__shmetro--station\" dy={10}>\n                    仅限公共交通卡\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: { main: string[]; pass: string[] } }) => {\n    return (\n        <>\n            <g className=\"rmg-line rmg-line__pass rmg-line__shmetro\">\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} stroke=\"gray\" strokeWidth={12} fill=\"none\" d={path} />\n                ))}\n            </g>\n            <g className=\"rmg-line rmg-line__shmetro\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} fill=\"var(--rmg-theme-colour)\" d={path} />\n                ))}\n            </g>\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x},${y - 6} L ${x - e},${y - 6} l -12,12 L ${x},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} L ${x + e},${y - 6} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e},${y}`;\n            } else {\n                return `M ${x - e},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e},${y - 6} H ${h} l 0,12 L ${x - 42},${y + 6} Z`;\n            } else {\n                return `M ${x},${y - 6} H ${h + e} l 12,12 L ${x},${y + 6} Z`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e}`;\n            } else {\n                return `M ${x - e},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let h = path['end'][0];\n        // let [xb, yb] = path['bifurcate']\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x - e - 12} Z`;\n                } else {\n                    // main line, left direction, upper to center\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm} Z`;\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y - 6} H ${xm + 6} V ${ym - 6} h -12 V ${y + 6} H ${x} Z`;\n                } else {\n                    // main line, right direction, center to upper\n                    // this same as the other, but replace x with xm and xm with x\n                    return `M ${xm + e},${ym - 6} H ${x - 6} V ${y - 6} h 12 V ${ym + 6} H ${xm + e + 12} Z`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" stroke=\"var(--rmg-theme-colour)\" strokeWidth={2} r={5} />\n        <circle id=\"stn_sh_pass\" fill=\"#fff\" stroke=\"#aaa\" strokeWidth={2} r={5} />\n        <path\n            id=\"int2_sh\"\n            fill=\"#fff\"\n            stroke=\"var(--rmg-theme-colour)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"int2_sh_pass\"\n            fill=\"#fff\"\n            stroke=\"#aaa\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n"],"sourceRoot":""}