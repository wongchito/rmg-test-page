{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx","svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StripGZMTR","props","stripHeight","variant","indicatorLight","React","useMemo","cy","r","fill","rx","ry","x","y","height","width","id","style","transform","isShowLight","isShowPSD","PSD","memo","includes","className","fontSize","dy","prevProps","nextProps","StationNumberText","lineNum","stnNum","others","lineNumEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","lineNumScale","stnNumScale","textAnchor","ref","InfoGZMTR","param","useContext","ParamContext","curStnInfo","stn_list","current_stn_idx","curNameEl","nameBBox","setNameBBox","name","nextStnId","direction","BigName","curName","svg_height","split","line_num","num","svgWidth","runin","nextId","nextIds","forwardRef","map","txt","BigStnNum","d","BigNext","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNext2","routes","validEnds","stnId","filter","route","s","Set","reverse","Array","from","Math","max","Fragment","j","join","replace","PlatformNum","RunInGZMTR","info_panel_type","psd_num","platform_num","cx"],"mappings":"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","file":"static/js/runinMTR.be0b0777.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\n\ninterface Props {\n    variant: 'gz1' | 'gz28' | 'gz3' | 'gz1421' | 'gzgf';\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-28} r={16} fill=\"red\" />;\n            case 'gz28':\n                return <ellipse rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-25} height={30} width={30} fill=\"red\" />;\n            case 'gzgf':\n                return <ellipse rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-8} rx={24} ry={12} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    return (\n        <g>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),calc(var(--rmg-svg-height) - 30px))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => (\n        <g\n            id=\"big_psd\"\n            fill={['gz3', 'gz1421', 'gz1'].includes(props.variant) ? 'var(--rmg-theme-fg)' : '#000'}\n            style={{\n                ['--psd-dy' as any]: ['gz1', 'gz3'].includes(props.variant)\n                    ? '82px'\n                    : props.variant === 'gz1421'\n                    ? '62px'\n                    : '58px',\n            }}\n        >\n            <rect\n                height={40}\n                width={40}\n                rx={4}\n                x={-20}\n                fill={['gz3', 'gz1421', 'gz1'].includes(props.variant) ? 'var(--rmg-theme-colour)' : '#fff'}\n            />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {props.isShowPSD}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    ),\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n","import React, { useState, useEffect } from 'react';\nimport { ParamContext } from '../../context';\nimport StationNumberText from '../station-num-gzmtr';\n\nconst InfoGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    const curStnInfo = param.stn_list[param.current_stn_idx];\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(() => setNameBBox(curNameEl.current!.getBBox()), [curStnInfo.name[0], curStnInfo.name[1]]);\n\n    const nextStnId = curStnInfo[param.direction === 'l' ? 'parents' : 'children'];\n\n    return (\n        <g>\n            <BigName\n                ref={curNameEl}\n                curName={curStnInfo.name}\n                style={{\n                    ['--translate-y' as any]: `${0.5 * param.svg_height -\n                        50 -\n                        (curStnInfo.name[1].split('\\\\').length - 1) * 18}px`,\n                }}\n            />\n\n            <BigStnNum\n                lineNum={param.line_num}\n                stnNum={curStnInfo.num}\n                style={{\n                    ['--translate-x' as any]: `${(param.svgWidth.runin + nameBBox.width) / 2 + 55}px`,\n                    ['--translate-y' as any]: `${0.5 * param.svg_height -\n                        30 -\n                        (curStnInfo.name[1].split('\\\\').length - 1) * 18}px`,\n                }}\n            />\n\n            {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                <></>\n            ) : nextStnId.length === 1 ? (\n                <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n            ) : (\n                <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n            )}\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [curName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigStnNum = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    return (\n        <g id=\"big_stn_num\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <path\n                            className=\"rmg-stn rmg-stn--future\"\n                            d=\"M 0,12.95 V -12.95 H -12.95 a 12.95,12.95 0 0,0 0,25.9 h 25.9 a 12.95,12.95 0 0,0 0,-25.9 H 0 \"\n                        />\n                        <StationNumberText transform=\"scale(1.4)\" {...{ lineNum, stnNum }} />\n                    </>\n                ),\n                [lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { param } = React.useContext(ParamContext);\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(() => setNextBBox(nextNameEl.current!.getBBox()), []);\n\n    const nextNameZHCount = param.stn_list[props.nextId].name[0].length;\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${param.svgWidth.runin - 45 - nextBBox.width - 70}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\">下站</text>\n                    <text className=\"rmg-name__en\" dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\">{param.stn_list[props.nextId].name[0]}</text>\n                    {param.stn_list[props.nextId].name[1].split('\\\\').map((txt: string, i: number) => (\n                        <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 -\n                                  20}px`\n                            : `${(param.svgWidth.runin -\n                                  45 -\n                                  nextBBox.width -\n                                  (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                  nameBcrX +\n                                  props.nameBBox.width +\n                                  55 +\n                                  18.5 * 1.4) /\n                                  2 +\n                                  20}px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n\n    const validRoutes = props.nextIds.map(stnId =>\n        routes\n            .filter(route => route.indexOf(stnId) !== -1)\n            .map(route => route.filter(s => !['linestart', 'lineend'].includes(s)))\n    );\n    const validEnds = validRoutes.map(routes => {\n        if (param.direction === 'l') {\n            return [...new Set(routes.map(route => route[0]))].reverse();\n        } else {\n            return Array.from(new Set(routes.map(route => route.reverse()[0])));\n        }\n    });\n\n    const nextNameZHCount = Math.max(...props.nextIds.map(id => param.stn_list[id].name[0].length));\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {props.nextIds.map((stnId, i) => {\n                    // const nextNameEl = React.createRef<SVGGElement>();\n                    // useEffect(\n                    //     () =>\n                    //         setNextBBox(prevBBox => {\n                    //             let nextBBox = nextNameEl.current.getBBox();\n                    //             return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    //         }),\n                    //     []\n                    // );\n\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '72px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                // ref={nextNameEl}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '113px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{param.stn_list[stnId].name[0]}</text>\n                                {param.stn_list[stnId].name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => param.stn_list[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => param.stn_list[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${(param.svgWidth.runin -\n                                  45 -\n                                  nextBBox.width -\n                                  41 -\n                                  27 +\n                                  nameBcrX +\n                                  props.nameBBox.width +\n                                  55 +\n                                  18.5 * 1.4) /\n                                  2 +\n                                  20}px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\n\nconst RunInGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <StripGZMTR variant={param.info_panel_type} isShowLight={true} isShowPSD={param.psd_num} />\n\n            <PlatformNum\n                num={param.platform_num}\n                style={{\n                    ['--translate-x' as any]: `${param.direction === 'l' ? param.svgWidth.runin - 100 : 100}px`,\n                }}\n            />\n\n            <InfoGZMTR />\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst PlatformNum = (props: { num: string } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                            {num}\n                        </text>\n                        <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                            站台\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                            Platform\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n"],"sourceRoot":""}