{"version":3,"sources":["svgs/railmap/main/line-box-gzmtr.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx"],"names":["React","memo","props","textAnchor","fill","stnState","info","xlinkHref","LineBoxNameSpan","name","slice","LineBoxName","prevProps","nextProps","toString","nameZHEl","dy","match","forEach","t","i","isNaN","Number","push","key","dominantBaseline","fontSize","nameZHGroupEl","useRef","useState","width","zhBBox","setZhBBox","useEffect","current","getBBox","nameZHGroupScale","nameENEl","enBBox","setEnBBox","nameENScale","ref","y","className","transform","replace","length","sharedText","idx","nameEl","x","bBox","setBBox","nameScale","trim","StationGZMTR","param","useContext","ParamContext","stnInfo","stn_list","stnId","isNameShift","parents","children","tickRotation","stnY","indexOf","branch","left","right","nameENLns","split","nameDX","Math","cos","intInfos","theme","line_name","concat","transfer","stroke","lineNum","line_num","stnNum","num","style","isExpress","services","includes","StationNameGElement","nameDY","stnNameEl","StationName","ExpressTag","forwardRef","useMemo","map","txt","IntGroup","strokeWidth","IntTicks","others","IntBoxs","other","wideFactor","stnList","MainGZMTR","branches","routes","deps","adjMat","adjacencyList","xShares","console","log","Object","keys","reduce","acc","cur","criticalPath","criticalPathMethod","nodes","len","branchOfStn","filter","partSource","partSink","leftOpenJaw","rightOpenJaw","lens","getXShare","JSON","stringify","realCP","lineXs","direction","svgWidth","railmap","padding","xs","yShares","ys","branch_spacing","stnStates","getStnState","current_stn_idx","linePaths","drawLine","paths","stns","_linePath","id","y_pc","Line","Array","strokeDasharray","pass","path","d","main","stnIds","realXs","realYs","prevY","join","StationGroup","DefsGZMTR","RailMapGZMTR","variant","info_panel_type","isShowLight","isShowPSD","TerminusFlag","notesGZMTR","note","NoteBox","strokeLinecap","height","rx","DirectionIndicator","validDests","Set","textGroupProps","destIds","direction_gz_x","direction_gz_y","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","max","noteTextEl","textLength","lengthAdjust","_objectWithoutProperties","source","excluded","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","currentId","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","res","getYShare","pos","parId","getNamePos","prevId","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","StripGZMTR","stripHeight","indicatorLight","cy","r","ry","PSD","StationNumberText","lineNumEl","lineNumScale","stnNumScale"],"mappings":"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","file":"static/js/railmapGZMTR.3533ddf0.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nexport default React.memo(\n    function LineBox(props: { info: InterchangeInfo; stnState: -1 | 0 | 1 }) {\n        return (\n            <g textAnchor=\"middle\" fill={props.stnState === -1 ? '#fff' : props.info[3]}>\n                <use xlinkHref=\"#intbox\" fill={props.stnState === -1 ? '#aaa' : props.info[2]} />\n                {props.info[4][0] === props.info[5][0] ? (\n                    <LineBoxNameSpan name={props.info.slice(-2) as Name} />\n                ) : (\n                    <LineBoxName name={props.info.slice(-2) as Name} />\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.info.toString() === nextProps.info.toString() && prevProps.stnState === nextProps.stnState\n);\n\nconst LineBoxName = React.memo(\n    (props: { name: Name }) => {\n        let nameZHEl = [] as JSX.Element[];\n        let dy = 0;\n        props.name[0].match(/\\d+|\\D+/g)?.forEach((t, i) => {\n            if (isNaN(Number(t))) {\n                // text\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" dy={1 - dy}>\n                        {t}\n                    </tspan>\n                );\n                dy += 1 - dy;\n            } else {\n                // number\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" fontSize={16} dy={-dy}>\n                        {t}\n                    </tspan>\n                );\n                dy = 0;\n            }\n        });\n\n        const nameZHGroupEl = useRef<SVGTextElement | null>(null);\n        const [zhBBox, setZhBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setZhBBox(nameZHGroupEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[0]]\n        );\n        const nameZHGroupScale = zhBBox.width > 43.5 ? 43.5 / zhBBox.width : 1;\n\n        const nameENEl = useRef<SVGTextElement | null>(null);\n        const [enBBox, setEnBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setEnBBox(nameENEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[1]]\n        );\n        const nameENScale = enBBox.width > 43.5 ? 43.5 / enBBox.width : 1;\n\n        return (\n            <>\n                <text\n                    ref={nameZHGroupEl}\n                    y={2}\n                    className=\"rmg-name__zh\"\n                    fontSize={12}\n                    transform={`scale(${nameZHGroupScale},1)`}\n                >\n                    {nameZHEl}\n                </text>\n                <text\n                    ref={nameENEl}\n                    y={19.5}\n                    fontSize={props.name[1].replace('\\\\', ' ').length > 10 ? 7 : 8}\n                    className=\"rmg-name__en\"\n                    transform={`scale(${nameENScale},1)`}\n                >\n                    {props.name[1]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n\nconst LineBoxNameSpan = React.memo(\n    (props: { name: Name }) => {\n        let sharedText = '';\n        for (let idx in [...props.name[0]]) {\n            if (props.name[0][idx] === props.name[1][idx]) {\n                sharedText += props.name[0][idx];\n            } else {\n                break;\n            }\n        }\n\n        const nameEl = useRef<SVGTextElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n        useEffect(\n            () => setBBox(nameEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name.toString()]\n        );\n\n        const nameScale = bBox.width > 43.5 ? 43.5 / bBox.width : 1;\n\n        // unsymmetrical scaling, wrap with <g>\n        return (\n            <g transform={`scale(${nameScale},1)`}>\n                <g transform={`translate(${-bBox.x - bBox.width / 2},0)`}>\n                    <text ref={nameEl} className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                        {sharedText}\n                        <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                            {props.name[0].slice(sharedText.length)}\n                        </tspan>\n                        <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                            {props.name[1].slice(sharedText.length).trim()}\n                        </tspan>\n                    </text>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n","import React, { useContext, useState, useEffect, useRef, useMemo } from 'react';\nimport { ParamContext } from '../../../../context';\nimport StationNumberText from '../../../station-num-gzmtr';\nimport LineBox from '../line-box-gzmtr';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        props.stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (([\n                              [\n                                  param.theme[0],\n                                  param.theme[1],\n                                  'var(--rmg-theme-colour)',\n                                  'var(--rmg-theme-fg)',\n                                  param.line_name[0],\n                                  param.line_name[1],\n                              ],\n                          ] as any[]) as InterchangeInfo[]).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={props.stnState}\n                tickRotation={tickRotation}\n            />\n            <g>\n                <use xlinkHref=\"#stn\" stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'} />\n                <StationNumberText\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                    lineNum={param.line_num}\n                    stnNum={stnInfo.num}\n                />\n            </g>\n            <g style={{ transform: `translateX(${-nameDX}px)` }}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    stnState={props.stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes('express')}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n\n            {props.isExpress && (\n                <ExpressTag\n                    fill={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                    transform={`translate(${(bBox.width + 35) * (props.tickRotation === 180 ? -1 : 1)},${2 +\n                        5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {props.name[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name[0], props.name[1]]\n    )\n);\n\nconst ExpressTag = React.memo((props: React.SVGProps<SVGGElement>) => (\n    <g textAnchor=\"middle\" {...props}>\n        <text className=\"rmg-name__zh\" fontSize={13}>\n            快车停靠站\n        </text>\n        <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n            Express Station\n        </text>\n    </g>\n));\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineBox info={info} stnState={stnState} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport { ParamContext } from '../../../context';\nimport StationGZMTR from './station/station-gzmtr';\nimport LineBox from './line-box-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { param, branches, routes, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(param.stn_list, wideFactor, wideFactor);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        param.direction === 'r'\n            ? [\n                  (param.svgWidth.railmap * param.padding) / 100 + 65,\n                  param.svgWidth.railmap * (1 - param.padding / 100) - 20,\n              ]\n            : [(param.svgWidth.railmap * param.padding) / 100, param.svgWidth.railmap * (1 - param.padding / 100) - 65];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: param.stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]: param.direction === 'r' ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineBox\n                    info={\n                        Array(2).concat(\n                            ['var(--rmg-theme-colour)', 'var(--rmg-theme-fg)'],\n                            param.line_name\n                        ) as InterchangeInfo\n                    }\n                    stnState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={props.stnStates[stnId]} stnY={props.ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\n\nconst RailMapGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR variant={param.info_panel_type} isShowLight={false} isShowPSD={false} />\n\n            {(param.direction === 'l' && param.stn_list[param.current_stn_idx].parents.includes('linestart')) ||\n            (param.direction === 'r' && param.stn_list[param.current_stn_idx].children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {param.notesGZMTR.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = React.memo(() => (\n    <defs>\n        <path\n            id=\"stn\"\n            className=\"rmg-stn\"\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path\n            id=\"stn_pass\"\n            stroke=\"#aaa\"\n            fill=\"#fff\"\n            strokeWidth={2}\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n        <rect id=\"intbox\" x={-22.5} height={24} width={45} rx={4.5} />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const validDests = React.useMemo(\n        () => [\n            ...new Set(\n                routes.reduce(\n                    (acc, cur) =>\n                        cur.includes(param.current_stn_idx)\n                            ? acc.concat(\n                                  cur\n                                      .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                      .slice(param.direction === 'l' ? 0 : -1)[0]\n                              )\n                            : acc,\n                    []\n                )\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: param.direction === 'l' ? 'start' : 'end',\n        transform: `translate(${param.direction === 'l' ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: param.direction_gz_x, ['--y-percentage' as any]: param.direction_gz_y }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => param.stn_list[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => param.stn_list[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n\n    const charCounts = destIds.map(stnId => param.stn_list[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {param.stn_list[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + param.stn_list[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={param.direction === 'l' ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={i < (props.note[1].match(/\\n/g)?.length || 0) ? bBox.width : 0}\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    private getNamePos(stnId: string): boolean {\n        if (stnId === 'linestart') {\n            this.namePoss['linestart'] = true;\n            return true;\n        }\n        let self = this;\n        let pos = this.criticalPath.nodes.indexOf(stnId) % 2; // -1, 0 or 1;\n        if (pos === -1) {\n            let parId = this.stnList[stnId].parents[0];\n            if (this.stnList[parId].children.length === 2) {\n                let res = self.getNamePos(parId);\n                this.namePoss[stnId] = res;\n                return res;\n            }\n            let res = !self.getNamePos(parId);\n            this.namePoss[stnId] = res;\n            return res;\n        }\n        this.namePoss[stnId] = pos === 1;\n        return pos === 1;\n    }\n\n    static getNamePos(stnList: StationDict, cp: { len: number; nodes: string[] }) {\n        console.log('computing name position');\n        let stations = new this({ stnList, criticalPath: cp });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.namePoss) return;\n            stations.getNamePos(stnId);\n        });\n\n        return stations.namePoss;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React from 'react';\n\ninterface Props {\n    variant: 'gz1' | 'gz28' | 'gz3' | 'gz1421' | 'gzgf';\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-28} r={16} fill=\"red\" />;\n            case 'gz28':\n                return <ellipse rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-25} height={30} width={30} fill=\"red\" />;\n            case 'gzgf':\n                return <ellipse rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-8} rx={24} ry={12} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    return (\n        <g>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),calc(var(--rmg-svg-height) - 30px))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => (\n        <g\n            id=\"big_psd\"\n            fill={['gz3', 'gz1421', 'gz1'].includes(props.variant) ? 'var(--rmg-theme-fg)' : '#000'}\n            style={{\n                ['--psd-dy' as any]: ['gz1', 'gz3'].includes(props.variant)\n                    ? '82px'\n                    : props.variant === 'gz1421'\n                    ? '62px'\n                    : '58px',\n            }}\n        >\n            <rect\n                height={40}\n                width={40}\n                rx={4}\n                x={-20}\n                fill={['gz3', 'gz1421', 'gz1'].includes(props.variant) ? 'var(--rmg-theme-colour)' : '#fff'}\n            />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {props.isShowPSD}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    ),\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n"],"sourceRoot":""}