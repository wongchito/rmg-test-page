{"version":3,"sources":["panels/design/list-gzmtr.tsx"],"names":["allInfoPanelTypes","gz1","gz28","gz3","gzgf","gz1421","useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","radioGroup","paddingBottom","DesignListGZMTR","t","useTranslation","React","useContext","ParamContext","param","dispatch","primary","value","line_num","onChange","e","type","num","target","psd_num","PanelTypeLi","NotesLi","classes","useState","open","setOpen","useMemo","button","onClick","prevOpen","style","transform","secondary","info_panel_type","color","in","unmountOnExit","name","className","variant","Object","keys","map","key","control","size","label","isCollapse","setIsCollapse","isDialogOpen","setIsDialogOpen","noteSelected","setNoteSelected","component","disablePadding","notesGZMTR","_","i","NotesEntry","idx","onEdit","disableTypography","cursor","length","NoteEditDialog","onClose","props","toggleEl","setToggleEl","handleEdit","handleSlide","_event","note","val","j","handleRemove","overflow","textOverflow","whiteSpace","currentTarget","anchorEl","Boolean","step","marks","width","marginLeft","marginRight","valueLabelDisplay","edge","checked","toString","noteZH","setNoteZH","noteEN","setNoteEN","handleClick","margin","multiline","autoFocus","helperText"],"mappings":"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","file":"static/js/panelDesignGZMTR.1f50d122.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    FormControlLabel,\n    RadioGroup,\n    Radio,\n    Collapse,\n    Divider,\n    List,\n    ListItemSecondaryAction,\n    IconButton,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Menu,\n    MenuItem,\n    Slider,\n    Switch,\n} from '@material-ui/core';\n\nimport { ParamContext } from '../../context';\n\nconst allInfoPanelTypes = {\n    gz1: 'Line 1',\n    gz28: 'Line 2/8',\n    gz3: 'Line 3',\n    gzgf: 'Line 6/Guangfo Line',\n    gz1421: 'Line 14/21',\n};\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        radioGroup: {\n            paddingLeft: theme.spacing(5),\n            paddingBottom: theme.spacing(1),\n        },\n    })\n);\n\nconst DesignListGZMTR = () => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.lineNum')} />\n                <TextField\n                    value={param.line_num}\n                    onChange={e => dispatch({ type: 'SET_LINE_NUM', num: e.target.value })}\n                />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.psd')} />\n                <TextField\n                    value={param.psd_num}\n                    onChange={e => dispatch({ type: 'SET_PSD_NUM', num: e.target.value })}\n                />\n            </ListItem>\n            <Divider />\n            <PanelTypeLi />\n            <Divider />\n            <NotesLi />\n        </>\n    );\n};\n\nexport default DesignListGZMTR;\n\nconst PanelTypeLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const [open, setOpen] = React.useState(false);\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem button onClick={() => setOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon style={{ transform: 'rotate(180deg)' }}>credit_card</Icon>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={t('design.panelType.button')}\n                        secondary={open ? '' : t('design.panelType.' + param.info_panel_type)}\n                    />\n                    {open ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={open} unmountOnExit>\n                    <RadioGroup\n                        name=\"panel-type\"\n                        value={param.info_panel_type}\n                        className={classes.radioGroup}\n                        onChange={e =>\n                            dispatch({\n                                type: 'SET_PANEL_TYPE',\n                                variant: e.target.value as 'gz1' | 'gz28' | 'gz3' | 'gz1421' | 'gzgf',\n                            })\n                        }\n                    >\n                        {Object.keys(allInfoPanelTypes).map(type => (\n                            <FormControlLabel\n                                value={type}\n                                key={type}\n                                control={<Radio size=\"small\" color=\"primary\" />}\n                                label={t('design.panelType.' + type)}\n                            />\n                        ))}\n                    </RadioGroup>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.info_panel_type, open, classes.radioGroup]\n    );\n};\n\nconst NotesLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    const [isCollapse, setIsCollapse] = React.useState(false);\n    const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n    const [noteSelected, setNoteSelected] = React.useState(0);\n\n    const handleAdd = () => {\n        setNoteSelected(param.notesGZMTR.length);\n        dispatch({ type: 'ADD_NOTE_GZMTR' });\n        setIsDialogOpen(true);\n    };\n\n    const handleUpdate = (idx: number) => () => {\n        setNoteSelected(idx);\n        setIsDialogOpen(true);\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCollapse(prevOpen => !prevOpen)}>\n                <ListItemIcon>\n                    <Icon>notes</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.notesGZMTR.text')} />\n                {isCollapse ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n            </ListItem>\n            <Collapse in={isCollapse} unmountOnExit>\n                <List component=\"div\" disablePadding className={classes.nestedList}>\n                    {param.notesGZMTR.map((_, i) => (\n                        <NotesEntry key={i} idx={i} onEdit={handleUpdate(i)} />\n                    ))}\n                    <ListItem>\n                        <ListItemText disableTypography>\n                            <Typography color=\"primary\" style={{ cursor: 'pointer' }} onClick={handleAdd}>\n                                {t('design.notesGZMTR.addNote')}\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    {isDialogOpen && (\n                        <NoteEditDialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} idx={noteSelected} />\n                    )}\n                </List>\n            </Collapse>\n        </>\n    );\n};\n\nconst NotesEntry = (props: { idx: number; onEdit: () => void }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    const [toggleEl, setToggleEl] = React.useState<null | HTMLElement>(null);\n\n    const handleEdit = () => {\n        setToggleEl(null);\n        props.onEdit();\n    };\n\n    const handleSlide = (i: number) => (_event: React.ChangeEvent<{}>, value: number | number[]) =>\n        typeof value === 'object' &&\n        dispatch({\n            type: 'UPDATE_NOTE_GZMTR',\n            idx: props.idx,\n            note: param.notesGZMTR[props.idx].map((val, j) => (j === i ? value : val)) as Note,\n        });\n\n    const handleRemove = () => {\n        setToggleEl(null);\n        dispatch({ type: 'REMOVE_NOTE_GZMTR', idx: props.idx });\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemText\n                        primary={param.notesGZMTR[props.idx][0]}\n                        secondary={param.notesGZMTR[props.idx][1]}\n                        style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                            <Icon>more_vert</Icon>\n                        </IconButton>\n                        <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                            <MenuItem onClick={handleEdit}>{t('design.notesGZMTR.edit')}</MenuItem>\n\n                            <ListItem component=\"div\">\n                                <Slider\n                                    value={param.notesGZMTR[props.idx][2]}\n                                    onChange={handleSlide(2)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.left') },\n                                        { value: 100, label: t('layout.directionGZ.right') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <Slider\n                                    value={param.notesGZMTR[props.idx][3]}\n                                    onChange={handleSlide(3)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.top') },\n                                        { value: 100, label: t('layout.directionGZ.bottom') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText primary={t('design.notesGZMTR.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        edge=\"end\"\n                                        color=\"primary\"\n                                        checked={param.notesGZMTR[props.idx][4]}\n                                        onChange={(_, checked) =>\n                                            dispatch({\n                                                type: 'UPDATE_NOTE_GZMTR',\n                                                idx: props.idx,\n                                                note: param.notesGZMTR[props.idx].map((val, i) =>\n                                                    i === 4 ? checked : val\n                                                ) as Note,\n                                            })\n                                        }\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n\n                            <MenuItem onClick={handleRemove}>{t('design.notesGZMTR.remove')}</MenuItem>\n                        </Menu>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Divider variant=\"middle\" />\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.notesGZMTR[props.idx].toString(), toggleEl]\n    );\n};\n\ninterface AddNoteDialogProps {\n    open: boolean;\n    onClose: () => void;\n    idx: number;\n}\n\nconst NoteEditDialog = (props: AddNoteDialogProps) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const note = param.notesGZMTR[props.idx] || ['', '', 0, 0];\n\n    const [noteZH, setNoteZH] = React.useState(note[0] || '');\n    const [noteEN, setNoteEN] = React.useState(note[1] || '');\n\n    const handleClick = () => {\n        dispatch({ type: 'UPDATE_NOTE_GZMTR', idx: props.idx, note: [noteZH, noteEN, note[2], note[3], note[4]] });\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog open onClose={props.onClose}>\n                <DialogTitle>{t('design.notesGZMTR.editNote')}</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.zh')}\n                        margin=\"dense\"\n                        multiline\n                        autoFocus\n                        value={noteZH}\n                        onChange={e => setNoteZH(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.en')}\n                        margin=\"dense\"\n                        multiline\n                        value={noteEN}\n                        onChange={e => setNoteEN(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleClick} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [noteZH, noteEN]\n    );\n};\n"],"sourceRoot":""}